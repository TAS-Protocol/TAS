{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSA.sol\";\nimport \"../ShortStrings.sol\";\nimport \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _name.toStringWithFallback(_nameFallback),\n            _version.toStringWithFallback(_versionFallback),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        return\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(_FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@tableland/evm/contracts/interfaces/ITablelandTables.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\nimport {TablelandPolicy} from \"../TablelandPolicy.sol\";\n\n/**\n * @dev Interface of a TablelandTables compliant contract.\n */\ninterface ITablelandTables {\n    /**\n     * The caller is not authorized.\n     */\n    error Unauthorized();\n\n    /**\n     * RunSQL was called with a query length greater than maximum allowed.\n     */\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\n\n    /**\n     * @dev Emitted when `owner` creates a new table.\n     *\n     * owner - the to-be owner of the table\n     * tableId - the table id of the new table\n     * statement - the SQL statement used to create the table\n     */\n    event CreateTable(address owner, uint256 tableId, string statement);\n\n    /**\n     * @dev Emitted when a table is transferred from `from` to `to`.\n     *\n     * Not emmitted when a table is created.\n     * Also emitted after a table has been burned.\n     *\n     * from - the address that transfered the table\n     * to - the address that received the table\n     * tableId - the table id that was transferred\n     */\n    event TransferTable(address from, address to, uint256 tableId);\n\n    /**\n     * @dev Emitted when `caller` runs a SQL statement.\n     *\n     * caller - the address that is running the SQL statement\n     * isOwner - whether or not the caller is the table owner\n     * tableId - the id of the target table\n     * statement - the SQL statement to run\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\n     */\n    event RunSQL(\n        address caller,\n        bool isOwner,\n        uint256 tableId,\n        string statement,\n        TablelandPolicy policy\n    );\n\n    /**\n     * @dev Emitted when a table's controller is set.\n     *\n     * tableId - the id of the target table\n     * controller - the address of the controller (EOA or contract)\n     */\n    event SetController(uint256 tableId, address controller);\n\n    /**\n     * @dev Struct containing parameters needed to run a mutating sql statement\n     *\n     * tableId - the id of the target table\n     * statement - the SQL statement to run\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n     *\n     */\n    struct Statement {\n        uint256 tableId;\n        string statement;\n    }\n\n    /**\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\n     *\n     * owner - the to-be owner of the new table\n     * statement - the SQL statement used to create the table\n     *           - the statement type must be CREATE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     */\n    function create(\n        address owner,\n        string memory statement\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\n     *\n     * owner - the to-be owner of the new table\n     * statements - the SQL statements used to create the tables\n     *            - each statement type must be CREATE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     */\n    function create(\n        address owner,\n        string[] calldata statements\n    ) external payable returns (uint256[] memory);\n\n    /**\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\n     *\n     * caller - the address that is running the SQL statement\n     * tableId - the id of the target table\n     * statement - the SQL statement to run\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller`\n     * - `tableId` must exist and be the table being mutated\n     * - `caller` must be authorized by the table controller\n     * - `statement` must be less than or equal to 35000 bytes\n     */\n    function mutate(\n        address caller,\n        uint256 tableId,\n        string calldata statement\n    ) external payable;\n\n    /**\n     * @dev Runs an array of mutating SQL statements for `caller`\n     *\n     * caller - the address that is running the SQL statement\n     * statements - an array of structs containing the id of the target table and coresponding statement\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller`\n     * - `tableId` must be the table being muated in each struct's statement\n     * - `caller` must be authorized by the table controller if the statement is mutating\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\n     */\n    function mutate(\n        address caller,\n        ITablelandTables.Statement[] calldata statements\n    ) external payable;\n\n    /**\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\n     *\n     * When a table is created, it's controller is set to the zero address, which means that the\n     * contract will not enforce write access control. In this situation, validators will not accept\n     * transactions from non-owners unless explicitly granted access with \"GRANT\" SQL statements.\n     *\n     * When a controller address is set for a table, validators assume write access control is\n     * handled at the contract level, and will accept all transactions.\n     *\n     * You can unset a controller address for a table by setting it back to the zero address.\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\n     *\n     * caller - the address that is setting the controller\n     * tableId - the id of the target table\n     * controller - the address of the controller (EOA or contract)\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller` and owner of `tableId`\n     * - `tableId` must exist\n     * - `tableId` controller must not be locked\n     */\n    function setController(\n        address caller,\n        uint256 tableId,\n        address controller\n    ) external;\n\n    /**\n     * @dev Returns the controller for a table.\n     *\n     * tableId - the id of the target table\n     */\n    function getController(uint256 tableId) external returns (address);\n\n    /**\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\n     *\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\n     *\n     * caller - the address that is locking the controller\n     * tableId - the id of the target table\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller` and owner of `tableId`\n     * - `tableId` must exist\n     * - `tableId` controller must not be locked\n     */\n    function lockController(address caller, uint256 tableId) external;\n\n    /**\n     * @dev Sets the contract base URI.\n     *\n     * baseURI - the new base URI\n     *\n     * Requirements:\n     *\n     * - `msg.sender` must be contract owner\n     */\n    function setBaseURI(string memory baseURI) external;\n\n    /**\n     * @dev Pauses the contract.\n     *\n     * Requirements:\n     *\n     * - `msg.sender` must be contract owner\n     * - contract must be unpaused\n     */\n    function pause() external;\n\n    /**\n     * @dev Unpauses the contract.\n     *\n     * Requirements:\n     *\n     * - `msg.sender` must be contract owner\n     * - contract must be paused\n     */\n    function unpause() external;\n}\n"
    },
    "@tableland/evm/contracts/TablelandPolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\n/**\n * @dev Object defining how a table can be accessed.\n */\nstruct TablelandPolicy {\n    // Whether or not the table should allow SQL INSERT statements.\n    bool allowInsert;\n    // Whether or not the table should allow SQL UPDATE statements.\n    bool allowUpdate;\n    // Whether or not the table should allow SQL DELETE statements.\n    bool allowDelete;\n    // A conditional clause used with SQL UPDATE and DELETE statements.\n    // For example, a value of \"foo > 0\" will concatenate all SQL UPDATE\n    // and/or DELETE statements with \"WHERE foo > 0\".\n    // This can be useful for limiting how a table can be modified.\n    // Use {Policies-joinClauses} to include more than one condition.\n    string whereClause;\n    // A conditional clause used with SQL INSERT statements.\n    // For example, a value of \"foo > 0\" will concatenate all SQL INSERT\n    // statements with a check on the incoming data, i.e., \"CHECK (foo > 0)\".\n    // This can be useful for limiting how table data ban be added.\n    // Use {Policies-joinClauses} to include more than one condition.\n    string withCheck;\n    // A list of SQL column names that can be updated.\n    string[] updatableColumns;\n}\n"
    },
    "@tableland/evm/contracts/utils/SQLHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @dev Library of helpers for generating SQL statements from common parameters.\n */\nlibrary SQLHelpers {\n    /**\n     * @dev Generates a properly formatted table name from a prefix and table id.\n     *\n     * prefix - the user generated table prefix as a string\n     * tableId - the Tableland generated tableId as a uint256\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toNameFromId(\n        string memory prefix,\n        uint256 tableId\n    ) internal view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    prefix,\n                    \"_\",\n                    Strings.toString(block.chainid),\n                    \"_\",\n                    Strings.toString(tableId)\n                )\n            );\n    }\n\n    /**\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\n     *\n     * schema - a comma seperated string indicating the desired prefix. Example: \"int id, text name\"\n     * prefix - the user generated table prefix as a string\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toCreateFromSchema(\n        string memory schema,\n        string memory prefix\n    ) internal view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"CREATE TABLE \",\n                    prefix,\n                    \"_\",\n                    Strings.toString(block.chainid),\n                    \"(\",\n                    schema,\n                    \")\"\n                )\n            );\n    }\n\n    /**\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\n     *\n     * prefix - the user generated table prefix as a string.\n     * tableId - the Tableland generated tableId as a uint256.\n     * columns - a string encoded ordered list of columns that will be updated. Example: \"name, age\".\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \"'jerry', 24\". Values order must match column order.\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toInsert(\n        string memory prefix,\n        uint256 tableId,\n        string memory columns,\n        string memory values\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        return\n            string(\n                abi.encodePacked(\n                    \"INSERT INTO \",\n                    name,\n                    \"(\",\n                    columns,\n                    \")VALUES(\",\n                    values,\n                    \")\"\n                )\n            );\n    }\n\n    /**\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\n     *\n     * prefix - the user generated table prefix as a string.\n     * tableId - the Tableland generated tableId as a uint256.\n     * columns - a string encoded ordered list of columns that will be updated. Example: \"name, age\".\n     * values - an array where each item is a string encoded ordered list of values.\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toBatchInsert(\n        string memory prefix,\n        uint256 tableId,\n        string memory columns,\n        string[] memory values\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        string memory insert = string(\n            abi.encodePacked(\"INSERT INTO \", name, \"(\", columns, \")VALUES\")\n        );\n        for (uint256 i = 0; i < values.length; i++) {\n            if (i == 0) {\n                insert = string(abi.encodePacked(insert, \"(\", values[i], \")\"));\n            } else {\n                insert = string(abi.encodePacked(insert, \",(\", values[i], \")\"));\n            }\n        }\n        return insert;\n    }\n\n    /**\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\n     *\n     * prefix - the user generated table prefix as a string\n     * tableId - the Tableland generated tableId as a uint256\n     * setters - a string encoded set of updates. Example: \"name='tom', age=26\"\n     * filters - a string encoded list of filters or \"\" for no filters. Example: \"id<2 and name!='jerry'\"\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toUpdate(\n        string memory prefix,\n        uint256 tableId,\n        string memory setters,\n        string memory filters\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        string memory filter = \"\";\n        if (bytes(filters).length > 0) {\n            filter = string(abi.encodePacked(\" WHERE \", filters));\n        }\n        return\n            string(abi.encodePacked(\"UPDATE \", name, \" SET \", setters, filter));\n    }\n\n    /**\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\n     *\n     * prefix - the user generated table prefix as a string.\n     * tableId - the Tableland generated tableId as a uint256.\n     * filters - a string encoded list of filters. Example: \"id<2 and name!='jerry'\".\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toDelete(\n        string memory prefix,\n        uint256 tableId,\n        string memory filters\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        return\n            string(abi.encodePacked(\"DELETE FROM \", name, \" WHERE \", filters));\n    }\n\n    /**\n     * @dev Add single quotes around a string value\n     *\n     * input - any input value.\n     *\n     */\n    function quote(string memory input) internal pure returns (string memory) {\n        return string(abi.encodePacked(\"'\", input, \"'\"));\n    }\n}\n"
    },
    "@tableland/evm/contracts/utils/TablelandDeployments.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\nimport {ITablelandTables} from \"../interfaces/ITablelandTables.sol\";\n\n/**\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\n */\nlibrary TablelandDeployments {\n    /**\n     * Current chain does not have a TablelandTables deployment.\n     */\n    error ChainNotSupported(uint256 chainid);\n\n    // TablelandTables address on Ethereum.\n    address internal constant MAINNET =\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\n    // TablelandTables address on Ethereum.\n    address internal constant HOMESTEAD = MAINNET;\n    // TablelandTables address on Optimism.\n    address internal constant OPTIMISM =\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\n    // TablelandTables address on Arbitrum One.\n    address internal constant ARBITRUM =\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\n    // TablelandTables address on Arbitrum Nova.\n    address internal constant ARBITRUM_NOVA =\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\n    // TablelandTables address on Polygon.\n    address internal constant MATIC =\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\n    // TablelandTables address on Filecoin.\n    address internal constant FILECOIN =\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\n\n    // TablelandTables address on Ethereum Sepolia.\n    address internal constant SEPOLIA =\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\n    // TablelandTables address on Optimism Goerli.\n    address internal constant OPTIMISM_GOERLI =\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\n    // TablelandTables address on Arbitrum Goerli.\n    address internal constant ARBITRUM_GOERLI =\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\n    // TablelandTables address on Polygon Mumbai.\n    address internal constant MATICMUM =\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\n    // TablelandTables address on Filecoin Calibration.\n    address internal constant FILECOIN_CALIBRATION =\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\n\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\n    address internal constant LOCAL_TABLELAND =\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\n\n    /**\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\n     *\n     * The selection order is meant to reduce gas on more expensive chains.\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function get() internal view returns (ITablelandTables) {\n        if (block.chainid == 1) {\n            return ITablelandTables(MAINNET);\n        } else if (block.chainid == 10) {\n            return ITablelandTables(OPTIMISM);\n        } else if (block.chainid == 42161) {\n            return ITablelandTables(ARBITRUM);\n        } else if (block.chainid == 42170) {\n            return ITablelandTables(ARBITRUM_NOVA);\n        } else if (block.chainid == 137) {\n            return ITablelandTables(MATIC);\n        } else if (block.chainid == 314) {\n            return ITablelandTables(FILECOIN);\n        } else if (block.chainid == 11155111) {\n            return ITablelandTables(SEPOLIA);\n        } else if (block.chainid == 420) {\n            return ITablelandTables(OPTIMISM_GOERLI);\n        } else if (block.chainid == 421613) {\n            return ITablelandTables(ARBITRUM_GOERLI);\n        } else if (block.chainid == 80001) {\n            return ITablelandTables(MATICMUM);\n        } else if (block.chainid == 314159) {\n            return ITablelandTables(FILECOIN_CALIBRATION);\n        } else if (block.chainid == 31337) {\n            return ITablelandTables(LOCAL_TABLELAND);\n        } else {\n            revert ChainNotSupported(block.chainid);\n        }\n    }\n}\n"
    },
    "contracts/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror DeadlineExpired();\nerror InvalidTAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/// @notice A struct representing ECDSA signature data.\nstruct Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/// @notice A struct representing a single attestation.\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n    string dataBase64;\n}\n\n/// @notice A helper function to work with unchecked iterators in loops.\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\n    unchecked {\n        j = i + 1;\n    }\n}\n"
    },
    "contracts/eip1271/EIP1271Verifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {EIP712} from \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport {SignatureChecker} from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\n// prettier-ignore\nimport {\n    AttestationRequestData,\n    DelegatedAttestationRequest,\n    DelegatedRevocationRequest,\n    RevocationRequestData\n} from \"../ITAS.sol\";\n\nimport {DeadlineExpired, NO_EXPIRATION_TIME, Signature, InvalidSignature} from \"../Common.sol\";\n\n/// @title EIP1271Verifier\n/// @notice EIP1271Verifier typed signatures verifier for EAS delegated attestations.\nabstract contract EIP1271Verifier is EIP712 {\n    using Address for address;\n\n    error InvalidNonce();\n\n    // The hash of the data type used to relay calls to the attest function. It's the value of\n    // keccak256(\"Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint256 nonce,uint64 deadline)\").\n    bytes32 private constant ATTEST_TYPEHASH =\n        0xf83bb2b0ede93a840239f7e701a54d9bc35f03701f51ae153d601c6947ff3d3f;\n\n    // The hash of the data type used to relay calls to the revoke function. It's the value of\n    // keccak256(\"Revoke(bytes32 schema,bytes32 uid,uint256 value,uint256 nonce,uint64 deadline)\").\n    bytes32 private constant REVOKE_TYPEHASH =\n        0x2d4116d8c9824e4c316453e5c2843a1885580374159ce8768603c49085ef424c;\n\n    // The user readable name of the signing domain.\n    string private _name;\n\n    // Replay protection nonces.\n    mapping(address attester => uint256 nonce) private _nonces;\n\n    /// @dev Creates a new EIP1271Verifier instance.\n    /// @param version The current major version of the signing domain\n    constructor(\n        string memory name,\n        string memory version\n    ) EIP712(name, version) {\n        _name = name;\n    }\n\n    /// @notice Returns the domain separator used in the encoding of the signatures for attest, and revoke.\n    /// @return The domain separator used in the encoding of the signatures for attest, and revoke.\n    function getDomainSeparator() external view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /// @notice Returns the current nonce per-account.\n    /// @param account The requested account.\n    /// @return The current nonce.\n    function getNonce(address account) external view returns (uint256) {\n        return _nonces[account];\n    }\n\n    /// @notice Returns the EIP712 type hash for the attest function.\n    /// @return The EIP712 type hash for the attest function.\n    function getAttestTypeHash() external pure returns (bytes32) {\n        return ATTEST_TYPEHASH;\n    }\n\n    /// @notice Returns the EIP712 type hash for the revoke function.\n    /// @return The EIP712 type hash for the revoke function.\n    function getRevokeTypeHash() external pure returns (bytes32) {\n        return REVOKE_TYPEHASH;\n    }\n\n    /// @notice Returns the EIP712 name.\n    /// @return The EIP712 name.\n    function getName() external view returns (string memory) {\n        return _name;\n    }\n\n    /// @notice Provides users an option to invalidate nonces by increasing their nonces to (higher) new values.\n    /// @param newNonce The (higher) new value.\n    function increaseNonce(uint256 newNonce) external {\n        if (newNonce <= _nonces[msg.sender]) {\n            revert InvalidNonce();\n        }\n\n        _nonces[msg.sender] = newNonce;\n    }\n\n    /// @dev Verifies delegated attestation request.\n    /// @param request The arguments of the delegated attestation request.\n    function _verifyAttest(\n        DelegatedAttestationRequest memory request\n    ) internal {\n        if (\n            request.deadline != NO_EXPIRATION_TIME &&\n            request.deadline <= _time()\n        ) {\n            revert DeadlineExpired();\n        }\n\n        AttestationRequestData memory data = request.data;\n        Signature memory signature = request.signature;\n\n        uint256 nonce;\n        unchecked {\n            nonce = _nonces[request.attester]++;\n        }\n\n        bytes32 hash = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    ATTEST_TYPEHASH,\n                    request.schema,\n                    data.recipient,\n                    data.expirationTime,\n                    data.revocable,\n                    data.refUID,\n                    keccak256(data.data),\n                    data.value,\n                    nonce,\n                    request.deadline\n                )\n            )\n        );\n        if (\n            !SignatureChecker.isValidSignatureNow(\n                request.attester,\n                hash,\n                abi.encodePacked(signature.r, signature.s, signature.v)\n            )\n        ) {\n            revert InvalidSignature();\n        }\n    }\n\n    /// @dev Verifies delegated revocation request.\n    /// @param request The arguments of the delegated revocation request.\n    function _verifyRevoke(DelegatedRevocationRequest memory request) internal {\n        if (\n            request.deadline != NO_EXPIRATION_TIME &&\n            request.deadline <= _time()\n        ) {\n            revert DeadlineExpired();\n        }\n\n        RevocationRequestData memory data = request.data;\n        Signature memory signature = request.signature;\n\n        uint256 nonce;\n        unchecked {\n            nonce = _nonces[request.revoker]++;\n        }\n\n        bytes32 hash = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    REVOKE_TYPEHASH,\n                    request.schema,\n                    data.uid,\n                    data.value,\n                    nonce,\n                    request.deadline\n                )\n            )\n        );\n        if (\n            !SignatureChecker.isValidSignatureNow(\n                request.revoker,\n                hash,\n                abi.encodePacked(signature.r, signature.s, signature.v)\n            )\n        ) {\n            revert InvalidSignature();\n        }\n    }\n\n    /// @dev Returns the current's block timestamp. This method is overridden during tests and used to simulate the\n    ///     current block time.\n    function _time() internal view virtual returns (uint64) {\n        return uint64(block.timestamp);\n    }\n}\n"
    },
    "contracts/interfaces/ISchemaTablelandIndexer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport {ISchemaRegistry, SchemaRegistrationInput} from \"../ISchemaRegistry.sol\";\n\n/// @title ISchemaRegistry\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\ninterface ISchemaTablelandIndexer {\n    function SchemaRegistered(\n        SchemaRegistrationInput memory input,\n        bytes32 schemaUID\n    ) external;\n}\n"
    },
    "contracts/interfaces/ITASIndexer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport {Attestation} from \"../ITAS.sol\";\n\n/// @title ISchemaRegistry\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\ninterface ITASIndexer {\n    function AttestationInserted(Attestation memory attestation) external;\n\n    function AttestationRevokedUpdate(\n        bytes32 uid,\n        address revoker,\n        uint256 revocationTime\n    ) external;\n\n    function Timestamped(bytes32 uid, uint256 time) external;\n\n    function RevokedOffChain(\n        address revoker,\n        bytes32 uid,\n        uint256 time\n    ) external;\n}\n"
    },
    "contracts/ISchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {ISchemaResolver} from \"./resolver/ISchemaResolver.sol\";\n\n/// @notice A struct representing a record for a submitted schema.\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\nstruct SchemaRegistrationInput {\n    string schema;\n    string schemaName;\n    string schemaDescription;\n    string[] categories;\n    ISchemaResolver schemaResolver;\n    bool revocable;\n}\n\n/// @title ISchemaRegistry\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\ninterface ISchemaRegistry {\n    function register(\n        SchemaRegistrationInput memory input\n    ) external returns (bytes32);\n\n    /// @notice Returns an existing schema by UID\n    /// @param uid The UID of the schema to retrieve.\n    /// @return The schema data members.\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"
    },
    "contracts/ITAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {ISchemaRegistry} from \"./ISchemaRegistry.sol\";\nimport {Attestation, Signature} from \"./Common.sol\";\n\n/// @notice A struct representing the arguments of the attestation request.\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    string dataBase64;\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the attestation request.\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the full delegated attestation request.\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    Signature signature; // The ECDSA signature data.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi attestation request.\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the arguments of the revocation request.\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the revocation request.\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the arguments of the full delegated revocation request.\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    Signature signature; // The ECDSA signature data.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi revocation request.\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @title ITAS\n/// @notice TAS - Tableland Attestation Service interface.\ninterface ITAS {\n    /// @notice Returns the address of the global schema registry.\n    /// @return The address of the global schema registry.\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /// @notice Attests to a specific schema.\n    /// @param request The arguments of the attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attest({\n    ///         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n    ///         data: {\n    ///             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    ///             data: \"0xF00D\",\n    ///             value: 0\n    ///         }\n    ///     })\n    function attest(\n        AttestationRequest calldata request\n    ) external payable returns (bytes32);\n\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attestByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\n    ///         deadline: 1673891048\n    ///     })\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /// @notice Attests to multiple schemas.\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttest([{\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n    ///             data: '0x12345678',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiAttest(\n        MultiAttestationRequest[] calldata multiRequests\n    ) external payable returns (bytes32[] memory);\n\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttestByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         {\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /// @notice Revokes an existing attestation to a specific schema.\n    /// @param request The arguments of the revocation request.\n    ///\n    /// Example:\n    ///     revoke({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n    ///             value: 0\n    ///         }\n    ///     })\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated revocation request.\n    ///\n    /// Example:\n    ///     revokeByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 27,\n    ///             r: '0xb593...7142',\n    ///             s: '0x0f5b...2cce'\n    ///         },\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     })\n    function revokeByDelegation(\n        DelegatedRevocationRequest calldata delegatedRequest\n    ) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas.\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevoke([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiRevoke(\n        MultiRevocationRequest[] calldata multiRequests\n    ) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevokeByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /// @notice Timestamps the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /// @notice Timestamps the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /// @notice Revokes the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /// @notice Revokes the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function multiRevokeOffchain(\n        bytes32[] calldata data\n    ) external returns (uint64);\n\n    /// @notice Returns an existing attestation by UID.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return The attestation data members.\n    function getAttestation(\n        bytes32 uid\n    ) external view returns (Attestation memory);\n\n    /// @notice Checks whether an attestation exists.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return Whether an attestation exists.\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n}\n"
    },
    "contracts/resolver/examples/ACResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport {ITAS, Attestation} from \"../../ITAS.sol\";\n\nimport {SchemaResolver} from \"../SchemaResolver.sol\";\n\nimport {IACResolverIndexer} from \"./interfaces/IACResolverIndexer.sol\";\n\nimport \"../../ISchemaRegistry.sol\";\n\n/**\n * @title ACResolver\n * @notice A schema resolver subcription to content example\n */\n\ncontract ACResolver is SchemaResolver, AccessControl {\n    // State variables\n    ISchemaRegistry private schemaRegistry;\n\n    address public splitterFactory;\n\n    struct SchemaInfo {\n        bool AllowAllToAttest;\n        bool AllowAllToRevoke;\n        bool encrypted;\n    }\n\n    mapping(bytes32 => SchemaInfo) private schemas;\n\n    ISchemaResolver resolver = ISchemaResolver(address(this));\n\n    IACResolverIndexer tableland;\n\n    constructor(\n        ITAS tas,\n        address _splitterFactory,\n        ISchemaRegistry _schemaRegistry,\n        IACResolverIndexer _tableland\n    ) SchemaResolver(tas) {\n        schemaRegistry = _schemaRegistry;\n\n        splitterFactory = _splitterFactory;\n\n        tableland = _tableland;\n    }\n\n    function ACSchemaRegistered(\n        address[] memory attesters,\n        address[] memory revokers,\n        string[] memory categories,\n        bool encrypted,\n        string memory schema,\n        string memory schemaName,\n        string memory schemaDescription\n    ) external {\n        // Register the schema and get its UID\n        bytes32 schemaUID = schemaRegistry.register(\n            SchemaRegistrationInput(\n                schema,\n                schemaName,\n                schemaDescription,\n                categories,\n                resolver,\n                true\n            )\n        );\n        uint attestersSize = attesters.length;\n        if (attestersSize == 0) {\n            schemas[schemaUID].AllowAllToAttest = true;\n        }\n        uint revokersSize = revokers.length;\n        if (revokersSize == 0) {\n            schemas[schemaUID].AllowAllToRevoke = true;\n        }\n\n        SchemaInfoInserted(schemaUID, attesters, revokers, encrypted);\n    }\n\n    function SchemaInfoInserted(\n        bytes32 schemaUID,\n        address[] memory attesters,\n        address[] memory revokers,\n        bool encrypted\n    ) internal {\n        schemas[schemaUID].encrypted = encrypted;\n        _grantRole(role(schemaUID, \"ADMIN\"), tx.origin);\n        tableland.AddSchemaInfo(schemaUID, encrypted);\n\n        for (uint i = 0; i < attesters.length; i++) {\n            tableland.AddSchemaAttester(schemaUID, attesters[i]);\n            _grantRole(role(schemaUID, \"ATTESTER\"), attesters[i]);\n        }\n        for (uint i = 0; i < revokers.length; i++) {\n            tableland.AddSchemaRevoker(schemaUID, revokers[i]);\n            _grantRole(role(schemaUID, \"REVOKER\"), revokers[i]);\n        }\n    }\n\n    /**\n     * @dev Handles attestation by validating the attester and bond value.\n     * @param attestation The attestation data.\n     * @return Boolean indicating the success of the attestation.\n     */\n    function onAttest(\n        Attestation calldata attestation,\n        uint256 /* value */\n    ) internal view override returns (bool) {\n        address attester = attestation.attester;\n        bytes32 schemaUID = attestation.schema;\n        if (schemas[schemaUID].AllowAllToAttest) {\n            return true;\n        }\n        if (hasRole(role(schemaUID, \"ATTESTER\"), attester)) {\n            return true;\n        }\n        // For delegated attestations\n        if (hasRole(role(schemaUID, \"ATTESTER\"), tx.origin)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Checks if an attestation can be revoked based on resolution status and time.\n     * @return Boolean indicating whether the attestation can be revoked.\n     */\n    function onRevoke(\n        Attestation calldata attestation,\n        uint256 /* value */\n    ) internal view override returns (bool) {\n        bytes32 schemaUID = attestation.schema;\n        if (schemas[schemaUID].AllowAllToRevoke) {\n            return true;\n        }\n        if (hasRole(role(schemaUID, \"REVOKER\"), tx.origin)) {\n            return true;\n        }\n        return false;\n    }\n\n    function hasAccess(\n        address sender,\n        bytes32 schemaUID\n    ) external view returns (bool) {\n        if (\n            (hasRole(role(schemaUID, \"REVOKER\"), sender) ||\n                (hasRole(keccak256(abi.encode(schemaUID, \"ATTESTER\")), sender)))\n        ) {\n            return true;\n        } else if (!schemas[schemaUID].encrypted) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function addAttester(\n        bytes32 schemaUID,\n        address newAttester\n    ) external onlyRole(role(schemaUID, \"ADMIN\")) {\n        tableland.AddSchemaAttester(schemaUID, newAttester);\n        _grantRole(role(schemaUID, \"ATTESTER\"), newAttester);\n    }\n\n    function addRevoker(\n        bytes32 schemaUID,\n        address newRevoker\n    ) external onlyRole(role(schemaUID, \"ADMIN\")) {\n        tableland.AddSchemaRevoker(schemaUID, newRevoker);\n        _grantRole(role(schemaUID, \"REVOKER\"), newRevoker);\n    }\n\n    function removeAttester(\n        bytes32 schemaUID,\n        address newAttester\n    ) external onlyRole(role(schemaUID, \"ADMIN\")) {\n        tableland.AddSchemaAttester(schemaUID, newAttester);\n        _revokeRole(role(schemaUID, \"ATTESTER\"), newAttester);\n    }\n\n    function removeRevoker(\n        bytes32 schemaUID,\n        address newRevoker\n    ) external onlyRole(role(schemaUID, \"ADMIN\")) {\n        tableland.AddSchemaRevoker(schemaUID, newRevoker);\n        _revokeRole(role(schemaUID, \"REVOKER\"), newRevoker);\n    }\n\n    /**\n     * @notice Indicates whether the contract is designed to handle incoming payments.\n     * @return True, indicating that the contract can accept payments.\n     */\n    function isPayable() public pure override returns (bool) {\n        return false;\n    }\n\n    function role(\n        bytes32 schemaUID,\n        string memory _role\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encode(schemaUID, _role));\n    }\n}\n"
    },
    "contracts/resolver/examples/ContentSubscriptionResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {ITAS, Attestation} from \"../../ITAS.sol\";\n\nimport {SchemaResolver} from \"../SchemaResolver.sol\";\n\nimport {ITablelandSubscriptionsIndexer} from \"./interfaces/ITablelandSubscriptionsIndexer.sol\";\n\nimport \"../../ISchemaRegistry.sol\";\n\n/**\n * @title ContentSubscriptionResolver\n * @notice A schema resolver subcription to content example\n */\ncontract ContentSubscriptionResolver is SchemaResolver {\n    using Address for address payable;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    uint256 ONE_MONTH = 30 days;\n\n    struct SchemaInfo {\n        EnumerableSet.AddressSet contentCreators;\n        address multisig;\n        uint256 subscriptionPrice;\n        uint256 totalRevenue;\n        address splitterContract;\n    }\n\n    mapping(bytes32 => SchemaInfo) schemas;\n\n    mapping(address => mapping(bytes32 => uint256)) public userSubscriptions;\n\n    // The global schema registry.\n    ISchemaRegistry private schemaRegistry;\n\n    ISchemaResolver schemaResolver;\n\n    ITablelandSubscriptionsIndexer tableland;\n\n    bool revocable;\n\n    address public splitterFactory;\n\n    constructor(\n        ITAS tas,\n        address _splitterFactory,\n        ISchemaRegistry _schemaRegistry,\n        ITablelandSubscriptionsIndexer _tableland\n    ) SchemaResolver(tas) {\n        schemaResolver = ISchemaResolver(address(this));\n\n        schemaRegistry = _schemaRegistry;\n\n        splitterFactory = _splitterFactory;\n\n        tableland = _tableland;\n    }\n\n    function registerSubscriptionSchema(\n        address[] memory contentCreators,\n        uint256[] memory creatorsShares,\n        uint256 monthlySubscriptionPrice,\n        SchemaRegistrationInput memory input\n    ) external {\n        require(monthlySubscriptionPrice > 0, \"Subscription price must be > 0\");\n        // Register the schema and get its UID\n        bytes32 schemaUID = registerSchema(input);\n\n        SchemaInfo storage Schema = schemas[schemaUID];\n\n        Schema.splitterContract = createSplitter(\n            contentCreators,\n            creatorsShares\n        );\n\n        Schema.subscriptionPrice = monthlySubscriptionPrice;\n\n        for (uint256 i = 0; i < contentCreators.length; i++) {\n            Schema.contentCreators.add(contentCreators[i]);\n        }\n\n        Schema.multisig = tx.origin;\n\n        tableland.SchemaInfoInserted(\n            schemaUID,\n            monthlySubscriptionPrice,\n            Schema.splitterContract\n        );\n\n        tableland.SchemaAdminsInserted(\n            schemaUID,\n            contentCreators,\n            creatorsShares\n        );\n\n        tableland.SchemaRevenueRecordCreated(schemaUID);\n    }\n\n    function registerSchema(\n        SchemaRegistrationInput memory input\n    ) internal returns (bytes32 schemaUID) {\n        input.schemaResolver = schemaResolver;\n        input.revocable = false;\n        schemaUID = schemaRegistry.register(input);\n    }\n\n    /**\n     * @dev Handles attestation by validating the attester and bond value.\n     * @param attestation The attestation data.\n     * @return Boolean indicating the success of the attestation.\n     */\n    function onAttest(\n        Attestation calldata attestation,\n        uint256 /* value */\n    ) internal view override returns (bool) {\n        address attester = attestation.attester;\n        bytes32 schemaUID = attestation.schema;\n        if (!schemas[schemaUID].contentCreators.contains(attester)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @dev Checks if an attestation can be revoked based on resolution status and time.\n     * @return Boolean indicating whether the attestation can be revoked.\n     */\n    function onRevoke(\n        Attestation calldata /*attestation*/,\n        uint256 /* value */\n    ) internal pure override returns (bool) {\n        return false;\n    }\n\n    function createSplitter(\n        address[] memory admins,\n        uint256[] memory shares\n    ) internal returns (address splitterInstance) {\n        // Deploy a splitter contract using thirdWeb factory and implementation with the calculated data\n        bytes memory result = Address.functionCall(\n            splitterFactory,\n            abi.encodeWithSignature(\n                \"createSplitter(address[],uint256[])\",\n                admins,\n                shares\n            )\n        );\n\n        splitterInstance = abi.decode(result, (address));\n    }\n\n    /**\n     * @dev Mint tokens for encrypted attestations.\n     * @param schemaUID The UID of the schema for which tokens are being minted.\n     */\n    function subscribe(bytes32 schemaUID, uint256 months) external payable {\n        require(months > 0, \"min subscription = 1 month\");\n        require(\n            schemas[schemaUID].subscriptionPrice * months == msg.value,\n            \"Incorrect payment value \"\n        );\n        require(\n            schemas[schemaUID].splitterContract != address(0),\n            \"non existed subscription schemaUID\"\n        );\n\n        uint256 subscriptionEndDate = userSubscriptions[msg.sender][schemaUID];\n\n        uint256 time = ONE_MONTH * months;\n\n        if (subscriptionEndDate == 0) {\n            time += block.timestamp;\n            tableland.SchemaSubscriptionCreated(schemaUID, msg.sender, time);\n            userSubscriptions[msg.sender][schemaUID] = time;\n        } else if (subscriptionEndDate > block.timestamp) {\n            subscriptionEndDate += time;\n            userSubscriptions[msg.sender][schemaUID] = subscriptionEndDate;\n            tableland.SchemaSubscriptionUpdated(\n                schemaUID,\n                msg.sender,\n                subscriptionEndDate\n            );\n        } else {\n            time += block.timestamp;\n            tableland.SchemaSubscriptionUpdated(schemaUID, msg.sender, time);\n            userSubscriptions[msg.sender][schemaUID] = time;\n        }\n\n        schemas[schemaUID].totalRevenue += msg.value;\n\n        // Send the funds to the splitter contract for distribution\n        Address.sendValue(\n            payable(schemas[schemaUID].splitterContract),\n            msg.value\n        );\n        // Distribute funds to valid attestors\n        Address.functionCall(\n            schemas[schemaUID].splitterContract,\n            abi.encodeWithSignature(\"distribute()\")\n        );\n\n        tableland.SchemaRevenueUpdated(\n            schemaUID,\n            schemas[schemaUID].totalRevenue\n        );\n    }\n\n    /**\n     * @notice Indicates whether the contract is designed to handle incoming payments.\n     * @return True, indicating that the contract can accept payments.\n     */\n    function isPayable() public pure override returns (bool) {\n        return true;\n    }\n\n    function hasAccess(\n        address sender,\n        bytes32 schemaUID\n    ) external view returns (bool) {\n        return (userSubscriptions[sender][schemaUID] > block.timestamp ||\n            schemas[schemaUID].contentCreators.contains(sender));\n    }\n\n    function updatePrice(bytes32 schemaUID, uint256 newPrice) external {\n        require(schemas[schemaUID].multisig == msg.sender);\n        require(newPrice > 0);\n        schemas[schemaUID].subscriptionPrice = newPrice;\n        tableland.SchemaPriceUpdated(schemaUID, newPrice);\n    }\n\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(data.length * 2);\n\n        bytes memory _base = \"0123456789abcdef\";\n\n        for (uint256 i = 0; i < data.length; i++) {\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\n        }\n\n        return string(abi.encodePacked(\"0x\", converted));\n    }\n}\n"
    },
    "contracts/resolver/examples/interfaces/IACResolverIndexer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IACResolverIndexer {\n    function AddSchemaAttester(bytes32 schemaUID, address attester) external;\n\n    function AddSchemaRevoker(bytes32 schemaUID, address revoker) external;\n\n    function AddSchemaInfo(bytes32 schemaUID, bool encrypted) external;\n}\n"
    },
    "contracts/resolver/examples/interfaces/ITablelandSubscriptionsIndexer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITablelandSubscriptionsIndexer {\n    function SchemaInfoInserted(\n        bytes32 schemaUID,\n        uint256 monthlySubscriptionPrice,\n        address splitterContract\n    ) external;\n\n    function SchemaAdminsInserted(\n        bytes32 schemaUID,\n        address[] memory contentCreators,\n        uint256[] memory creatorsShares\n    ) external;\n\n    function SchemaSubscriptionCreated(\n        bytes32 schemaUID,\n        address subscriber,\n        uint256 subscriptionEndsAt\n    ) external;\n\n    function SchemaSubscriptionUpdated(\n        bytes32 schemaUID,\n        address subscriber,\n        uint256 subscriptionEndsAt\n    ) external;\n\n    function SchemaRevenueRecordCreated(bytes32 schemaUID) external;\n\n    function SchemaRevenueUpdated(\n        bytes32 schemaUID,\n        uint256 totalClaimed\n    ) external;\n\n    function SchemaPriceUpdated(bytes32 schemaUID, uint256 newPrice) external;\n}\n"
    },
    "contracts/resolver/ISchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Attestation} from \"../Common.sol\";\n\n/// @title ISchemaResolver\n/// @notice The interface of an optional schema resolver.\ninterface ISchemaResolver {\n    /// @notice Checks if the resolver can be sent ETH.\n    /// @return Whether the resolver supports ETH transfers.\n    function isPayable() external pure returns (bool);\n\n    /// @notice Processes an attestation and verifies whether it's valid.\n    /// @param attestation The new attestation.\n    /// @return Whether the attestation is valid.\n    function attest(\n        Attestation calldata attestation\n    ) external payable returns (bool);\n\n    /// @notice Processes multiple attestations and verifies whether they are valid.\n    /// @param attestations The new attestations.\n    /// @param values Explicit ETH amounts which were sent with each attestation.\n    /// @return Whether all the attestations are valid.\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\n    /// @param attestation The existing attestation to be revoked.\n    /// @return Whether the attestation can be revoked.\n    function revoke(\n        Attestation calldata attestation\n    ) external payable returns (bool);\n\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\n    /// @param attestations The existing attestations to be revoked.\n    /// @param values Explicit ETH amounts which were sent with each revocation.\n    /// @return Whether the attestations can be revoked.\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"
    },
    "contracts/resolver/SchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport {ITAS, Attestation} from \"../ITAS.sol\";\nimport {AccessDenied, InvalidTAS, InvalidLength, uncheckedInc} from \"../Common.sol\";\nimport {Semver} from \"../Semver.sol\";\n\nimport {ISchemaResolver} from \"./ISchemaResolver.sol\";\n\n/// @title SchemaResolver\n/// @notice The base schema resolver contract.\nabstract contract SchemaResolver is ISchemaResolver, Semver {\n    error InsufficientValue();\n    error NotPayable();\n\n    // The global tas contract.\n    ITAS internal immutable _tas;\n\n    /// @dev Creates a new resolver.\n    /// @param tas The address of the global tas contract.\n    constructor(ITAS tas) Semver(0, 0, 1) {\n        if (address(tas) == address(0)) {\n            revert InvalidTAS();\n        }\n\n        _tas = tas;\n    }\n\n    /// @dev Ensures that only the tas contract can make this call.\n    modifier onlytas() {\n        _onlytas();\n\n        _;\n    }\n\n    /// @inheritdoc ISchemaResolver\n    function isPayable() public pure virtual returns (bool) {\n        return false;\n    }\n\n    /// @dev ETH callback.\n    receive() external payable virtual {\n        if (!isPayable()) {\n            revert NotPayable();\n        }\n    }\n\n    /// @inheritdoc ISchemaResolver\n    function attest(\n        Attestation calldata attestation\n    ) external payable onlytas returns (bool) {\n        return onAttest(attestation, msg.value);\n    }\n\n    /// @inheritdoc ISchemaResolver\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable onlytas returns (bool) {\n        uint256 length = attestations.length;\n        if (length != values.length) {\n            revert InvalidLength();\n        }\n\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Pltase note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint256 remainingValue = msg.value;\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            // Ensure that the attester/revoker doesn't try to spend more than available.\n            uint256 value = values[i];\n            if (value > remainingValue) {\n                revert InsufficientValue();\n            }\n\n            // Forward the attestation to the underlying resolver and return false in case it isn't approved.\n            if (!onAttest(attestations[i], value)) {\n                return false;\n            }\n\n            unchecked {\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\n                remainingValue -= value;\n            }\n        }\n\n        return true;\n    }\n\n    /// @inheritdoc ISchemaResolver\n    function revoke(\n        Attestation calldata attestation\n    ) external payable onlytas returns (bool) {\n        return onRevoke(attestation, msg.value);\n    }\n\n    /// @inheritdoc ISchemaResolver\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable onlytas returns (bool) {\n        uint256 length = attestations.length;\n        if (length != values.length) {\n            revert InvalidLength();\n        }\n\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Pltase note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint256 remainingValue = msg.value;\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            // Ensure that the attester/revoker doesn't try to spend more than available.\n            uint256 value = values[i];\n            if (value > remainingValue) {\n                revert InsufficientValue();\n            }\n\n            // Forward the revocation to the underlying resolver and return false in case it isn't approved.\n            if (!onRevoke(attestations[i], value)) {\n                return false;\n            }\n\n            unchecked {\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\n                remainingValue -= value;\n            }\n        }\n\n        return true;\n    }\n\n    /// @notice A resolver callback that should be implemented by child contracts.\n    /// @param attestation The new attestation.\n    /// @param value An explicit ETH amount that was sent to the resolver. Pltase note that this value is verified in\n    ///     both attest() and multiAttest() callbacks tas-only callbacks and that in case of multi attestations, it'll\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\n    ///     attestations in the batch.\n    /// @return Whether the attestation is valid.\n    function onAttest(\n        Attestation calldata attestation,\n        uint256 value\n    ) internal virtual returns (bool);\n\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\n    /// @param attestation The existing attestation to be revoked.\n    /// @param value An explicit ETH amount that was sent to the resolver. Pltase note that this value is verified in\n    ///     both revoke() and multiRevoke() callbacks tas-only callbacks and that in case of multi attestations, it'll\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\n    ///     attestations in the batch.\n    /// @return Whether the attestation can be revoked.\n    function onRevoke(\n        Attestation calldata attestation,\n        uint256 value\n    ) internal virtual returns (bool);\n\n    /// @dev Ensures that only the tas contract can make this call.\n    function _onlytas() private view {\n        if (msg.sender != address(_tas)) {\n            revert AccessDenied();\n        }\n    }\n}\n"
    },
    "contracts/SchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {ISchemaResolver} from \"./resolver/ISchemaResolver.sol\";\n\nimport {EMPTY_UID} from \"./Common.sol\";\n\nimport {Semver} from \"./Semver.sol\";\n\nimport {ISchemaRegistry, SchemaRecord, SchemaRegistrationInput} from \"./ISchemaRegistry.sol\";\n\nimport {ISchemaTablelandIndexer} from \"./interfaces/ISchemaTablelandIndexer.sol\";\n\n/// @title SchemaRegistry\n/// @notice The global schema registry.\ncontract SchemaRegistry is ISchemaRegistry, Semver {\n    ISchemaTablelandIndexer tableland;\n\n    error AlreadyExists();\n\n    // The global mapping between schema records and their IDs.\n    mapping(bytes32 uid => SchemaRecord schemaRecord) private _registry;\n\n    /// @dev Creates a new SchemaRegistry instance.\n    constructor(ISchemaTablelandIndexer _tableland) Semver(0, 0, 1) {\n        tableland = _tableland;\n    }\n\n    function register(\n        SchemaRegistrationInput memory input\n    ) external returns (bytes32) {\n        SchemaRecord memory schemaRecord = SchemaRecord({\n            uid: EMPTY_UID,\n            schema: input.schema,\n            resolver: input.schemaResolver,\n            revocable: input.revocable\n        });\n\n        bytes32 uid = _getUID(schemaRecord);\n        if (_registry[uid].uid != EMPTY_UID) {\n            revert AlreadyExists();\n        }\n\n        schemaRecord.uid = uid;\n        _registry[uid] = schemaRecord;\n\n        tableland.SchemaRegistered(input, schemaRecord.uid);\n\n        return uid;\n    }\n\n    /// @inheritdoc ISchemaRegistry\n    function getSchema(\n        bytes32 uid\n    ) external view returns (SchemaRecord memory) {\n        return _registry[uid];\n    }\n\n    /// @dev Calculates a UID for a given schema.\n    /// @param schemaRecord The input schema.\n    /// @return schema UID.\n    function _getUID(\n        SchemaRecord memory schemaRecord\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    schemaRecord.schema,\n                    schemaRecord.resolver,\n                    schemaRecord.revocable,\n                    block.timestamp\n                )\n            );\n    }\n}\n"
    },
    "contracts/Semver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/// @title Semver\n/// @notice A simple contract for managing contract versions.\ncontract Semver {\n    // Contract's major version number.\n    uint256 private immutable _major;\n\n    // Contract's minor version number.\n    uint256 private immutable _minor;\n\n    // Contract's patch version number.\n    uint256 private immutable _path;\n\n    /// @dev Create a new Semver instance.\n    /// @param major Major version number.\n    /// @param minor Minor version number.\n    /// @param patch Patch version number.\n    constructor(uint256 major, uint256 minor, uint256 patch) {\n        _major = major;\n        _minor = minor;\n        _path = patch;\n    }\n\n    /// @notice Returns the full semver contract version.\n    /// @return Semver contract version as a string.\n    function version() external view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    Strings.toString(_major),\n                    \".\",\n                    Strings.toString(_minor),\n                    \".\",\n                    Strings.toString(_path)\n                )\n            );\n    }\n}\n"
    },
    "contracts/SubscriptionSplitter/Splitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\n * time of contract deployment and can't be updated thereafter.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\n\ncontract Splitter is Context, Initializable {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(\n        IERC20 indexed token,\n        address to,\n        uint256 amount\n    );\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    function initialize(\n        address[] memory payees,\n        uint256[] memory shares_\n    ) public payable initializer {\n        require(\n            payees.length == shares_.length,\n            \"PaymentSplitter: payees and shares length mismatch\"\n        );\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(\n        IERC20 token,\n        address account\n    ) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable Ether.\n     */\n    function releasable(address account) public view returns (uint256) {\n        uint256 totalReceived = address(this).balance + totalReleased();\n        return _pendingPayment(account, totalReceived, released(account));\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function releasable(\n        IERC20 token,\n        address account\n    ) public view returns (uint256) {\n        uint256 totalReceived = token.balanceOf(address(this)) +\n            totalReleased(token);\n        return\n            _pendingPayment(account, totalReceived, released(token, account));\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        // _totalReleased is the sum of all values in _released.\n        // If \"_totalReleased += payment\" does not overflow, then \"_released[account] += payment\" cannot overflow.\n        _totalReleased += payment;\n        unchecked {\n            _released[account] += payment;\n        }\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(token, account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\n        // If \"_erc20TotalReleased[token] += payment\" does not overflow, then \"_erc20Released[token][account] += payment\"\n        // cannot overflow.\n        _erc20TotalReleased[token] += payment;\n        unchecked {\n            _erc20Released[token][account] += payment;\n        }\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return\n            (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Release the owed amount of token to all of the payees.\n     */\n    function distribute() public virtual {\n        uint256 count = payeeCount();\n        for (uint256 i = 0; i < count; i++) {\n            // note: `_release` should not fail because payee always has shares, protected by `_appPay`\n            release(payable(payee(i)));\n        }\n    }\n\n    /**\n     * @dev Release owed amount of the `token` to all of the payees.\n     */\n    function distribute(IERC20 token) public virtual {\n        uint256 count = payeeCount();\n        for (uint256 i = 0; i < count; i++) {\n            // note: `_release` should not fail because payee always has shares, protected by `_appPay`\n            release(token, payee(i));\n        }\n    }\n\n    /**\n     * @dev Get the number of payees\n     */\n    function payeeCount() public view returns (uint256) {\n        return _payees.length;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(\n            account != address(0),\n            \"PaymentSplitter: account is the zero address\"\n        );\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(\n            _shares[account] == 0,\n            \"PaymentSplitter: account already has shares\"\n        );\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"
    },
    "contracts/SubscriptionSplitter/SplitterFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract SplitterFactory is Ownable {\n    address public implementationAddress;\n\n    // Constructor\n    constructor(address _implementationAddress) {\n        implementationAddress = _implementationAddress;\n    }\n\n    // Function to create a new OptimisticResolver contract and associate it with a schema\n    function createSplitter(\n        address[] memory payees,\n        uint256[] memory shares\n    ) external returns (address splitterClone) {\n        // Create new resolver contract\n        splitterClone = Clones.clone(implementationAddress);\n\n        (bool success, ) = splitterClone.call(\n            abi.encodeWithSignature(\n                \"initialize(address[],uint256[])\",\n                payees,\n                shares\n            )\n        );\n        require(success, \"error deploying\");\n    }\n\n    function changeImplementations(\n        address _implementationAddress\n    ) public onlyOwner {\n        implementationAddress = _implementationAddress;\n    }\n}\n"
    },
    "contracts/tablelandIndexers/ACResolverIndexer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {TablelandDeployments, ITablelandTables} from \"@tableland/evm/contracts/utils/TablelandDeployments.sol\";\n\nimport {SQLHelpers} from \"@tableland/evm/contracts/utils/SQLHelpers.sol\";\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract ACResolverIndexer is IERC721Receiver, Ownable {\n    ITablelandTables private tablelandContract;\n\n    string[] createTableStatements;\n\n    string[] public tables;\n\n    uint256[] tableIDs;\n\n    uint256 tablesUpdates;\n\n    uint256 private attesterRowsCounter;\n\n    uint256 private revokerRowsCounter;\n\n    string private constant ATTESTER_TABLE_PREFIX = \"schema_attesters\";\n\n    string private constant ATTESTER_SCHEMA = \"schemaUID text, attester text\";\n\n    string private constant REVOKER_TABLE_PREFIX = \"schema_revokers\";\n\n    string private constant REVOKER_SCHEMA = \"schemaUID text, revoker text\";\n\n    string private constant INFO_TABLE_PREFIX = \"schema_info\";\n\n    string private constant INFO_SCHEMA =\n        \"schemaUID text, encrypted text, admin text\";\n\n    constructor() {\n        tablelandContract = TablelandDeployments.get();\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                ATTESTER_SCHEMA,\n                ATTESTER_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(REVOKER_SCHEMA, REVOKER_TABLE_PREFIX)\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(INFO_SCHEMA, INFO_TABLE_PREFIX)\n        );\n\n        tableIDs = tablelandContract.create(\n            address(this),\n            createTableStatements\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(ATTESTER_TABLE_PREFIX, tableIDs[0])\n        );\n        tables.push(SQLHelpers.toNameFromId(REVOKER_TABLE_PREFIX, tableIDs[1]));\n        tables.push(SQLHelpers.toNameFromId(INFO_TABLE_PREFIX, tableIDs[2]));\n    }\n\n    function AddSchemaAttester(\n        bytes32 schemaUID,\n        address attester\n    ) public onlyOwner {\n        if (attesterRowsCounter + 1 >= 100000) {\n            RenewTables();\n        }\n        mutate(\n            tableIDs[0],\n            SQLHelpers.toInsert(\n                ATTESTER_TABLE_PREFIX,\n                tableIDs[0],\n                \"schemaUID, attester\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(attester))\n                )\n            )\n        );\n        attesterRowsCounter += 1;\n    }\n\n    function AddSchemaRevoker(\n        bytes32 schemaUID,\n        address revoker\n    ) public onlyOwner {\n        if (revokerRowsCounter + 1 >= 100000) {\n            RenewTables();\n        }\n        mutate(\n            tableIDs[1],\n            SQLHelpers.toInsert(\n                REVOKER_TABLE_PREFIX,\n                tableIDs[1],\n                \"schemaUID, revoker\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(revoker))\n                )\n            )\n        );\n        revokerRowsCounter += 1;\n    }\n\n    function AddSchemaInfo(bytes32 schemaUID, bool encrypted) public onlyOwner {\n        mutate(\n            tableIDs[2],\n            SQLHelpers.toInsert(\n                INFO_TABLE_PREFIX,\n                tableIDs[2],\n                \"schemaUID, encrypted, admin\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\n                    \",\",\n                    SQLHelpers.quote(encrypted ? \"true\" : \"false\"),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(tx.origin))\n                )\n            )\n        );\n    }\n\n    function RenewTables() internal {\n        tableIDs = tablelandContract.create(\n            address(this),\n            createTableStatements\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(ATTESTER_TABLE_PREFIX, tableIDs[0])\n        );\n        tables.push(SQLHelpers.toNameFromId(REVOKER_TABLE_PREFIX, tableIDs[1]));\n        tables.push(SQLHelpers.toNameFromId(INFO_TABLE_PREFIX, tableIDs[2]));\n\n        attesterRowsCounter = 0;\n        revokerRowsCounter = 0;\n        tablesUpdates++;\n    }\n\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(data.length * 2);\n\n        bytes memory _base = \"0123456789abcdef\";\n\n        for (uint256 i = 0; i < data.length; i++) {\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\n        }\n\n        return string(abi.encodePacked(\"0x\", converted));\n    }\n\n    /*\n     * @dev Internal function to execute a mutation on a table.\n     * @param {uint256} tableId - Table ID.\n     * @param {string} statement - Mutation statement.\n     */\n    function mutate(uint256 tableId, string memory statement) internal {\n        tablelandContract.mutate(address(this), tableId, statement);\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/tablelandIndexers/SchemaTablelandIndexer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {SchemaRegistrationInput} from \"../ISchemaRegistry.sol\";\n\nimport {TablelandDeployments, ITablelandTables} from \"@tableland/evm/contracts/utils/TablelandDeployments.sol\";\n\nimport {SQLHelpers} from \"@tableland/evm/contracts/utils/SQLHelpers.sol\";\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title SchemaTablelandIndexer\ncontract SchemaTablelandIndexer is Ownable {\n    ITablelandTables private tablelandContract;\n\n    string[] createTableStatements;\n\n    string[] public tables;\n\n    uint256 tablesUpdates;\n\n    uint256 tableRowsCounter;\n\n    uint256[] tableIDs;\n\n    string private constant SCHEMA_TABLE_PREFIX = \"schema\";\n\n    string private constant SCHEMA_SCHEMA =\n        \"schemaUID text primary key, schema text, resolver text, revocable text, name text, description text, creator text, creationTimestamp text\";\n\n    string private constant SCHEMA_CATEGORIES_TABLE_PREFIX =\n        \"schema_categories\";\n\n    string private constant SCHEMA_CATEGORIES_SCHEMA =\n        \"schemaUID text, category text\";\n\n    /// @dev Creates a new SchemaRegistry instance.\n    constructor() {\n        tablelandContract = TablelandDeployments.get();\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(SCHEMA_SCHEMA, SCHEMA_TABLE_PREFIX)\n        );\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                SCHEMA_CATEGORIES_SCHEMA,\n                SCHEMA_CATEGORIES_TABLE_PREFIX\n            )\n        );\n\n        tableIDs = tablelandContract.create(\n            address(this),\n            createTableStatements\n        );\n\n        tables.push(SQLHelpers.toNameFromId(SCHEMA_TABLE_PREFIX, tableIDs[0]));\n        tables.push(\n            SQLHelpers.toNameFromId(SCHEMA_CATEGORIES_TABLE_PREFIX, tableIDs[1])\n        );\n    }\n\n    function SchemaRegistered(\n        SchemaRegistrationInput memory input,\n        bytes32 schemaUID\n    ) public onlyOwner {\n        uint256 size = input.categories.length;\n        if (tableRowsCounter + size > 100000) {\n            RenewTables();\n        }\n        mutate(\n            tableIDs[0],\n            SQLHelpers.toInsert(\n                SCHEMA_TABLE_PREFIX,\n                tableIDs[0],\n                \"schemaUID, schema, resolver, revocable, name, description, creator, creationTimestamp\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\n                    \",\",\n                    SQLHelpers.quote(input.schema),\n                    \",\",\n                    SQLHelpers.quote(\n                        Strings.toHexString(address(input.schemaResolver))\n                    ),\n                    \",\",\n                    SQLHelpers.quote(input.revocable ? \"true\" : \"false\"),\n                    \",\",\n                    SQLHelpers.quote(input.schemaName),\n                    \",\",\n                    SQLHelpers.quote(input.schemaDescription),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(tx.origin)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toString(block.timestamp))\n                )\n            )\n        );\n        for (uint i = 0; i < input.categories.length; i++) {\n            mutate(\n                tableIDs[1],\n                SQLHelpers.toInsert(\n                    SCHEMA_CATEGORIES_TABLE_PREFIX,\n                    tableIDs[1],\n                    \"schemaUID, category\",\n                    string.concat(\n                        SQLHelpers.quote(bytes32ToString(schemaUID)),\n                        \",\",\n                        SQLHelpers.quote(input.categories[i])\n                    )\n                )\n            );\n        }\n        tableRowsCounter += size;\n    }\n\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(data.length * 2);\n\n        bytes memory _base = \"0123456789abcdef\";\n\n        for (uint256 i = 0; i < data.length; i++) {\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\n        }\n\n        return string(abi.encodePacked(\"0x\", converted));\n    }\n\n    function RenewTables() internal {\n        tableIDs = tablelandContract.create(\n            address(this),\n            createTableStatements\n        );\n\n        tables.push(SQLHelpers.toNameFromId(SCHEMA_TABLE_PREFIX, tableIDs[0]));\n        tables.push(\n            SQLHelpers.toNameFromId(SCHEMA_CATEGORIES_TABLE_PREFIX, tableIDs[1])\n        );\n\n        tableRowsCounter = 0;\n        tablesUpdates++;\n    }\n\n    /*\n     * @dev Internal function to execute a mutation on a table.\n     * @param {uint256} tableId - Table ID.\n     * @param {string} statement - Mutation statement.\n     */\n    function mutate(uint256 tableId, string memory statement) internal {\n        tablelandContract.mutate(address(this), tableId, statement);\n    }\n}\n"
    },
    "contracts/tablelandIndexers/TablelandSubscriptionsIndexer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {TablelandDeployments, ITablelandTables} from \"@tableland/evm/contracts/utils/TablelandDeployments.sol\";\n\nimport {SQLHelpers} from \"@tableland/evm/contracts/utils/SQLHelpers.sol\";\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\n/// @title TAS\n/// @notice The Tableland Attestation Service protocol.\ncontract TablelandSubscriptionsIndexer is IERC721Receiver, Ownable {\n    ITablelandTables private tablelandContract;\n\n    string[] createTableStatements;\n\n    string[] public tables;\n\n    uint256[] tableIDs;\n\n    uint256 tablesUpdates;\n\n    uint256 private tablesRowsCounter;\n\n    string private constant GROUP_TABLE_PREFIX = \"group\";\n\n    string private constant GROUP_SCHEMA =\n        \"schemaUID text primary key, monthlySubscriptionPrice text, splitterContract text\";\n\n    string private constant CREATOR_TABLE_PREFIX = \"creator\";\n\n    string private constant CREATOR_SCHEMA =\n        \"schemaUID text, attester text, shares text\";\n\n    string private constant SUBSCRIPTION_TABLE_PREFIX = \"subscription\";\n\n    string private constant SUBSCRIPTION_SCHEMA =\n        \"schemaUID text, subscriber text, subscriptionEndsAt text\";\n\n    string private constant GROUP_REVENUE_TABLE_PREFIX = \"revenue\";\n\n    string private constant GROUP_REVENUE_SCHEMA =\n        \"schemaUID text primary key, totalClaimed text\";\n\n    constructor() {\n        tablelandContract = TablelandDeployments.get();\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(GROUP_SCHEMA, GROUP_TABLE_PREFIX)\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(CREATOR_SCHEMA, CREATOR_TABLE_PREFIX)\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                SUBSCRIPTION_SCHEMA,\n                SUBSCRIPTION_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                GROUP_REVENUE_SCHEMA,\n                GROUP_REVENUE_TABLE_PREFIX\n            )\n        );\n\n        tableIDs = tablelandContract.create(\n            address(this),\n            createTableStatements\n        );\n\n        tables.push(SQLHelpers.toNameFromId(GROUP_TABLE_PREFIX, tableIDs[0]));\n        tables.push(SQLHelpers.toNameFromId(CREATOR_TABLE_PREFIX, tableIDs[1]));\n        tables.push(\n            SQLHelpers.toNameFromId(SUBSCRIPTION_TABLE_PREFIX, tableIDs[2])\n        );\n        tables.push(\n            SQLHelpers.toNameFromId(GROUP_REVENUE_TABLE_PREFIX, tableIDs[3])\n        );\n    }\n\n    function SchemaInfoInserted(\n        bytes32 schemaUID,\n        uint256 monthlySubscriptionPrice,\n        address splitterContract\n    ) public onlyOwner {\n        // Managing tableland rows limitation.\n        if (tablesRowsCounter == 100000) {\n            RenewTables();\n        }\n        mutate(\n            tableIDs[0],\n            SQLHelpers.toInsert(\n                GROUP_TABLE_PREFIX,\n                tableIDs[0],\n                \"schemaUID, monthlySubscriptionPrice, splitterContract\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\n                    \",\",\n                    SQLHelpers.quote(\n                        (Strings.toString(monthlySubscriptionPrice))\n                    ),\n                    \",\",\n                    SQLHelpers.quote((Strings.toHexString(splitterContract)))\n                )\n            )\n        );\n        tablesRowsCounter++;\n    }\n\n    function SchemaAdminsInserted(\n        bytes32 schemaUID,\n        address[] memory contentCreators,\n        uint256[] memory creatorsShares\n    ) public onlyOwner {\n        for (uint i = 0; i < contentCreators.length; i++) {\n            mutate(\n                tableIDs[1],\n                SQLHelpers.toInsert(\n                    CREATOR_TABLE_PREFIX,\n                    tableIDs[1],\n                    \"schemaUID, attester, shares\",\n                    string.concat(\n                        SQLHelpers.quote(bytes32ToString(schemaUID)),\n                        \",\",\n                        SQLHelpers.quote(\n                            Strings.toHexString(contentCreators[i])\n                        ),\n                        \",\",\n                        SQLHelpers.quote(Strings.toString(creatorsShares[i]))\n                    )\n                )\n            );\n        }\n    }\n\n    function SchemaSubscriptionCreated(\n        bytes32 schemaUID,\n        address subscriber,\n        uint256 subscriptionEndsAt\n    ) public onlyOwner {\n        mutate(\n            tableIDs[2],\n            SQLHelpers.toInsert(\n                SUBSCRIPTION_TABLE_PREFIX,\n                tableIDs[2],\n                \"schemaUID, subscriber, subscriptionEndsAt\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(subscriber)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toString(subscriptionEndsAt))\n                )\n            )\n        );\n    }\n\n    function SchemaPriceUpdated(\n        bytes32 schemaUID,\n        uint256 newPrice\n    ) public onlyOwner {\n        mutate(\n            tableIDs[0],\n            SQLHelpers.toUpdate(\n                GROUP_TABLE_PREFIX,\n                tableIDs[0],\n                string.concat(\n                    \"monthlySubscriptionPrice=\",\n                    SQLHelpers.quote(Strings.toString(newPrice))\n                ),\n                string.concat(\n                    \"schemaUID=\",\n                    SQLHelpers.quote(bytes32ToString(schemaUID))\n                )\n            )\n        );\n    }\n\n    function SchemaSubscriptionUpdated(\n        bytes32 schemaUID,\n        address subscriber,\n        uint256 subscriptionEndsAt\n    ) public onlyOwner {\n        mutate(\n            tableIDs[2],\n            SQLHelpers.toUpdate(\n                SUBSCRIPTION_TABLE_PREFIX,\n                tableIDs[2],\n                string.concat(\n                    \"subscriptionEndsAt=\",\n                    SQLHelpers.quote(Strings.toString(subscriptionEndsAt))\n                ),\n                string.concat(\n                    \"subscriber=\",\n                    SQLHelpers.quote(Strings.toHexString(subscriber)),\n                    \"and schemaUID=\",\n                    SQLHelpers.quote(bytes32ToString(schemaUID))\n                )\n            )\n        );\n    }\n\n    function SchemaRevenueRecordCreated(bytes32 schemaUID) public onlyOwner {\n        uint256 ZERO = 0;\n        mutate(\n            tableIDs[3],\n            SQLHelpers.toInsert(\n                GROUP_REVENUE_TABLE_PREFIX,\n                tableIDs[3],\n                \"schemaUID, totalClaimed\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toString(ZERO))\n                )\n            )\n        );\n    }\n\n    function SchemaRevenueUpdated(\n        bytes32 schemaUID,\n        uint256 totalClaimed\n    ) public onlyOwner {\n        mutate(\n            tableIDs[3],\n            SQLHelpers.toUpdate(\n                GROUP_REVENUE_TABLE_PREFIX,\n                tableIDs[3],\n                string.concat(\n                    \"totalClaimed=\",\n                    SQLHelpers.quote(Strings.toString(totalClaimed))\n                ),\n                string.concat(\n                    \"schemaUID=\",\n                    SQLHelpers.quote(bytes32ToString(schemaUID))\n                )\n            )\n        );\n    }\n\n    function RenewTables() internal {\n        tableIDs = tablelandContract.create(\n            address(this),\n            createTableStatements\n        );\n\n        tables.push(SQLHelpers.toNameFromId(GROUP_TABLE_PREFIX, tableIDs[0]));\n\n        tables.push(SQLHelpers.toNameFromId(CREATOR_TABLE_PREFIX, tableIDs[1]));\n\n        tables.push(\n            SQLHelpers.toNameFromId(SUBSCRIPTION_TABLE_PREFIX, tableIDs[2])\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(GROUP_REVENUE_TABLE_PREFIX, tableIDs[3])\n        );\n\n        tablesRowsCounter = 0;\n\n        tablesUpdates++;\n    }\n\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(data.length * 2);\n\n        bytes memory _base = \"0123456789abcdef\";\n\n        for (uint256 i = 0; i < data.length; i++) {\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\n        }\n\n        return string(abi.encodePacked(\"0x\", converted));\n    }\n\n    /*\n     * @dev Internal function to execute a mutation on a table.\n     * @param {uint256} tableId - Table ID.\n     * @param {string} statement - Mutation statement.\n     */\n    function mutate(uint256 tableId, string memory statement) internal {\n        tablelandContract.mutate(address(this), tableId, statement);\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/tablelandIndexers/TASIndexer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {TablelandDeployments, ITablelandTables} from \"@tableland/evm/contracts/utils/TablelandDeployments.sol\";\n\nimport {SQLHelpers} from \"@tableland/evm/contracts/utils/SQLHelpers.sol\";\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\nimport {Attestation} from \"../ITAS.sol\";\n\n/// @title TAS\n/// @notice The Tableland Attestation Service protocol.\ncontract TASIndexer is IERC721Receiver, Ownable {\n    ITablelandTables private tablelandContract;\n\n    string[] createTableStatements;\n\n    string[] public tables;\n\n    uint256[] tableIDs;\n\n    uint256 public tablesUpdates;\n\n    uint256 private tablesRowsCounter;\n\n    string private constant ATTESTATION_TABLE_PREFIX = \"attestation\";\n\n    string private constant ATTESTATION_SCHEMA =\n        \"uid text primary key, schemaUID text, creationTimestamp text, expirationTime text, refUID text, recipient text, attester text, data text\";\n\n    string private constant REVOCATION_TABLE_PREFIX = \"revocation\";\n\n    string private constant REVOCATION_SCHEMA =\n        \"uid text primary key, revocationTime text, revoker text, revocable text\";\n\n    string private constant TIMESTAMP_TABLE_PREFIX = \"offChain_timestamp\";\n\n    string private constant TIMESTAMP_SCHEMA = \"uid text, timestampedAt text\";\n\n    string private constant OFF_CHAIN_REVOCATIONS_TABLE_PREFIX =\n        \"offChain_revocation\";\n\n    string private constant OFF_CHAIN_REVOCATIONS_SCHEMA =\n        \"revoker text, uid text, revokedAt text\";\n\n    constructor() {\n        tablelandContract = TablelandDeployments.get();\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                ATTESTATION_SCHEMA,\n                ATTESTATION_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                REVOCATION_SCHEMA,\n                REVOCATION_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                TIMESTAMP_SCHEMA,\n                TIMESTAMP_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                OFF_CHAIN_REVOCATIONS_SCHEMA,\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX\n            )\n        );\n\n        tableIDs = tablelandContract.create(\n            address(this),\n            createTableStatements\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(ATTESTATION_TABLE_PREFIX, tableIDs[0])\n        );\n        tables.push(\n            SQLHelpers.toNameFromId(REVOCATION_TABLE_PREFIX, tableIDs[1])\n        );\n        tables.push(\n            SQLHelpers.toNameFromId(TIMESTAMP_TABLE_PREFIX, tableIDs[2])\n        );\n        tables.push(\n            SQLHelpers.toNameFromId(\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX,\n                tableIDs[3]\n            )\n        );\n    }\n\n    function AttestationInserted(\n        Attestation memory attestation\n    ) public onlyOwner {\n        require(strlen(attestation.dataBase64) <= 1024, \"Tableland limitation\");\n        // Managing tableland rows limitation.\n        if (tablesRowsCounter == 100000) {\n            RenewTables();\n        }\n        mutate(\n            tableIDs[0],\n            SQLHelpers.toInsert(\n                ATTESTATION_TABLE_PREFIX,\n                tableIDs[0],\n                \"uid, schemaUID, creationTimestamp, expirationTime, refUID, recipient, attester, data\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(attestation.uid)),\n                    \",\",\n                    SQLHelpers.quote(bytes32ToString(attestation.schema)),\n                    \",\",\n                    SQLHelpers.quote((Strings.toString(attestation.time))),\n                    \",\",\n                    SQLHelpers.quote(\n                        (Strings.toString(attestation.expirationTime))\n                    ),\n                    \",\",\n                    SQLHelpers.quote(bytes32ToString(attestation.refUID)),\n                    \",\",\n                    SQLHelpers.quote(\n                        Strings.toHexString(attestation.recipient)\n                    ),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(attestation.attester)),\n                    \",\",\n                    SQLHelpers.quote(attestation.dataBase64)\n                )\n            )\n        );\n        tablesRowsCounter++;\n        RevocationInfoInserted(attestation.uid, attestation.revocable);\n    }\n\n    function RevocationInfoInserted(\n        bytes32 uid,\n        bool revocable\n    ) public onlyOwner {\n        mutate(\n            tableIDs[1],\n            SQLHelpers.toInsert(\n                REVOCATION_TABLE_PREFIX,\n                tableIDs[1],\n                \"uid, revocationTime, revoker, revocable\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(uid)),\n                    \",\",\n                    SQLHelpers.quote(\"0\"),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(address(0))),\n                    \",\",\n                    SQLHelpers.quote(revocable ? \"true\" : \"false\")\n                )\n            )\n        );\n    }\n\n    function AttestationRevokedUpdate(\n        bytes32 uid,\n        address revoker,\n        uint256 revocationTime\n    ) public onlyOwner {\n        mutate(\n            tableIDs[1],\n            SQLHelpers.toUpdate(\n                REVOCATION_TABLE_PREFIX,\n                tableIDs[1],\n                string.concat(\n                    \"revoker=\",\n                    SQLHelpers.quote(Strings.toHexString(revoker)),\n                    \", revocationTime=\",\n                    SQLHelpers.quote(Strings.toString(revocationTime))\n                ),\n                string.concat(\"uid=\", SQLHelpers.quote(bytes32ToString(uid)))\n            )\n        );\n    }\n\n    function Timestamped(bytes32 uid, uint256 time) public onlyOwner {\n        mutate(\n            tableIDs[2],\n            SQLHelpers.toInsert(\n                TIMESTAMP_TABLE_PREFIX,\n                tableIDs[2],\n                \"uid, timestampedAt\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(uid)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toString(time))\n                )\n            )\n        );\n    }\n\n    function RevokedOffChain(\n        address revoker,\n        bytes32 uid,\n        uint256 time\n    ) public onlyOwner {\n        mutate(\n            tableIDs[3],\n            SQLHelpers.toInsert(\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX,\n                tableIDs[3],\n                \"revoker, uid, revokedAt\",\n                string.concat(\n                    SQLHelpers.quote(Strings.toHexString(revoker)),\n                    \",\",\n                    SQLHelpers.quote(bytes32ToString(uid)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toString(time))\n                )\n            )\n        );\n    }\n\n    function RenewTables() internal {\n        tableIDs = tablelandContract.create(\n            address(this),\n            createTableStatements\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(ATTESTATION_TABLE_PREFIX, tableIDs[0])\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(REVOCATION_TABLE_PREFIX, tableIDs[1])\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(TIMESTAMP_TABLE_PREFIX, tableIDs[2])\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX,\n                tableIDs[3]\n            )\n        );\n\n        tablesRowsCounter = 0;\n\n        tablesUpdates++;\n    }\n\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(data.length * 2);\n\n        bytes memory _base = \"0123456789abcdef\";\n\n        for (uint256 i = 0; i < data.length; i++) {\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\n        }\n\n        return string(abi.encodePacked(\"0x\", converted));\n    }\n\n    /**\n     * @dev Returns the length of a given string\n     *\n     * @param s The string to measure the length of\n     * @return The length of the input string\n     */\n    function strlen(string memory s) internal pure returns (uint256) {\n        uint256 len;\n        uint256 i = 0;\n        uint256 bytelength = bytes(s).length;\n        for (len = 0; i < bytelength; len++) {\n            bytes1 b = bytes(s)[i];\n            if (b < 0x80) {\n                i += 1;\n            } else if (b < 0xE0) {\n                i += 2;\n            } else if (b < 0xF0) {\n                i += 3;\n            } else if (b < 0xF8) {\n                i += 4;\n            } else if (b < 0xFC) {\n                i += 5;\n            } else {\n                i += 6;\n            }\n        }\n        return len;\n    }\n\n    /*\n     * @dev Internal function to execute a mutation on a table.\n     * @param {uint256} tableId - Table ID.\n     * @param {string} statement - Mutation statement.\n     */\n    function mutate(uint256 tableId, string memory statement) internal {\n        tablelandContract.mutate(address(this), tableId, statement);\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/TAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {EIP1271Verifier} from \"./eip1271/EIP1271Verifier.sol\";\n\nimport {ISchemaResolver} from \"./resolver/ISchemaResolver.sol\";\n\nimport {ITASIndexer} from \"./interfaces/ITASIndexer.sol\";\n\n// prettier-ignore\nimport {\n    AccessDenied,\n    EMPTY_UID,\n    Signature,\n    InvalidLength,\n    NotFound,\n    NO_EXPIRATION_TIME,\n    uncheckedInc\n} from \"./Common.sol\";\n\n// prettier-ignore\nimport {\n    Attestation,\n    AttestationRequest,\n    AttestationRequestData,\n    DelegatedAttestationRequest,\n    DelegatedRevocationRequest,\n    ITAS,\n    MultiAttestationRequest,\n    MultiDelegatedAttestationRequest,\n    MultiDelegatedRevocationRequest,\n    MultiRevocationRequest,\n    RevocationRequest,\n    RevocationRequestData\n} from \"./ITAS.sol\";\n\nimport {Semver} from \"./Semver.sol\";\n\nimport {ISchemaRegistry, SchemaRecord} from \"./ISchemaRegistry.sol\";\n\n/// @title TAS\n/// @notice The Tableland Attestation Service protocol.\ncontract TAS is ITAS, Semver, EIP1271Verifier {\n    using Address for address payable;\n\n    error AlreadyRevoked();\n    error AlreadyRevokedOffchain();\n    error AlreadyTimestamped();\n    error InsufficientValue();\n    error InvalidAttestation();\n    error InvalidAttestations();\n    error InvalidExpirationTime();\n    error InvalidOffset();\n    error InvalidRegistry();\n    error InvalidRevocation();\n    error InvalidRevocations();\n    error InvalidSchema();\n    error InvalidVerifier();\n    error Irrevocable();\n    error NotPayable();\n    error WrongSchema();\n\n    /// @notice A struct representing an internal attestation result.\n    struct AttestationsResult {\n        uint256 usedValue; // Total ETH amount that was sent to resolvers.\n        bytes32[] uids; // UIDs of the new attestations.\n    }\n\n    // The global schema registry.\n    ISchemaRegistry private immutable _schemaRegistry;\n\n    ITASIndexer private tableland;\n\n    // The global mapping between attestations and their UIDs.\n    mapping(bytes32 uid => Attestation attestation) private _db;\n\n    // The global mapping between data and their timestamps.\n    mapping(bytes32 data => uint64 timestamp) private _timestamps;\n\n    // The global mapping between data and their revocation timestamps.\n    mapping(address revoker => mapping(bytes32 data => uint64 timestamp) timestamps)\n        private _revocationsOffchain;\n\n    /// @dev Creates a new TAS instance.\n    /// @param registry The address of the global schema registry.\n    constructor(\n        ITASIndexer _tableland,\n        ISchemaRegistry registry\n    ) Semver(0, 0, 1) EIP1271Verifier(\"TAS\", \"0.0.1\") {\n        if (address(registry) == address(0)) {\n            revert InvalidRegistry();\n        }\n\n        _schemaRegistry = registry;\n\n        tableland = _tableland;\n    }\n\n    /// @inheritdoc ITAS\n    function getSchemaRegistry() external view returns (ISchemaRegistry) {\n        return _schemaRegistry;\n    }\n\n    /// @inheritdoc ITAS\n    function attest(\n        AttestationRequest calldata request\n    ) external payable returns (bytes32) {\n        AttestationRequestData[] memory data = new AttestationRequestData[](1);\n        data[0] = request.data;\n\n        return\n            _attest(request.schema, data, msg.sender, msg.value, true).uids[0];\n    }\n\n    /// @inheritdoc ITAS\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32) {\n        _verifyAttest(delegatedRequest);\n\n        AttestationRequestData[] memory data = new AttestationRequestData[](1);\n        data[0] = delegatedRequest.data;\n\n        return\n            _attest(\n                delegatedRequest.schema,\n                data,\n                delegatedRequest.attester,\n                msg.value,\n                true\n            ).uids[0];\n    }\n\n    /// @inheritdoc ITAS\n    function multiAttest(\n        MultiAttestationRequest[] calldata multiRequests\n    ) external payable returns (bytes32[] memory) {\n        // Since a multi-attest call is going to make multiple attestations for multiple schemas, we'd need to collect\n        // all the returned UIDs into a single list.\n        uint256 length = multiRequests.length;\n        bytes32[][] memory totalUids = new bytes32[][](multiRequests.length);\n        uint256 totalUidsCount = 0;\n\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. PlTASe note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint256 availableValue = msg.value;\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\n            // last and final batch).\n            bool last;\n            unchecked {\n                last = i == length - 1;\n            }\n\n            // Process the current batch of attestations.\n            MultiAttestationRequest calldata multiRequest = multiRequests[i];\n\n            // Ensure that data isn't empty.\n            if (multiRequest.data.length == 0) {\n                revert InvalidLength();\n            }\n\n            AttestationsResult memory res = _attest(\n                multiRequest.schema,\n                multiRequest.data,\n                msg.sender,\n                availableValue,\n                last\n            );\n\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\n            availableValue -= res.usedValue;\n\n            // Collect UIDs (and merge them later).\n            totalUids[i] = res.uids;\n            unchecked {\n                totalUidsCount += res.uids.length;\n            }\n        }\n\n        // Merge all the collected UIDs and return them as a flatten array.\n        return _mergeUIDs(totalUids, totalUidsCount);\n    }\n\n    /// @inheritdoc ITAS\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory) {\n        // Since a multi-attest call is going to make multiple attestations for multiple schemas, we'd need to collect\n        // all the returned UIDs into a single list.\n        uint256 length = multiDelegatedRequests.length;\n        bytes32[][] memory totalUids = new bytes32[][](length);\n        uint256 totalUidsCount = 0;\n\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. PlTASe note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint256 availableValue = msg.value;\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\n            // last and final batch).\n            bool last;\n            unchecked {\n                last = i == length - 1;\n            }\n\n            MultiDelegatedAttestationRequest\n                calldata multiDelegatedRequest = multiDelegatedRequests[i];\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\n\n            // Ensure that no inputs are missing.\n            uint256 dataLength = data.length;\n            if (\n                dataLength == 0 ||\n                dataLength != multiDelegatedRequest.signatures.length\n            ) {\n                revert InvalidLength();\n            }\n\n            // Verify signatures. PlTASe note that the signatures are assumed to be signed with incrTASing nonces.\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\n                _verifyAttest(\n                    DelegatedAttestationRequest({\n                        schema: multiDelegatedRequest.schema,\n                        data: data[j],\n                        signature: multiDelegatedRequest.signatures[j],\n                        attester: multiDelegatedRequest.attester,\n                        deadline: multiDelegatedRequest.deadline\n                    })\n                );\n            }\n\n            // Process the current batch of attestations.\n            AttestationsResult memory res = _attest(\n                multiDelegatedRequest.schema,\n                data,\n                multiDelegatedRequest.attester,\n                availableValue,\n                last\n            );\n\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\n            availableValue -= res.usedValue;\n\n            // Collect UIDs (and merge them later).\n            totalUids[i] = res.uids;\n            unchecked {\n                totalUidsCount += res.uids.length;\n            }\n        }\n\n        // Merge all the collected UIDs and return them as a flatten array.\n        return _mergeUIDs(totalUids, totalUidsCount);\n    }\n\n    /// @inheritdoc ITAS\n    function revoke(RevocationRequest calldata request) external payable {\n        RevocationRequestData[] memory data = new RevocationRequestData[](1);\n        data[0] = request.data;\n\n        _revoke(request.schema, data, msg.sender, msg.value, true);\n    }\n\n    /// @inheritdoc ITAS\n    function revokeByDelegation(\n        DelegatedRevocationRequest calldata delegatedRequest\n    ) external payable {\n        _verifyRevoke(delegatedRequest);\n\n        RevocationRequestData[] memory data = new RevocationRequestData[](1);\n        data[0] = delegatedRequest.data;\n\n        _revoke(\n            delegatedRequest.schema,\n            data,\n            delegatedRequest.revoker,\n            msg.value,\n            true\n        );\n    }\n\n    /// @inheritdoc ITAS\n    function multiRevoke(\n        MultiRevocationRequest[] calldata multiRequests\n    ) external payable {\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. PlTASe note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint256 availableValue = msg.value;\n\n        uint256 length = multiRequests.length;\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\n            // last and final batch).\n            bool last;\n            unchecked {\n                last = i == length - 1;\n            }\n\n            MultiRevocationRequest calldata multiRequest = multiRequests[i];\n\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\n            availableValue -= _revoke(\n                multiRequest.schema,\n                multiRequest.data,\n                msg.sender,\n                availableValue,\n                last\n            );\n        }\n    }\n\n    /// @inheritdoc ITAS\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable {\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. PlTASe note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint256 availableValue = msg.value;\n\n        uint256 length = multiDelegatedRequests.length;\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\n            // last and final batch).\n            bool last;\n            unchecked {\n                last = i == length - 1;\n            }\n\n            MultiDelegatedRevocationRequest\n                memory multiDelegatedRequest = multiDelegatedRequests[i];\n            RevocationRequestData[] memory data = multiDelegatedRequest.data;\n\n            // Ensure that no inputs are missing.\n            uint256 dataLength = data.length;\n            if (\n                dataLength == 0 ||\n                dataLength != multiDelegatedRequest.signatures.length\n            ) {\n                revert InvalidLength();\n            }\n\n            // Verify signatures. PlTASe note that the signatures are assumed to be signed with incrTASing nonces.\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\n                _verifyRevoke(\n                    DelegatedRevocationRequest({\n                        schema: multiDelegatedRequest.schema,\n                        data: data[j],\n                        signature: multiDelegatedRequest.signatures[j],\n                        revoker: multiDelegatedRequest.revoker,\n                        deadline: multiDelegatedRequest.deadline\n                    })\n                );\n            }\n\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\n            availableValue -= _revoke(\n                multiDelegatedRequest.schema,\n                data,\n                multiDelegatedRequest.revoker,\n                availableValue,\n                last\n            );\n        }\n    }\n\n    /// @inheritdoc ITAS\n    function timestamp(bytes32 data) external returns (uint64) {\n        uint64 time = _time();\n\n        _timestamp(data, time);\n\n        return time;\n    }\n\n    /// @inheritdoc ITAS\n    function revokeOffchain(bytes32 data) external returns (uint64) {\n        uint64 time = _time();\n\n        _revokeOffchain(msg.sender, data, time);\n\n        return time;\n    }\n\n    /// @inheritdoc ITAS\n    function multiRevokeOffchain(\n        bytes32[] calldata data\n    ) external returns (uint64) {\n        uint64 time = _time();\n\n        uint256 length = data.length;\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            _revokeOffchain(msg.sender, data[i], time);\n        }\n\n        return time;\n    }\n\n    /// @inheritdoc ITAS\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64) {\n        uint64 time = _time();\n\n        uint256 length = data.length;\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            _timestamp(data[i], time);\n        }\n\n        return time;\n    }\n\n    /// @inheritdoc ITAS\n    function getAttestation(\n        bytes32 uid\n    ) external view returns (Attestation memory) {\n        return _db[uid];\n    }\n\n    /// @inheritdoc ITAS\n    function isAttestationValid(bytes32 uid) public view returns (bool) {\n        return _db[uid].uid != EMPTY_UID;\n    }\n\n    /// @dev Attests to a specific schema.\n    /// @param schemaUID The unique identifier of the schema to attest to.\n    /// @param data The arguments of the attestation requests.\n    /// @param attester The attesting account.\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\n    /// @param last Whether this is the last attestations/revocations set.\n    /// @return The UID of the new attestations and the total sent ETH amount.\n    function _attest(\n        bytes32 schemaUID,\n        AttestationRequestData[] memory data,\n        address attester,\n        uint256 availableValue,\n        bool last\n    ) private returns (AttestationsResult memory) {\n        uint256 length = data.length;\n\n        AttestationsResult memory res;\n        res.uids = new bytes32[](length);\n\n        // Ensure that we aren't attempting to attest to a non-existing schema.\n        SchemaRecord memory schemaRecord = _schemaRegistry.getSchema(schemaUID);\n        if (schemaRecord.uid == EMPTY_UID) {\n            revert InvalidSchema();\n        }\n\n        Attestation[] memory attestations = new Attestation[](length);\n        uint256[] memory values = new uint256[](length);\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            AttestationRequestData memory request = data[i];\n\n            // Ensure that either no expiration time was set or that it was set in the future.\n            if (\n                request.expirationTime != NO_EXPIRATION_TIME &&\n                request.expirationTime <= _time()\n            ) {\n                revert InvalidExpirationTime();\n            }\n\n            // Ensure that we aren't trying to make a revocable attestation for a non-revocable schema.\n            if (!schemaRecord.revocable && request.revocable) {\n                revert Irrevocable();\n            }\n\n            Attestation memory attestation = Attestation({\n                uid: EMPTY_UID,\n                schema: schemaUID,\n                refUID: request.refUID,\n                time: _time(),\n                expirationTime: request.expirationTime,\n                revocationTime: 0,\n                recipient: request.recipient,\n                attester: attester,\n                revocable: request.revocable,\n                data: request.data,\n                dataBase64: request.dataBase64\n            });\n\n            // Look for the first non-existing UID (and use a bump seed/nonce in the rare case of a conflict).\n            bytes32 uid;\n            uint32 bump = 0;\n            while (true) {\n                uid = _getUID(attestation, bump);\n                if (_db[uid].uid == EMPTY_UID) {\n                    break;\n                }\n\n                unchecked {\n                    ++bump;\n                }\n            }\n            attestation.uid = uid;\n\n            _db[uid] = attestation;\n\n            if (request.refUID != EMPTY_UID) {\n                // Ensure that we aren't trying to attest to a non-existing referenced UID.\n                if (!isAttestationValid(request.refUID)) {\n                    revert NotFound();\n                }\n            }\n\n            attestations[i] = attestation;\n            values[i] = request.value;\n\n            res.uids[i] = uid;\n\n            tableland.AttestationInserted(attestation);\n        }\n\n        res.usedValue = _resolveAttestations(\n            schemaRecord,\n            attestations,\n            values,\n            false,\n            availableValue,\n            last\n        );\n\n        return res;\n    }\n\n    /// @dev Revokes an existing attestation to a specific schema.\n    /// @param schemaUID The unique identifier of the schema to attest to.\n    /// @param data The arguments of the revocation requests.\n    /// @param revoker The revoking account.\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\n    /// @param last Whether this is the last attestations/revocations set.\n    /// @return Returns the total sent ETH amount.\n    function _revoke(\n        bytes32 schemaUID,\n        RevocationRequestData[] memory data,\n        address revoker,\n        uint256 availableValue,\n        bool last\n    ) private returns (uint256) {\n        // Ensure that a non-existing schema ID wasn't passed by accident.\n        SchemaRecord memory schemaRecord = _schemaRegistry.getSchema(schemaUID);\n        if (schemaRecord.uid == EMPTY_UID) {\n            revert InvalidSchema();\n        }\n\n        uint256 length = data.length;\n        Attestation[] memory attestations = new Attestation[](length);\n        uint256[] memory values = new uint256[](length);\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            RevocationRequestData memory request = data[i];\n\n            Attestation storage attestation = _db[request.uid];\n\n            // Ensure that we aren't attempting to revoke a non-existing attestation.\n            if (attestation.uid == EMPTY_UID) {\n                revert NotFound();\n            }\n\n            // Ensure that a wrong schema ID wasn't passed by accident.\n            if (attestation.schema != schemaUID) {\n                revert InvalidSchema();\n            }\n\n            // Allow only original attesters to revoke their attestations.\n            if (attestation.attester != revoker) {\n                revert AccessDenied();\n            }\n\n            // PlTASe note that also checking of the schema itself is revocable is unnecessary, since it's not possible to\n            // make revocable attestations to an irrevocable schema.\n            if (!attestation.revocable) {\n                revert Irrevocable();\n            }\n\n            // Ensure that we aren't trying to revoke the same attestation twice.\n            if (attestation.revocationTime != 0) {\n                revert AlreadyRevoked();\n            }\n            attestation.revocationTime = _time();\n\n            attestations[i] = attestation;\n            values[i] = request.value;\n\n            tableland.AttestationRevokedUpdate(\n                attestation.uid,\n                revoker,\n                attestation.revocationTime\n            );\n        }\n\n        return\n            _resolveAttestations(\n                schemaRecord,\n                attestations,\n                values,\n                true,\n                availableValue,\n                last\n            );\n    }\n\n    /// @dev Resolves a new attestation or a revocation of an existing attestation.\n    /// @param schemaRecord The schema of the attestation.\n    /// @param attestation The data of the attestation to make/revoke.\n    /// @param value An explicit ETH amount to send to the resolver.\n    /// @param isRevocation Whether to resolve an attestation or its revocation.\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\n    /// @param last Whether this is the last attestations/revocations set.\n    /// @return Returns the total sent ETH amount.\n    function _resolveAttestation(\n        SchemaRecord memory schemaRecord,\n        Attestation memory attestation,\n        uint256 value,\n        bool isRevocation,\n        uint256 availableValue,\n        bool last\n    ) private returns (uint256) {\n        ISchemaResolver resolver = schemaRecord.resolver;\n        if (address(resolver) == address(0)) {\n            // Ensure that we don't accept payments if there is no resolver.\n            if (value != 0) {\n                revert NotPayable();\n            }\n\n            if (last) {\n                _refund(availableValue);\n            }\n\n            return 0;\n        }\n\n        // Ensure that we don't accept payments which can't be forwarded to the resolver.\n        if (value != 0) {\n            if (!resolver.isPayable()) {\n                revert NotPayable();\n            }\n\n            // Ensure that the attester/revoker doesn't try to spend more than available.\n            if (value > availableValue) {\n                revert InsufficientValue();\n            }\n\n            // Ensure to deduct the sent value explicitly.\n            unchecked {\n                availableValue -= value;\n            }\n        }\n\n        if (isRevocation) {\n            if (!resolver.revoke{value: value}(attestation)) {\n                revert InvalidRevocation();\n            }\n        } else if (!resolver.attest{value: value}(attestation)) {\n            revert InvalidAttestation();\n        }\n\n        if (last) {\n            _refund(availableValue);\n        }\n\n        return value;\n    }\n\n    /// @dev Resolves multiple attestations or revocations of existing attestations.\n    /// @param schemaRecord The schema of the attestation.\n    /// @param attestations The data of the attestations to make/revoke.\n    /// @param values Explicit ETH amounts to send to the resolver.\n    /// @param isRevocation Whether to resolve an attestation or its revocation.\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\n    /// @param last Whether this is the last attestations/revocations set.\n    /// @return Returns the total sent ETH amount.\n    function _resolveAttestations(\n        SchemaRecord memory schemaRecord,\n        Attestation[] memory attestations,\n        uint256[] memory values,\n        bool isRevocation,\n        uint256 availableValue,\n        bool last\n    ) private returns (uint256) {\n        uint256 length = attestations.length;\n        if (length == 1) {\n            return\n                _resolveAttestation(\n                    schemaRecord,\n                    attestations[0],\n                    values[0],\n                    isRevocation,\n                    availableValue,\n                    last\n                );\n        }\n\n        ISchemaResolver resolver = schemaRecord.resolver;\n        if (address(resolver) == address(0)) {\n            // Ensure that we don't accept payments if there is no resolver.\n            for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n                if (values[i] != 0) {\n                    revert NotPayable();\n                }\n            }\n\n            if (last) {\n                _refund(availableValue);\n            }\n\n            return 0;\n        }\n\n        uint256 totalUsedValue = 0;\n        bool isResolverPayable = resolver.isPayable();\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            uint256 value = values[i];\n\n            // Ensure that we don't accept payments which can't be forwarded to the resolver.\n            if (value == 0) {\n                continue;\n            }\n\n            if (!isResolverPayable) {\n                revert NotPayable();\n            }\n\n            // Ensure that the attester/revoker doesn't try to spend more than available.\n            if (value > availableValue) {\n                revert InsufficientValue();\n            }\n\n            // Ensure to deduct the sent value explicitly and add it to the total used value by the batch.\n            unchecked {\n                availableValue -= value;\n                totalUsedValue += value;\n            }\n        }\n\n        if (isRevocation) {\n            if (\n                !resolver.multiRevoke{value: totalUsedValue}(\n                    attestations,\n                    values\n                )\n            ) {\n                revert InvalidRevocations();\n            }\n        } else if (\n            !resolver.multiAttest{value: totalUsedValue}(attestations, values)\n        ) {\n            revert InvalidAttestations();\n        }\n\n        if (last) {\n            _refund(availableValue);\n        }\n\n        return totalUsedValue;\n    }\n\n    /// @dev Calculates a UID for a given attestation.\n    /// @param attestation The input attestation.\n    /// @param bump A bump value to use in case of a UID conflict.\n    /// @return Attestation UID.\n    function _getUID(\n        Attestation memory attestation,\n        uint32 bump\n    ) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    attestation.schema,\n                    attestation.recipient,\n                    attestation.attester,\n                    attestation.time,\n                    attestation.expirationTime,\n                    attestation.revocable,\n                    attestation.refUID,\n                    attestation.data,\n                    bump\n                )\n            );\n    }\n\n    function getTime() external view returns (uint256) {\n        return _time();\n    }\n\n    /// @dev Refunds remaining ETH amount to the attester.\n    /// @param remainingValue The remaining ETH amount that was not sent to the resolver.\n    function _refund(uint256 remainingValue) private {\n        if (remainingValue > 0) {\n            // Using a regular transfer here might revert, for some non-EOA attesters, due to exceeding of the 2300\n            // gas limit which is why we're using call instead (via sendValue), which the 2300 gas limit does not\n            // apply for.\n            payable(msg.sender).sendValue(remainingValue);\n        }\n    }\n\n    /// @dev Timestamps the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @param time The timestamp.\n    function _timestamp(bytes32 data, uint64 time) private {\n        if (_timestamps[data] != 0) {\n            revert AlreadyTimestamped();\n        }\n\n        _timestamps[data] = time;\n\n        tableland.Timestamped(data, time);\n    }\n\n    /// @dev Revokes the specified bytes32 data.\n    /// @param revoker The revoking account.\n    /// @param data The data to revoke.\n    /// @param time The timestamp the data was revoked with.\n    function _revokeOffchain(\n        address revoker,\n        bytes32 data,\n        uint64 time\n    ) private {\n        mapping(bytes32 data => uint64 timestamp)\n            storage revocations = _revocationsOffchain[revoker];\n\n        if (revocations[data] != 0) {\n            revert AlreadyRevokedOffchain();\n        }\n\n        revocations[data] = time;\n\n        tableland.RevokedOffChain(revoker, data, time);\n    }\n\n    /// @dev Merges lists of UIDs.\n    /// @param uidLists The provided lists of UIDs.\n    /// @param uidsCount Total UIDs count.\n    /// @return A merged and flatten list of all the UIDs.\n    function _mergeUIDs(\n        bytes32[][] memory uidLists,\n        uint256 uidsCount\n    ) private pure returns (bytes32[] memory) {\n        bytes32[] memory uids = new bytes32[](uidsCount);\n\n        uint256 currentIndex = 0;\n        uint256 uidListLength = uidLists.length;\n        for (uint256 i = 0; i < uidListLength; i = uncheckedInc(i)) {\n            bytes32[] memory currentUids = uidLists[i];\n            uint256 currentUidsLength = currentUids.length;\n            for (uint256 j = 0; j < currentUidsLength; j = uncheckedInc(j)) {\n                uids[currentIndex] = currentUids[j];\n\n                unchecked {\n                    ++currentIndex;\n                }\n            }\n        }\n\n        return uids;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": false
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}