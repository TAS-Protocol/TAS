{
  "address": "0xeBf027DD3Dc6e820aD862c837246A29cCD25930B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "schemaName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "schemaDescription",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "categories",
              "type": "string[]"
            },
            {
              "internalType": "contract ISchemaResolver",
              "name": "schemaResolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            }
          ],
          "internalType": "struct SchemaRegistrationInput",
          "name": "input",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        }
      ],
      "name": "SchemaRegistered",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xac5b9dedb1e81f3962b6e099e588c9ae497ca06c68c84b39cf8c112cff14d809",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0xeBf027DD3Dc6e820aD862c837246A29cCD25930B",
    "transactionIndex": 0,
    "gasUsed": "168174082",
    "logsBloom": "0xfffffffffffffffffffffffffffffff7fffffffbffffffffffffffffffffffffffffffffffffefffffffffffffffffffffffbfffffffffffffffffffffffffffffffffffffbfdfffffffffffffffffffffffbfffffffffffffffffffffffffffffefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffffeffffffffffffbffffffffffffffffffbffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffff7ffffffffffff7fffffffffffffffffffffffffffffffffffffffff7fffffffefffffffffbfffffffffffffffffffffffffffffffbffffffffffffffeffff7fffffffaffdffffffffffff",
    "blockHash": "0x986597f0e8bbf3ff8be35ae1ff27ce12af1c60d2e90633d6f9c4000e58e9fe38",
    "transactionHash": "0xac5b9dedb1e81f3962b6e099e588c9ae497ca06c68c84b39cf8c112cff14d809",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 948116,
        "transactionHash": "0xac5b9dedb1e81f3962b6e099e588c9ae497ca06c68c84b39cf8c112cff14d809",
        "address": "0xeBf027DD3Dc6e820aD862c837246A29cCD25930B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x986597f0e8bbf3ff8be35ae1ff27ce12af1c60d2e90633d6f9c4000e58e9fe38"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 948116,
        "transactionHash": "0xac5b9dedb1e81f3962b6e099e588c9ae497ca06c68c84b39cf8c112cff14d809",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ebf027dd3dc6e820ad862c837246a29ccd25930b",
          "0x00000000000000000000000000000000000000000000000000000000000001e8"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x986597f0e8bbf3ff8be35ae1ff27ce12af1c60d2e90633d6f9c4000e58e9fe38"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 948116,
        "transactionHash": "0xac5b9dedb1e81f3962b6e099e588c9ae497ca06c68c84b39cf8c112cff14d809",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000ebf027dd3dc6e820ad862c837246a29ccd25930b00000000000000000000000000000000000000000000000000000000000001e8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a5435245415445205441424c4520736368656d615f33313431353928736368656d615549442074657874207072696d617279206b65792c20736368656d6120746578742c207265736f6c76657220746578742c207265766f6361626c6520746578742c206e616d6520746578742c206465736372697074696f6e20746578742c2063726561746f7220746578742c206372656174696f6e54696d657374616d70207465787429000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x986597f0e8bbf3ff8be35ae1ff27ce12af1c60d2e90633d6f9c4000e58e9fe38"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 948116,
        "transactionHash": "0xac5b9dedb1e81f3962b6e099e588c9ae497ca06c68c84b39cf8c112cff14d809",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ebf027dd3dc6e820ad862c837246a29ccd25930b",
          "0x00000000000000000000000000000000000000000000000000000000000001e9"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x986597f0e8bbf3ff8be35ae1ff27ce12af1c60d2e90633d6f9c4000e58e9fe38"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 948116,
        "transactionHash": "0xac5b9dedb1e81f3962b6e099e588c9ae497ca06c68c84b39cf8c112cff14d809",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000ebf027dd3dc6e820ad862c837246a29ccd25930b00000000000000000000000000000000000000000000000000000000000001e900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044435245415445205441424c4520736368656d615f63617465676f726965735f33313431353928736368656d6155494420746578742c2063617465676f727920746578742900000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0x986597f0e8bbf3ff8be35ae1ff27ce12af1c60d2e90633d6f9c4000e58e9fe38"
      }
    ],
    "blockNumber": 948116,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1663970b7101576bbd241d48e0243975",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaDescription\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"categories\",\"type\":\"string[]\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"schemaResolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct SchemaRegistrationInput\",\"name\":\"input\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"name\":\"SchemaRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Creates a new SchemaRegistry instance.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"SchemaTablelandIndexer\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tablelandIndexers/SchemaTablelandIndexer.sol\":\"SchemaTablelandIndexer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Sepolia.\\n    address internal constant SEPOLIA =\\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Goerli.\\n    address internal constant ARBITRUM_GOERLI =\\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Calibration.\\n    address internal constant FILECOIN_CALIBRATION =\\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (ITablelandTables) {\\n        if (block.chainid == 1) {\\n            return ITablelandTables(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return ITablelandTables(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return ITablelandTables(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return ITablelandTables(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return ITablelandTables(MATIC);\\n        } else if (block.chainid == 314) {\\n            return ITablelandTables(FILECOIN);\\n        } else if (block.chainid == 11155111) {\\n            return ITablelandTables(SEPOLIA);\\n        } else if (block.chainid == 420) {\\n            return ITablelandTables(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421613) {\\n            return ITablelandTables(ARBITRUM_GOERLI);\\n        } else if (block.chainid == 80001) {\\n            return ITablelandTables(MATICMUM);\\n        } else if (block.chainid == 314159) {\\n            return ITablelandTables(FILECOIN_CALIBRATION);\\n        } else if (block.chainid == 31337) {\\n            return ITablelandTables(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29920684b8971cd38b81626677de7be59039437c81f48a9d633bbee028dbc1d4\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidTAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n    string dataBase64;\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x3a8284675c5fe312aeabffb195dfa388645f8fc6c84a5238e007694a8954fec7\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\nstruct SchemaRegistrationInput {\\n    string schema;\\n    string schemaName;\\n    string schemaDescription;\\n    string[] categories;\\n    ISchemaResolver schemaResolver;\\n    bool revocable;\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    function register(\\n        SchemaRegistrationInput memory input\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xde2a2b64e934247a6631bd82bfdaddb64afb80f6212e5247e968d9b0723b3a3c\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x41ca4d09299123200e38fae5b4f6767d0385271609b791cefac391641585c142\",\"license\":\"MIT\"},\"contracts/tablelandIndexers/SchemaTablelandIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {SchemaRegistrationInput} from \\\"../ISchemaRegistry.sol\\\";\\n\\nimport {TablelandDeployments, ITablelandTables} from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport {SQLHelpers} from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title SchemaTablelandIndexer\\ncontract SchemaTablelandIndexer is Ownable {\\n    ITablelandTables private tablelandContract;\\n\\n    string[] createTableStatements;\\n\\n    string[] public tables;\\n\\n    uint256 tablesUpdates;\\n\\n    uint256 tableRowsCounter;\\n\\n    uint256[] tableIDs;\\n\\n    string private constant SCHEMA_TABLE_PREFIX = \\\"schema\\\";\\n\\n    string private constant SCHEMA_SCHEMA =\\n        \\\"schemaUID text primary key, schema text, resolver text, revocable text, name text, description text, creator text, creationTimestamp text\\\";\\n\\n    string private constant SCHEMA_CATEGORIES_TABLE_PREFIX =\\n        \\\"schema_categories\\\";\\n\\n    string private constant SCHEMA_CATEGORIES_SCHEMA =\\n        \\\"schemaUID text, category text\\\";\\n\\n    /// @dev Creates a new SchemaRegistry instance.\\n    constructor() {\\n        tablelandContract = TablelandDeployments.get();\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(SCHEMA_SCHEMA, SCHEMA_TABLE_PREFIX)\\n        );\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                SCHEMA_CATEGORIES_SCHEMA,\\n                SCHEMA_CATEGORIES_TABLE_PREFIX\\n            )\\n        );\\n\\n        tableIDs = tablelandContract.create(\\n            address(this),\\n            createTableStatements\\n        );\\n\\n        tables.push(SQLHelpers.toNameFromId(SCHEMA_TABLE_PREFIX, tableIDs[0]));\\n        tables.push(\\n            SQLHelpers.toNameFromId(SCHEMA_CATEGORIES_TABLE_PREFIX, tableIDs[1])\\n        );\\n    }\\n\\n    function SchemaRegistered(\\n        SchemaRegistrationInput memory input,\\n        bytes32 schemaUID\\n    ) public onlyOwner {\\n        uint256 size = input.categories.length;\\n        if (tableRowsCounter + size > 100000) {\\n            RenewTables();\\n        }\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toInsert(\\n                SCHEMA_TABLE_PREFIX,\\n                tableIDs[0],\\n                \\\"schemaUID, schema, resolver, revocable, name, description, creator, creationTimestamp\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(input.schema),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(\\n                        Strings.toHexString(address(input.schemaResolver))\\n                    ),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(input.revocable ? \\\"true\\\" : \\\"false\\\"),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(input.schemaName),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(input.schemaDescription),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(tx.origin)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(block.timestamp))\\n                )\\n            )\\n        );\\n        for (uint i = 0; i < input.categories.length; i++) {\\n            mutate(\\n                tableIDs[1],\\n                SQLHelpers.toInsert(\\n                    SCHEMA_CATEGORIES_TABLE_PREFIX,\\n                    tableIDs[1],\\n                    \\\"schemaUID, category\\\",\\n                    string.concat(\\n                        SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                        \\\",\\\",\\n                        SQLHelpers.quote(input.categories[i])\\n                    )\\n                )\\n            );\\n        }\\n        tableRowsCounter += size;\\n    }\\n\\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    function RenewTables() internal {\\n        tableIDs = tablelandContract.create(\\n            address(this),\\n            createTableStatements\\n        );\\n\\n        tables.push(SQLHelpers.toNameFromId(SCHEMA_TABLE_PREFIX, tableIDs[0]));\\n        tables.push(\\n            SQLHelpers.toNameFromId(SCHEMA_CATEGORIES_TABLE_PREFIX, tableIDs[1])\\n        );\\n\\n        tableRowsCounter = 0;\\n        tablesUpdates++;\\n    }\\n\\n    /*\\n     * @dev Internal function to execute a mutation on a table.\\n     * @param {uint256} tableId - Table ID.\\n     * @param {string} statement - Mutation statement.\\n     */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        tablelandContract.mutate(address(this), tableId, statement);\\n    }\\n}\\n\",\"keccak256\":\"0xa40a1e6191d7b1b2f3bcf377cec4729f296ec776e322483f80b0637fa0758c65\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d33620002c4565b6200002762000314565b600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002620000906040518060c00160405280608981526020016200260660899139604080518082019091526006815265736368656d6160d01b6020820152620004e1565b81546001810183556000928352602090922090910190620000b2908262000840565b506002620001256040518060400160405280601d81526020017f736368656d6155494420746578742c2063617465676f7279207465787400000081525060405180604001604052806011815260200170736368656d615f63617465676f7269657360781b815250620004e160201b60201c565b8154600181018355600092835260209092209091019062000147908262000840565b506001546040516361a23d0f60e01b81526001600160a01b03909116906361a23d0f906200017d90309060029060040162000a39565b6000604051808303816000875af11580156200019d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001c7919081019062000b73565b8051620001dd91600691602090910190620006cb565b5060036200023160405180604001604052806006815260200165736368656d6160d01b81525060066000815481106200021a576200021a62000bb3565b90600052602060002001546200051c60201b60201c565b8154600181018355600092835260209092209091019062000253908262000840565b5060036200029b60405180604001604052806011815260200170736368656d615f63617465676f7269657360781b81525060066001815481106200021a576200021a62000bb3565b81546001810183556000928352602090922090910190620002bd908262000840565b5062000d0e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60004660010362000338575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a036200035a575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b1036200037d5750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba03620003a05750731a22854c5b1642760a827f20137a67930ae108d290565b46608903620003c25750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a03620003e557507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a70362000409575073c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a4036200042c575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed0362000450575073033f69e8d119205089ab15d340f5b797732f646b90565b466201388103620004745750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f0362000498575073030bcf3d50cad04c2e57391b12740982a930862190565b46617a6903620004bb575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b4660405163264e42cf60e01b8152600401620004d8919062000bd0565b60405180910390fd5b606081620004ef4662000549565b84604051602001620005049392919062000c5a565b60405160208183030381529060405290505b92915050565b6060826200052a4662000549565b620005358462000549565b604051602001620005049392919062000cca565b606060006200055883620005e2565b60010190506000816001600160401b038111156200057a576200057a62000732565b6040519080825280601f01601f191660200182016040528015620005a5576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084620005af57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106200062c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831062000659576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200067857662386f26fc10000830492506010015b6305f5e100831062000691576305f5e100830492506008015b6127108310620006a657612710830492506004015b60648310620006b9576064830492506002015b600a8310620005165760010192915050565b82805482825590600052602060002090810192821562000709579160200282015b8281111562000709578251825591602001919060010190620006ec565b50620007179291506200071b565b5090565b5b808211156200071757600081556001016200071c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200077357607f821691505b60208210810362000788576200078862000748565b50919050565b6000620005166200079c8381565b90565b620007aa836200078e565b815460001960089490940293841b1916921b91909117905550565b6000620007d48184846200079f565b505050565b81811015620007f857620007ef600082620007c5565b600101620007d9565b5050565b601f821115620007d4576000818152602090206020601f85010481016020851015620008255750805b620008396020601f860104830182620007d9565b5050505050565b81516001600160401b038111156200085c576200085c62000732565b6200086882546200075e565b62000875828285620007fc565b6020601f831160018114620008ac5760008415620008935750858201515b600019600886021c198116600286021786555062000908565b600085815260208120601f198616915b82811015620008de5788850151825560209485019460019092019101620008bc565b86831015620008fb5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60006001600160a01b03821662000516565b6200092d8162000910565b82525050565b6000815462000942816200075e565b8085526020850194506001821680156200096557600181146200097c57620009ac565b60ff198316865260208215150286019350620009ac565b60008581526020902060005b83811015620009a65781548882015260019091019060200162000988565b87019450505b50505092915050565b6000620009c3838362000933565b9392505050565b6000620009d5825490565b80845260208401935083602082028501620009f68560009081526020902090565b8060005b8581101562000a2c5784840389528162000a158582620009b5565b60209a909a019994505060019182019101620009fa565b5091979650505050505050565b6040810162000a49828562000922565b818103602083015262000a5d8184620009ca565b949350505050565b601f19601f83011681018181106001600160401b038211171562000a8d5762000a8d62000732565b6040525050565b600062000aa060405190565b905062000aae828262000a65565b919050565b60006001600160401b0382111562000acf5762000acf62000732565b5060209081020190565b805162000516565b600062000af862000af28462000ab3565b62000a94565b8381529050602080820190840283018581111562000b195762000b19600080fd5b835b8181101562000b41578062000b31888262000ad9565b8452506020928301920162000b1b565b5050509392505050565b600082601f83011262000b615762000b61600080fd5b815162000a5d84826020860162000ae1565b60006020828403121562000b8a5762000b8a600080fd5b81516001600160401b0381111562000ba55762000ba5600080fd5b62000a5d8482850162000b4b565b634e487b7160e01b600052603260045260246000fd5b806200092d565b6020810162000516828462000bc9565b60005b8381101562000bfd57818101518382015260200162000be3565b50506000910152565b600062000c11825190565b62000c2181856020860162000be0565b9290920192915050565b605f60f81b815260005b5060010190565b600560fb1b8152600062000c35565b602960f81b8152600062000c35565b6c021a922a0aa22902a20a126229609d1b8152600d01600062000c7e828662000c06565b915062000c8b8262000c2b565b915062000c99828562000c06565b915062000ca68262000c3c565b915062000cb4828462000c06565b915062000cc18262000c4b565b95945050505050565b600062000cd8828662000c06565b915062000ce58262000c2b565b915062000cf3828562000c06565b915062000d008262000c2b565b915062000cc1828462000c06565b6118e88062000d1e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636c42ce2514610067578063715018a61461007c57806371671bf2146100845780638da5cb5b146100ad5780639201de55146100c6578063f2fde38b146100d9575b600080fd5b61007a610075366004610fbf565b6100ec565b005b61007a610392565b610097610092366004611015565b6103a6565b6040516100a4919061108c565b60405180910390f35b6000546001600160a01b03166040516100a491906110ac565b6100976100d4366004611015565b610452565b61007a6100e73660046110ce565b61060a565b6100f461064d565b606082015151600554620186a09061010d908390611105565b111561011b5761011b610677565b610276600660008154811061013257610132611118565b906000526020600020015461027160405180604001604052806006815260200165736368656d6160d01b815250600660008154811061017357610173611118565b906000526020600020015460405180608001604052806055815260200161185e605591396101a86101a389610452565b6107ef565b89516101b3906107ef565b6101c36101a38c60800151610818565b6102148c60a001516101f2576040518060400160405280600581526020016466616c736560d81b8152506107ef565b604051806040016040528060048152602001637472756560e01b8152506107ef565b6102218d602001516107ef565b61022e8e604001516107ef565b61023a6101a332610818565b6102466101a342610834565b60405160200161025d989796959493929190611150565b6040516020818303038152906040526108c7565b610906565b60005b83606001515181101561037557610363600660018154811061029d5761029d611118565b906000526020600020015461027160405180604001604052806011815260200170736368656d615f63617465676f7269657360781b81525060066001815481106102e9576102e9611118565b906000526020600020015460405180604001604052806013815260200172736368656d615549442c2063617465676f727960681b81525061032c6101a38a610452565b6103528b60600151898151811061034557610345611118565b60200260200101516107ef565b60405160200161025d929190611204565b8061036d81611226565b915050610279565b5080600560008282546103889190611105565b9091555050505050565b61039a61064d565b6103a46000610970565b565b600381815481106103b657600080fd5b9060005260206000200160009150905080546103d190611256565b80601f01602080910402602001604051908101604052809291908181526020018280546103fd90611256565b801561044a5780601f1061041f5761010080835404028352916020019161044a565b820191906000526020600020905b81548152906001019060200180831161042d57829003601f168201915b505050505081565b6060600061046260206002611282565b60ff166001600160401b0381111561047c5761047c610ca8565b6040519080825280601f01601f1916602001820160405280156104a6576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b60208110156105e0578182518683602081106104f2576104f2611118565b6104fe9291901a6112bf565b8151811061050e5761050e611118565b01602001516001600160f81b031916836105298360026112d3565b8151811061053957610539611118565b60200101906001600160f81b031916908160001a90535081825186836020811061056557610565611118565b6105719291901a6112eb565b8151811061058157610581611118565b01602001516001600160f81b0319168361059c8360026112d3565b6105a7906001611105565b815181106105b7576105b7611118565b60200101906001600160f81b031916908160001a905350806105d881611226565b9150506104d4565b50816040516020016105f291906112ff565b60405160208183030381529060405292505050919050565b61061261064d565b6001600160a01b0381166106415760405162461bcd60e51b815260040161063890611316565b60405180910390fd5b61064a81610970565b50565b6000546001600160a01b031633146103a45760405162461bcd60e51b815260040161063890611395565b6001546040516361a23d0f60e01b81526001600160a01b03909116906361a23d0f906106aa903090600290600401611494565b6000604051808303816000875af11580156106c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f19190810190611534565b805161070591600691602090910190610c48565b50600361074e60405180604001604052806006815260200165736368656d6160d01b815250600660008154811061073e5761073e611118565b90600052602060002001546109c0565b8154600181018355600092835260209092209091019061076e9082611612565b5060036107b260405180604001604052806011815260200170736368656d615f63617465676f7269657360781b815250600660018154811061073e5761073e611118565b815460018101835560009283526020909220909101906107d29082611612565b506000600581905560048054916107e883611226565b9190505550565b60608160405160200161080291906116e2565b6040516020818303038152906040529050919050565b606061082e6001600160a01b03831660146109fe565b92915050565b6060600061084183610b70565b60010190506000816001600160401b0381111561086057610860610ca8565b6040519080825280601f01601f19166020018201604052801561088a576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610894575b509392505050565b606060006108d586866109c0565b90508084846040516020016108ec93929190611720565b604051602081830303815290604052915050949350505050565b600154604051631bbd786d60e11b81526001600160a01b039091169063377af0da9061093a9030908690869060040161178f565b600060405180830381600087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060826109cc46610834565b6109d584610834565b6040516020016109e7939291906117ca565b604051602081830303815290604052905092915050565b60606000610a0d8360026112d3565b610a18906002611105565b6001600160401b03811115610a2f57610a2f610ca8565b6040519080825280601f01601f191660200182016040528015610a59576020820181803683370190505b509050600360fc1b81600081518110610a7457610a74611118565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610aa357610aa3611118565b60200101906001600160f81b031916908160001a9053506000610ac78460026112d3565b610ad2906001611105565b90505b6001811115610b4a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610b0657610b06611118565b1a60f81b828281518110610b1c57610b1c611118565b60200101906001600160f81b031916908160001a90535060049490941c93610b4381611804565b9050610ad5565b508315610b695760405162461bcd60e51b81526004016106389061184d565b9392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610baf5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610bdb576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610bf957662386f26fc10000830492506010015b6305f5e1008310610c11576305f5e100830492506008015b6127108310610c2557612710830492506004015b60648310610c37576064830492506002015b600a831061082e5760010192915050565b828054828255906000526020600020908101928215610c83579160200282015b82811115610c83578251825591602001919060010190610c68565b50610c8f929150610c93565b5090565b5b80821115610c8f5760008155600101610c94565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715610ce357610ce3610ca8565b6040525050565b6000610cf560405190565b9050610d018282610cbe565b919050565b60006001600160401b03821115610d1f57610d1f610ca8565b601f19601f83011660200192915050565b82818337506000910152565b6000610d4f610d4a84610d06565b610cea565b905082815260208101848484011115610d6a57610d6a600080fd5b6108bf848285610d30565b600082601f830112610d8957610d89600080fd5b8135610d99848260208601610d3c565b949350505050565b60006001600160401b03821115610dba57610dba610ca8565b5060209081020190565b6000610dd2610d4a84610da1565b83815290506020808201908402830185811115610df157610df1600080fd5b835b81811015610e315780356001600160401b03811115610e1457610e14600080fd5b808601610e218982610d75565b8552505060209283019201610df3565b5050509392505050565b600082601f830112610e4f57610e4f600080fd5b8135610d99848260208601610dc4565b60006001600160a01b03821661082e565b600061082e82610e5f565b610e8481610e70565b811461064a57600080fd5b803561082e81610e7b565b801515610e84565b803561082e81610e9a565b600060c08284031215610ec257610ec2600080fd5b610ecc60c0610cea565b905081356001600160401b03811115610ee757610ee7600080fd5b610ef384828501610d75565b82525060208201356001600160401b03811115610f1257610f12600080fd5b610f1e84828501610d75565b60208301525060408201356001600160401b03811115610f4057610f40600080fd5b610f4c84828501610d75565b60408301525060608201356001600160401b03811115610f6e57610f6e600080fd5b610f7a84828501610e3b565b6060830152506080610f8e84828501610e8f565b60808301525060a0610fa284828501610ea2565b60a08301525092915050565b80610e84565b803561082e81610fae565b60008060408385031215610fd557610fd5600080fd5b82356001600160401b03811115610fee57610fee600080fd5b610ffa85828601610ead565b925050602061100b85828601610fb4565b9150509250929050565b60006020828403121561102a5761102a600080fd5b6000610d998484610fb4565b60005b83811015611051578181015183820152602001611039565b50506000910152565b6000611064825190565b80845260208401935061107b818560208601611036565b601f01601f19169290920192915050565b60208082528101610b69818461105a565b6110a681610e5f565b82525050565b6020810161082e828461109d565b610e8481610e5f565b803561082e816110ba565b6000602082840312156110e3576110e3600080fd5b6000610d9984846110c3565b634e487b7160e01b600052601160045260246000fd5b8082018082111561082e5761082e6110ef565b634e487b7160e01b600052603260045260246000fd5b6000611138825190565b611146818560208601611036565b9290920192915050565b600061115c828b61112e565b600b60fa1b81526001019150611172828a61112e565b600b60fa1b81526001019150611188828961112e565b600b60fa1b8152600101915061119e828861112e565b600b60fa1b815260010191506111b4828761112e565b600b60fa1b815260010191506111ca828661112e565b600b60fa1b815260010191506111e0828561112e565b600b60fa1b815260010191506111f6828461112e565b9a9950505050505050505050565b6000611210828561112e565b600b60fa1b81526001019150610d99828461112e565b60006000198203611239576112396110ef565b5060010190565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061126a57607f821691505b60208210810361127c5761127c611240565b50919050565b60ff9182169190811690828202908116908181146112a2576112a26110ef565b5092915050565b634e487b7160e01b600052601260045260246000fd5b6000826112ce576112ce6112a9565b500490565b8181028082158382048514176112a2576112a26110ef565b6000826112fa576112fa6112a9565b500690565b61060f60f31b81526002016000610b69828461112e565b6020808252810161082e81602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161082e81611360565b600081546113b281611256565b8085526020850194506001821680156113d257600181146113e857611416565b60ff198316865260208215150286019350611416565b60008581526020902060005b83811015611410578154888201526001909101906020016113f4565b87019450505b50505092915050565b6000610b6983836113a5565b6000611435825490565b808452602084019350836020820285016114558560009081526020902090565b8060005b8581101561148757848403895281611471858261141f565b60209a909a019994505060019182019101611459565b5091979650505050505050565b604081016114a2828561109d565b8181036020830152610d99818461142b565b805161082e81610fae565b60006114cd610d4a84610da1565b838152905060208082019084028301858111156114ec576114ec600080fd5b835b81811015610e31578061150188826114b4565b845250602092830192016114ee565b600082601f83011261152457611524600080fd5b8151610d998482602086016114bf565b60006020828403121561154957611549600080fd5b81516001600160401b0381111561156257611562600080fd5b610d9984828501611510565b600061082e61157a8381565b90565b6115868361156e565b815460001960089490940293841b1916921b91909117905550565b60006115ae81848461157d565b505050565b818110156115ce576115c66000826115a1565b6001016115b3565b5050565b601f8211156115ae576000818152602090206020601f850104810160208510156115f95750805b61160b6020601f8601048301826115b3565b5050505050565b81516001600160401b0381111561162b5761162b610ca8565b6116358254611256565b6116408282856115d2565b6020601f831160018114611674576000841561165c5750858201515b600019600886021c1981166002860217865550610968565b600085815260208120601f198616915b828110156116a45788850151825560209485019460019092019101611684565b868310156116c05784890151600019601f89166008021c191682555b600160028802018855505050505050505050565b602760f81b81526000611239565b60006116ed826116d4565b91506116f9828461112e565b9150610b69826116d4565b600560fb1b81526000611239565b602960f81b81526000611239565b6b024a729a2a92a1024a72a27960a51b8152600c016000611741828661112e565b915061174c82611704565b9150611758828561112e565b67052ac8298aa8aa6560c31b81526008019150611775828461112e565b915061178082611712565b95945050505050565b806110a6565b6060810161179d828661109d565b6117aa6020830185611789565b8181036040830152611780818461105a565b605f60f81b81526000611239565b60006117d6828661112e565b91506117e1826117bc565b91506117ed828561112e565b91506117f8826117bc565b9150611780828461112e565b600081611813576118136110ef565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e749101908152600061138e565b6020808252810161082e8161181b56fe736368656d615549442c20736368656d612c207265736f6c7665722c207265766f6361626c652c206e616d652c206465736372697074696f6e2c2063726561746f722c206372656174696f6e54696d657374616d70a2646970667358221220ccb2fbd105fedb3d3992368ea979173b38e5cf23deb7cbd5ecdb20846c811b0664736f6c63430008130033736368656d615549442074657874207072696d617279206b65792c20736368656d6120746578742c207265736f6c76657220746578742c207265766f6361626c6520746578742c206e616d6520746578742c206465736372697074696f6e20746578742c2063726561746f7220746578742c206372656174696f6e54696d657374616d702074657874",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Creates a new SchemaRegistry instance."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "SchemaTablelandIndexer",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10821,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "tablelandContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITablelandTables)4651"
      },
      {
        "astId": 10824,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 10827,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "tables",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 10829,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "tablesUpdates",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10831,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "tableRowsCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10834,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "tableIDs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ITablelandTables)4651": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}