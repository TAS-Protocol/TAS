{
  "address": "0x726958B4d5226dc2DF517A55ce2a28b92213A1c5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "AttestationInserted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "revoker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "revocationTime",
          "type": "uint256"
        }
      ],
      "name": "AttestationRevokedUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "revocable",
          "type": "bool"
        }
      ],
      "name": "RevocationInfoInserted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "revoker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "RevokedOffChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "Timestamped",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "bytesToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tablesUpdates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0x726958B4d5226dc2DF517A55ce2a28b92213A1c5",
    "transactionIndex": 0,
    "gasUsed": "230240885",
    "logsBloom": "0xefd4ff77bdfb7bffffefdffff6b5bbf77bffb3fa5efbedffe7fffa9ebf6fbfbbfbfffef7efffeff6dffcfdddf7ffbffe7ff7bbffdfdfdf9f7bedef7ffeffefcfbdfdbfeafbbbddbfdffffffbf7df7dfefb79bb3fffe5bfffafcfffd5bebf5ef77bcaff7dff3dffddced7f1dfbfb8ffebf9bf7deff73ffffeebf3b5ff97eff5ff9edba77eff7f1ffffbde3f6d7ffdcfeffdbbfff9fbf7de7ebf7ef75affeabf1f9ffeafffffeefebfeed7cbfefff7ff7efdef47c8fbe5fff83bf89e3b37cffbdcf3f7d5fbffaffffcfefe7dbffdaffffd9f6ffefdbdaae2dfff7fad6ffffdebfffdbf5dff75edfbfb7f9fbbed9f66f5fefd96ffff77f7afd68ffdfffdefdfefff",
    "blockHash": "0x0c53083b215a551d6c0b1b4311588859f913e2ca562872de5efb10f6346509b9",
    "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 935542,
        "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
        "address": "0x726958B4d5226dc2DF517A55ce2a28b92213A1c5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0c53083b215a551d6c0b1b4311588859f913e2ca562872de5efb10f6346509b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 935542,
        "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000726958b4d5226dc2df517a55ce2a28b92213a1c5",
          "0x000000000000000000000000000000000000000000000000000000000000015d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0c53083b215a551d6c0b1b4311588859f913e2ca562872de5efb10f6346509b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 935542,
        "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000726958b4d5226dc2df517a55ce2a28b92213a1c5000000000000000000000000000000000000000000000000000000000000015d000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a9435245415445205441424c45206174746573746174696f6e5f333134313539287569642074657874207072696d617279206b65792c20736368656d6155494420746578742c206372656174696f6e54696d657374616d7020746578742c2065787069726174696f6e54696d6520746578742c2072656655494420746578742c20726563697069656e7420746578742c20617474657374657220746578742c20646174612074657874290000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x0c53083b215a551d6c0b1b4311588859f913e2ca562872de5efb10f6346509b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 935542,
        "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000726958b4d5226dc2df517a55ce2a28b92213a1c5",
          "0x000000000000000000000000000000000000000000000000000000000000015e"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x0c53083b215a551d6c0b1b4311588859f913e2ca562872de5efb10f6346509b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 935542,
        "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000726958b4d5226dc2df517a55ce2a28b92213a1c5000000000000000000000000000000000000000000000000000000000000015e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000067435245415445205441424c45207265766f636174696f6e5f333134313539287569642074657874207072696d617279206b65792c207265766f636174696f6e54696d6520746578742c207265766f6b657220746578742c207265766f6361626c6520746578742900000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0x0c53083b215a551d6c0b1b4311588859f913e2ca562872de5efb10f6346509b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 935542,
        "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000726958b4d5226dc2df517a55ce2a28b92213a1c5",
          "0x000000000000000000000000000000000000000000000000000000000000015f"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x0c53083b215a551d6c0b1b4311588859f913e2ca562872de5efb10f6346509b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 935542,
        "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000726958b4d5226dc2df517a55ce2a28b92213a1c5000000000000000000000000000000000000000000000000000000000000015f00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044435245415445205441424c45206f6666436861696e5f74696d657374616d705f3331343135392875696420746578742c2074696d657374616d706564417420746578742900000000000000000000000000000000000000000000000000000000",
        "logIndex": 6,
        "blockHash": "0x0c53083b215a551d6c0b1b4311588859f913e2ca562872de5efb10f6346509b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 935542,
        "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000726958b4d5226dc2df517a55ce2a28b92213a1c5",
          "0x0000000000000000000000000000000000000000000000000000000000000160"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x0c53083b215a551d6c0b1b4311588859f913e2ca562872de5efb10f6346509b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 935542,
        "transactionHash": "0x1f3bcbed47e1f7dda94f0a099efcd78777e8483b6e2d0df3f6a8599b48b717d7",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000726958b4d5226dc2df517a55ce2a28b92213a1c500000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004f435245415445205441424c45206f6666436861696e5f7265766f636174696f6e5f333134313539287265766f6b657220746578742c2075696420746578742c207265766f6b656441742074657874290000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0x0c53083b215a551d6c0b1b4311588859f913e2ca562872de5efb10f6346509b9"
      }
    ],
    "blockNumber": 935542,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b21a88c0173e1f065079f57541eed105",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"AttestationInserted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"revocationTime\",\"type\":\"uint256\"}],\"name\":\"AttestationRevokedUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"RevocationInfoInserted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RevokedOffChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Timestamped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"bytesToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tablesUpdates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TAS\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"The Tableland Attestation Service protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tablelandIndexers/TASIndexer.sol\":\"TASIndexer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Sepolia.\\n    address internal constant SEPOLIA =\\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Goerli.\\n    address internal constant ARBITRUM_GOERLI =\\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Calibration.\\n    address internal constant FILECOIN_CALIBRATION =\\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (ITablelandTables) {\\n        if (block.chainid == 1) {\\n            return ITablelandTables(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return ITablelandTables(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return ITablelandTables(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return ITablelandTables(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return ITablelandTables(MATIC);\\n        } else if (block.chainid == 314) {\\n            return ITablelandTables(FILECOIN);\\n        } else if (block.chainid == 11155111) {\\n            return ITablelandTables(SEPOLIA);\\n        } else if (block.chainid == 420) {\\n            return ITablelandTables(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421613) {\\n            return ITablelandTables(ARBITRUM_GOERLI);\\n        } else if (block.chainid == 80001) {\\n            return ITablelandTables(MATICMUM);\\n        } else if (block.chainid == 314159) {\\n            return ITablelandTables(FILECOIN_CALIBRATION);\\n        } else if (block.chainid == 31337) {\\n            return ITablelandTables(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29920684b8971cd38b81626677de7be59039437c81f48a9d633bbee028dbc1d4\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidTAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xc5884efdbbbc124e3a732f3a96d7f59dd8ff55317ccd95c2a8725a79302d3e85\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\nstruct SchemaRegistrationInput {\\n    string schema;\\n    string schemaName;\\n    string schemaDescription;\\n    string[] categories;\\n    ISchemaResolver schemaResolver;\\n    bool revocable;\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    function register(\\n        SchemaRegistrationInput memory input\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xde2a2b64e934247a6631bd82bfdaddb64afb80f6212e5247e968d9b0723b3a3c\",\"license\":\"MIT\"},\"contracts/ITAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title ITAS\\n/// @notice TAS - Tableland Attestation Service interface.\\ninterface ITAS {\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xceee421e8c817c072e74e447e05efa9eff7cd2024d0b0aca1f8ca14f1b0160e3\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x41ca4d09299123200e38fae5b4f6767d0385271609b791cefac391641585c142\",\"license\":\"MIT\"},\"contracts/tablelandIndexers/TASIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {TablelandDeployments, ITablelandTables} from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport {SQLHelpers} from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport {Attestation} from \\\"../ITAS.sol\\\";\\n\\n/// @title TAS\\n/// @notice The Tableland Attestation Service protocol.\\ncontract TASIndexer is IERC721Receiver, Ownable {\\n    ITablelandTables private tablelandContract;\\n\\n    string[] createTableStatements;\\n\\n    string[] public tables;\\n\\n    uint256[] tableIDs;\\n\\n    uint256 public tablesUpdates;\\n\\n    uint256 private tablesRowsCounter;\\n\\n    string private constant ATTESTATION_TABLE_PREFIX = \\\"attestation\\\";\\n\\n    string private constant ATTESTATION_SCHEMA =\\n        \\\"uid text primary key, schemaUID text, creationTimestamp text, expirationTime text, refUID text, recipient text, attester text, data text\\\";\\n\\n    string private constant REVOCATION_TABLE_PREFIX = \\\"revocation\\\";\\n\\n    string private constant REVOCATION_SCHEMA =\\n        \\\"uid text primary key, revocationTime text, revoker text, revocable text\\\";\\n\\n    string private constant TIMESTAMP_TABLE_PREFIX = \\\"offChain_timestamp\\\";\\n\\n    string private constant TIMESTAMP_SCHEMA = \\\"uid text, timestampedAt text\\\";\\n\\n    string private constant OFF_CHAIN_REVOCATIONS_TABLE_PREFIX =\\n        \\\"offChain_revocation\\\";\\n\\n    string private constant OFF_CHAIN_REVOCATIONS_SCHEMA =\\n        \\\"revoker text, uid text, revokedAt text\\\";\\n\\n    constructor() {\\n        tablelandContract = TablelandDeployments.get();\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                ATTESTATION_SCHEMA,\\n                ATTESTATION_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                REVOCATION_SCHEMA,\\n                REVOCATION_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                TIMESTAMP_SCHEMA,\\n                TIMESTAMP_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                OFF_CHAIN_REVOCATIONS_SCHEMA,\\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX\\n            )\\n        );\\n\\n        tableIDs = tablelandContract.create(\\n            address(this),\\n            createTableStatements\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(ATTESTATION_TABLE_PREFIX, tableIDs[0])\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(REVOCATION_TABLE_PREFIX, tableIDs[1])\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(TIMESTAMP_TABLE_PREFIX, tableIDs[2])\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX,\\n                tableIDs[3]\\n            )\\n        );\\n    }\\n\\n    function AttestationInserted(\\n        Attestation memory attestation\\n    ) public onlyOwner {\\n        string memory data = bytesToString(attestation.data);\\n        require(strlen(data) <= 1024, \\\"Tableland limitation\\\");\\n        // Managing tableland rows limitation.\\n        if (tablesRowsCounter == 100000) {\\n            RenewTables();\\n        }\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toInsert(\\n                ATTESTATION_TABLE_PREFIX,\\n                tableIDs[0],\\n                \\\"uid, schemaUID, creationTimestamp, expirationTime, refUID, recipient, attester, data\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(attestation.uid)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(attestation.schema)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote((Strings.toString(attestation.time))),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(\\n                        (Strings.toString(attestation.expirationTime))\\n                    ),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(attestation.refUID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(\\n                        Strings.toHexString(attestation.recipient)\\n                    ),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(attestation.attester)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(data)\\n                )\\n            )\\n        );\\n        tablesRowsCounter++;\\n        RevocationInfoInserted(attestation.uid, attestation.revocable);\\n    }\\n\\n    function RevocationInfoInserted(\\n        bytes32 uid,\\n        bool revocable\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toInsert(\\n                REVOCATION_TABLE_PREFIX,\\n                tableIDs[1],\\n                \\\"uid, revocationTime, revoker, revocable\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(uid)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(\\\"0\\\"),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(address(0))),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(revocable ? \\\"true\\\" : \\\"false\\\")\\n                )\\n            )\\n        );\\n    }\\n\\n    function AttestationRevokedUpdate(\\n        bytes32 uid,\\n        address revoker,\\n        uint256 revocationTime\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toUpdate(\\n                REVOCATION_TABLE_PREFIX,\\n                tableIDs[1],\\n                string.concat(\\n                    \\\"revoker=\\\",\\n                    SQLHelpers.quote(Strings.toHexString(revoker)),\\n                    \\\", revocationTime=\\\",\\n                    SQLHelpers.quote(Strings.toString(revocationTime))\\n                ),\\n                string.concat(\\\"uid=\\\", SQLHelpers.quote(bytes32ToString(uid)))\\n            )\\n        );\\n    }\\n\\n    function Timestamped(bytes32 uid, uint256 time) public onlyOwner {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toInsert(\\n                TIMESTAMP_TABLE_PREFIX,\\n                tableIDs[2],\\n                \\\"uid, timestampedAt\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(uid)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(time))\\n                )\\n            )\\n        );\\n    }\\n\\n    function RevokedOffChain(\\n        address revoker,\\n        bytes32 uid,\\n        uint256 time\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toInsert(\\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX,\\n                tableIDs[3],\\n                \\\"revoker, uid, revokedAt\\\",\\n                string.concat(\\n                    SQLHelpers.quote(Strings.toHexString(revoker)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(uid)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(time))\\n                )\\n            )\\n        );\\n    }\\n\\n    function RenewTables() internal {\\n        tableIDs = tablelandContract.create(\\n            address(this),\\n            createTableStatements\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(ATTESTATION_TABLE_PREFIX, tableIDs[0])\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(REVOCATION_TABLE_PREFIX, tableIDs[1])\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(TIMESTAMP_TABLE_PREFIX, tableIDs[2])\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX,\\n                tableIDs[3]\\n            )\\n        );\\n\\n        tablesRowsCounter = 0;\\n\\n        tablesUpdates++;\\n    }\\n\\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    function bytesToString(\\n        bytes memory data\\n    ) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n\\n    /*\\n     * @dev Internal function to execute a mutation on a table.\\n     * @param {uint256} tableId - Table ID.\\n     * @param {string} statement - Mutation statement.\\n     */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        tablelandContract.mutate(address(this), tableId, statement);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x95ea21da1c06a46c63a5f47641b0cd7690a6837fc27ab22473be61defd9fd267\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d336200047c565b62000027620004cc565b600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002620000956040518060c00160405280608881526020016200331a6088913960408051808201909152600b81526a30ba3a32b9ba30ba34b7b760a91b602082015262000699565b81546001810183556000928352602090922090910190620000b79082620009f8565b506002620000ff604051806080016040528060478152602001620033a26047913960408051808201909152600a8152693932bb37b1b0ba34b7b760b11b602082015262000699565b81546001810183556000928352602090922090910190620001219082620009f8565b506002620001956040518060400160405280601c81526020017f75696420746578742c2074696d657374616d70656441742074657874000000008152506040518060400160405280601281526020017106f6666436861696e5f74696d657374616d760741b8152506200069960201b60201c565b81546001810183556000928352602090922090910190620001b79082620009f8565b50600262000208604051806060016040528060268152602001620032f46026913960408051808201909152601381527237b33321b430b4b72fb932bb37b1b0ba34b7b760691b602082015262000699565b815460018101835560009283526020909220909101906200022a9082620009f8565b506001546040516361a23d0f60e01b81526001600160a01b03909116906361a23d0f906200026090309060029060040162000bf1565b6000604051808303816000875af115801562000280573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002aa919081019062000d2b565b8051620002c09160049160209091019062000883565b506003620003196040518060400160405280600b81526020016a30ba3a32b9ba30ba34b7b760a91b815250600460008154811062000302576200030262000d6b565b9060005260206000200154620006d460201b60201c565b815460018101835560009283526020909220909101906200033b9082620009f8565b5060036200037c6040518060400160405280600a8152602001693932bb37b1b0ba34b7b760b11b815250600460018154811062000302576200030262000d6b565b815460018101835560009283526020909220909101906200039e9082620009f8565b506003620003e76040518060400160405280601281526020017106f6666436861696e5f74696d657374616d760741b815250600460028154811062000302576200030262000d6b565b81546001810183556000928352602090922090910190620004099082620009f8565b506003620004536040518060400160405280601381526020017237b33321b430b4b72fb932bb37b1b0ba34b7b760691b815250600460038154811062000302576200030262000d6b565b81546001810183556000928352602090922090910190620004759082620009f8565b5062000ec6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600046600103620004f0575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a0362000512575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b103620005355750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba03620005585750731a22854c5b1642760a827f20137a67930ae108d290565b466089036200057a5750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a036200059d57507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a703620005c1575073c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a403620005e4575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed0362000608575073033f69e8d119205089ab15d340f5b797732f646b90565b4662013881036200062c5750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f0362000650575073030bcf3d50cad04c2e57391b12740982a930862190565b46617a690362000673575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b4660405163264e42cf60e01b815260040162000690919062000d88565b60405180910390fd5b606081620006a74662000701565b84604051602001620006bc9392919062000e12565b60405160208183030381529060405290505b92915050565b606082620006e24662000701565b620006ed8462000701565b604051602001620006bc9392919062000e82565b6060600062000710836200079a565b60010190506000816001600160401b03811115620007325762000732620008ea565b6040519080825280601f01601f1916602001820160405280156200075d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200076757509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310620007e4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831062000811576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200083057662386f26fc10000830492506010015b6305f5e100831062000849576305f5e100830492506008015b61271083106200085e57612710830492506004015b6064831062000871576064830492506002015b600a8310620006ce5760010192915050565b828054828255906000526020600020908101928215620008c1579160200282015b82811115620008c1578251825591602001919060010190620008a4565b50620008cf929150620008d3565b5090565b5b80821115620008cf5760008155600101620008d4565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200092b57607f821691505b60208210810362000940576200094062000900565b50919050565b6000620006ce620009548381565b90565b620009628362000946565b815460001960089490940293841b1916921b91909117905550565b60006200098c81848462000957565b505050565b81811015620009b057620009a76000826200097d565b60010162000991565b5050565b601f8211156200098c576000818152602090206020601f85010481016020851015620009dd5750805b620009f16020601f86010483018262000991565b5050505050565b81516001600160401b0381111562000a145762000a14620008ea565b62000a20825462000916565b62000a2d828285620009b4565b6020601f83116001811462000a64576000841562000a4b5750858201515b600019600886021c198116600286021786555062000ac0565b600085815260208120601f198616915b8281101562000a96578885015182556020948501946001909201910162000a74565b8683101562000ab35784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60006001600160a01b038216620006ce565b62000ae58162000ac8565b82525050565b6000815462000afa8162000916565b80855260208501945060018216801562000b1d576001811462000b345762000b64565b60ff19831686526020821515028601935062000b64565b60008581526020902060005b8381101562000b5e5781548882015260019091019060200162000b40565b87019450505b50505092915050565b600062000b7b838362000aeb565b9392505050565b600062000b8d825490565b8084526020840193508360208202850162000bae8560009081526020902090565b8060005b8581101562000be45784840389528162000bcd858262000b6d565b60209a909a01999450506001918201910162000bb2565b5091979650505050505050565b6040810162000c01828562000ada565b818103602083015262000c15818462000b82565b949350505050565b601f19601f83011681018181106001600160401b038211171562000c455762000c45620008ea565b6040525050565b600062000c5860405190565b905062000c66828262000c1d565b919050565b60006001600160401b0382111562000c875762000c87620008ea565b5060209081020190565b8051620006ce565b600062000cb062000caa8462000c6b565b62000c4c565b8381529050602080820190840283018581111562000cd15762000cd1600080fd5b835b8181101562000cf9578062000ce9888262000c91565b8452506020928301920162000cd3565b5050509392505050565b600082601f83011262000d195762000d19600080fd5b815162000c1584826020860162000c99565b60006020828403121562000d425762000d42600080fd5b81516001600160401b0381111562000d5d5762000d5d600080fd5b62000c158482850162000d03565b634e487b7160e01b600052603260045260246000fd5b8062000ae5565b60208101620006ce828462000d81565b60005b8381101562000db557818101518382015260200162000d9b565b50506000910152565b600062000dc9825190565b62000dd981856020860162000d98565b9290920192915050565b605f60f81b815260005b5060010190565b600560fb1b8152600062000ded565b602960f81b8152600062000ded565b6c021a922a0aa22902a20a126229609d1b8152600d01600062000e36828662000dbe565b915062000e438262000de3565b915062000e51828562000dbe565b915062000e5e8262000df4565b915062000e6c828462000dbe565b915062000e798262000e03565b95945050505050565b600062000e90828662000dbe565b915062000e9d8262000de3565b915062000eab828562000dbe565b915062000eb88262000de3565b915062000e79828462000dbe565b61241e8062000ed66000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063a560756d11610066578063a560756d146101ae578063ac2d13e7146101c1578063d7d20545146101d4578063f2fde38b146101e757600080fd5b80638da5cb5b1461016f5780639201de5514610188578063956652351461019b57600080fd5b8063150b7a02146100d457806339614e4f14610109578063715018a61461012957806371671bf2146101335780637a99dcd91461014657806389cdc83014610159575b600080fd5b6100f36100e23660046114f5565b630a85bd0160e11b95945050505050565b604051610100919061158a565b60405180910390f35b61011c610117366004611691565b6101fa565b6040516101009190611721565b6101316103bd565b005b61011c610141366004611732565b6103d1565b610131610154366004611753565b61047d565b61016260055481565b60405161010091906117a9565b6000546001600160a01b031660405161010091906117c0565b61011c610196366004611732565b610584565b6101316101a93660046117ce565b610712565b6101316101bc36600461193a565b6107e9565b6101316101cf366004611974565b610999565b6101316101e23660046119b1565b610abc565b6101316101f53660046119e4565b610b87565b606060008251600261020c9190611a1b565b6001600160401b0381111561022357610223611598565b6040519080825280601f01601f19166020018201604052801561024d576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b84518110156103935781825186838151811061029957610299611a3a565b01602001516102ab919060f81c611a66565b815181106102bb576102bb611a3a565b01602001516001600160f81b031916836102d6836002611a1b565b815181106102e6576102e6611a3a565b60200101906001600160f81b031916908160001a90535081825186838151811061031257610312611a3a565b0160200151610324919060f81c611a7a565b8151811061033457610334611a3a565b01602001516001600160f81b0319168361034f836002611a1b565b61035a906001611a8e565b8151811061036a5761036a611a3a565b60200101906001600160f81b031916908160001a9053508061038b81611aa1565b91505061027b565b50816040516020016103a59190611add565b60405160208183030381529060405292505050919050565b6103c5610bc1565b6103cf6000610beb565b565b600381815481106103e157600080fd5b9060005260206000200160009150905080546103fc90611b0e565b80601f016020809104026020016040519081016040528092919081815260200182805461042890611b0e565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b505050505081565b610485610bc1565b61057f600460038154811061049c5761049c611a3a565b906000526020600020015461057a6040518060400160405280601381526020017237b33321b430b4b72fb932bb37b1b0ba34b7b760691b81525060046003815481106104ea576104ea611a3a565b90600052602060002001546040518060400160405280601781526020017f7265766f6b65722c207569642c207265766f6b6564417400000000000000000081525061053c6105378a610c3b565b610c57565b6105486105378a610584565b6105546105378a610c80565b60405160200161056693929190611b43565b604051602081830303815290604052610d13565b610d52565b505050565b6060600061059460206002611b8e565b60ff166001600160401b038111156105ae576105ae611598565b6040519080825280601f01601f1916602001820160405280156105d8576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b60208110156103935781825186836020811061062457610624611a3a565b6106309291901a611a66565b8151811061064057610640611a3a565b01602001516001600160f81b0319168361065b836002611a1b565b8151811061066b5761066b611a3a565b60200101906001600160f81b031916908160001a90535081825186836020811061069757610697611a3a565b6106a39291901a611a7a565b815181106106b3576106b3611a3a565b01602001516001600160f81b031916836106ce836002611a1b565b6106d9906001611a8e565b815181106106e9576106e9611a3a565b60200101906001600160f81b031916908160001a9053508061070a81611aa1565b915050610606565b61071a610bc1565b61057f600460018154811061073157610731611a3a565b906000526020600020015461057a6040518060400160405280600a8152602001693932bb37b1b0ba34b7b760b11b815250600460018154811061077657610776611a3a565b906000526020600020015461078d61053788610c3b565b61079961053788610c80565b6040516020016107aa929190611bae565b6040516020818303038152906040526107c56105378a610584565b6040516020016107d59190611bf1565b604051602081830303815290604052610dbc565b6107f1610bc1565b60006108018261012001516101fa565b905061040061080f82610e37565b11156108365760405162461bcd60e51b815260040161082d90611c38565b60405180910390fd5b600654620186a00361084a5761084a610f3a565b61096d600460008154811061086157610861611a3a565b906000526020600020015461057a6040518060400160405280600b81526020016a30ba3a32b9ba30ba34b7b760a91b81525060046000815481106108a7576108a7611a3a565b906000526020600020015460405180608001604052806054815260200161236e605491396108db6105378960000151610584565b6108eb6105378a60200151610584565b6109046105378b604001516001600160401b0316610c80565b61091d6105378c606001516001600160401b0316610c80565b61092d6105378d60a00151610584565b61093d6105378e60c00151610c3b565b61094d6105378f60e00151610c3b565b6109568e610c57565b604051602001610566989796959493929190611c48565b6006805490600061097d83611aa1565b91905055506109958260000151836101000151610999565b5050565b6109a1610bc1565b61099560046001815481106109b8576109b8611a3a565b906000526020600020015461057a6040518060400160405280600a8152602001693932bb37b1b0ba34b7b760b11b81525060046001815481106109fd576109fd611a3a565b90600052602060002001546040518060600160405280602781526020016123c260279139610a2d61053789610584565b610a4f604051806040016040528060018152602001600360fc1b815250610c57565b610a5c6105376000610c3b565b610aa98a610a87576040518060400160405280600581526020016466616c736560d81b815250610c57565b604051806040016040528060048152602001637472756560e01b815250610c57565b6040516020016105669493929190611d1f565b610ac4610bc1565b6109956004600281548110610adb57610adb611a3a565b906000526020600020015461057a6040518060400160405280601281526020017106f6666436861696e5f74696d657374616d760741b8152506004600281548110610b2857610b28611a3a565b9060005260206000200154604051806040016040528060128152602001711d5a590b081d1a5b595cdd185b5c1959105d60721b815250610b6a61053789610584565b610b7661053789610c80565b604051602001610566929190611d86565b610b8f610bc1565b6001600160a01b038116610bb55760405162461bcd60e51b815260040161082d90611dad565b610bbe81610beb565b50565b6000546001600160a01b031633146103cf5760405162461bcd60e51b815260040161082d90611e29565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060610c516001600160a01b038316601461117b565b92915050565b606081604051602001610c6a9190611e47565b6040516020818303038152906040529050919050565b60606000610c8d836112ed565b60010190506000816001600160401b03811115610cac57610cac611598565b6040519080825280601f01601f191660200182016040528015610cd6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610ce0575b509392505050565b60606000610d2186866113c5565b9050808484604051602001610d3893929190611e85565b604051602081830303815290604052915050949350505050565b600154604051631bbd786d60e11b81526001600160a01b039091169063377af0da90610d8690309086908690600401611ee5565b600060405180830381600087803b158015610da057600080fd5b505af1158015610db4573d6000803e3d6000fd5b505050505050565b60606000610dca86866113c5565b60408051602081019091526000815284519192509015610e075783604051602001610df59190611f29565b60405160208183030381529060405290505b818582604051602001610e1c93929190611f48565b60405160208183030381529060405292505050949350505050565b8051600090819081905b80821015610f31576000858381518110610e5d57610e5d611a3a565b01602001516001600160f81b0319169050600160ff1b811015610e8c57610e85600184611a8e565b9250610f1e565b600760fd1b6001600160f81b031982161015610ead57610e85600284611a8e565b600f60fc1b6001600160f81b031982161015610ece57610e85600384611a8e565b601f60fb1b6001600160f81b031982161015610eef57610e85600484611a8e565b603f60fa1b6001600160f81b031982161015610f1057610e85600584611a8e565b610f1b600684611a8e565b92505b5082610f2981611aa1565b935050610e41565b50909392505050565b6001546040516361a23d0f60e01b81526001600160a01b03909116906361a23d0f90610f6d903090600290600401612074565b6000604051808303816000875af1158015610f8c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fb49190810190612141565b8051610fc891600491602090910190611403565b5060036110166040518060400160405280600b81526020016a30ba3a32b9ba30ba34b7b760a91b815250600460008154811061100657611006611a3a565b90600052602060002001546113c5565b815460018101835560009283526020909220909101906110369082612216565b5060036110736040518060400160405280600a8152602001693932bb37b1b0ba34b7b760b11b815250600460018154811061100657611006611a3a565b815460018101835560009283526020909220909101906110939082612216565b5060036110d86040518060400160405280601281526020017106f6666436861696e5f74696d657374616d760741b815250600460028154811061100657611006611a3a565b815460018101835560009283526020909220909101906110f89082612216565b50600361113e6040518060400160405280601381526020017237b33321b430b4b72fb932bb37b1b0ba34b7b760691b815250600460038154811061100657611006611a3a565b8154600181018355600092835260209092209091019061115e9082612216565b5060006006819055600580549161117483611aa1565b9190505550565b6060600061118a836002611a1b565b611195906002611a8e565b6001600160401b038111156111ac576111ac611598565b6040519080825280601f01601f1916602001820160405280156111d6576020820181803683370190505b509050600360fc1b816000815181106111f1576111f1611a3a565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061122057611220611a3a565b60200101906001600160f81b031916908160001a9053506000611244846002611a1b565b61124f906001611a8e565b90505b60018111156112c7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061128357611283611a3a565b1a60f81b82828151811061129957611299611a3a565b60200101906001600160f81b031916908160001a90535060049490941c936112c0816122d8565b9050611252565b5083156112e65760405162461bcd60e51b815260040161082d90612321565b9392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061132c5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611358576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061137657662386f26fc10000830492506010015b6305f5e100831061138e576305f5e100830492506008015b61271083106113a257612710830492506004015b606483106113b4576064830492506002015b600a8310610c515760010192915050565b6060826113d146610c80565b6113da84610c80565b6040516020016113ec9392919061233f565b604051602081830303815290604052905092915050565b82805482825590600052602060002090810192821561143e579160200282015b8281111561143e578251825591602001919060010190611423565b5061144a92915061144e565b5090565b5b8082111561144a576000815560010161144f565b60006001600160a01b038216610c51565b61147d81611463565b8114610bbe57600080fd5b8035610c5181611474565b8061147d565b8035610c5181611493565b60008083601f8401126114b9576114b9600080fd5b5081356001600160401b038111156114d3576114d3600080fd5b6020830191508360018202830111156114ee576114ee600080fd5b9250929050565b60008060008060006080868803121561151057611510600080fd5b600061151c8888611488565b955050602061152d88828901611488565b945050604061153e88828901611499565b93505060608601356001600160401b0381111561155d5761155d600080fd5b611569888289016114a4565b92509250509295509295909350565b6001600160e01b031981165b82525050565b60208101610c518284611578565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156115d3576115d3611598565b6040525050565b60006115e560405190565b90506115f182826115ae565b919050565b60006001600160401b0382111561160f5761160f611598565b601f19601f83011660200192915050565b82818337506000910152565b600061163f61163a846115f6565b6115da565b90508281526020810184848401111561165a5761165a600080fd5b610d0b848285611620565b600082601f83011261167957611679600080fd5b813561168984826020860161162c565b949350505050565b6000602082840312156116a6576116a6600080fd5b81356001600160401b038111156116bf576116bf600080fd5b61168984828501611665565b60005b838110156116e65781810151838201526020016116ce565b50506000910152565b60006116f9825190565b8084526020840193506117108185602086016116cb565b601f01601f19169290920192915050565b602080825281016112e681846116ef565b60006020828403121561174757611747600080fd5b60006116898484611499565b60008060006060848603121561176b5761176b600080fd5b60006117778686611488565b935050602061178886828701611499565b925050604061179986828701611499565b9150509250925092565b80611584565b60208101610c5182846117a3565b61158481611463565b60208101610c5182846117b7565b6000806000606084860312156117e6576117e6600080fd5b60006117f28686611499565b935050602061178886828701611488565b6001600160401b03811661147d565b8035610c5181611803565b80151561147d565b8035610c518161181d565b6000610140828403121561184657611846600080fd5b6118516101406115da565b9050600061185f8484611499565b825250602061187084848301611499565b602083015250604061188484828501611812565b604083015250606061189884828501611812565b60608301525060806118ac84828501611812565b60808301525060a06118c084828501611499565b60a08301525060c06118d484828501611488565b60c08301525060e06118e884828501611488565b60e0830152506101006118fd84828501611825565b610100830152506101208201356001600160401b0381111561192157611921600080fd5b61192d84828501611665565b6101208301525092915050565b60006020828403121561194f5761194f600080fd5b81356001600160401b0381111561196857611968600080fd5b61168984828501611830565b6000806040838503121561198a5761198a600080fd5b60006119968585611499565b92505060206119a785828601611825565b9150509250929050565b600080604083850312156119c7576119c7600080fd5b60006119d38585611499565b92505060206119a785828601611499565b6000602082840312156119f9576119f9600080fd5b60006116898484611488565b634e487b7160e01b600052601160045260246000fd5b818102808215838204851417611a3357611a33611a05565b5092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082611a7557611a75611a50565b500490565b600082611a8957611a89611a50565b500690565b80820180821115610c5157610c51611a05565b60006000198203611ab457611ab4611a05565b5060010190565b6000611ac5825190565b611ad38185602086016116cb565b9290920192915050565b61060f60f31b81526000600282015b91506112e68284611abb565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611b2257607f821691505b602082108103611b3457611b34611af8565b50919050565b600b60fa1b9052565b6000611b4f8286611abb565b9150611b5a82611b3a565b600182019150611b6a8285611abb565b9150611b7582611b3a565b600182019150611b858284611abb565b95945050505050565b60ff918216919081169082820290811690818114611a3357611a33611a05565b677265766f6b65723d60c01b81526008016000611bcb8285611abb565b702c207265766f636174696f6e54696d653d60781b815260110191506116898284611abb565b637569643d60e01b815260040160006112e68284611abb565b60148152600060208201732a30b13632b630b732103634b6b4ba30ba34b7b760611b815291505b5060200190565b60208082528101610c5181611c0a565b6000611c54828b611abb565b9150611c5f82611b3a565b600182019150611c6f828a611abb565b9150611c7a82611b3a565b600182019150611c8a8289611abb565b9150611c9582611b3a565b600182019150611ca58288611abb565b9150611cb082611b3a565b600182019150611cc08287611abb565b9150611ccb82611b3a565b600182019150611cdb8286611abb565b9150611ce682611b3a565b600182019150611cf68285611abb565b9150611d0182611b3a565b600182019150611d118284611abb565b9a9950505050505050505050565b6000611d2b8287611abb565b9150611d3682611b3a565b600182019150611d468286611abb565b9150611d5182611b3a565b600182019150611d618285611abb565b9150611d6c82611b3a565b600182019150611d7c8284611abb565b9695505050505050565b6000611d928285611abb565b9150611d9d82611b3a565b6001820191506116898284611abb565b60208082528101610c5181602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000611c31565b60208082528101610c5181611df7565b602760f81b81526000611ab4565b6000611e5282611e39565b9150611e5e8284611abb565b91506112e682611e39565b600560fb1b81526000611ab4565b602960f81b81526000611ab4565b6b024a729a2a92a1024a72a27960a51b8152600c016000611ea68286611abb565b9150611eb182611e69565b9150611ebd8285611abb565b67052ac8298aa8aa6560c31b81526008019150611eda8284611abb565b9150611b8582611e77565b60608101611ef382866117b7565b611f0060208301856117a3565b8181036040830152611b8581846116ef565b660102ba422a922960cd1b815260005b5060070190565b6000611aec82611f12565b6602aa82220aa22960cd1b81526000611f22565b6000611f5382611f34565b9150611f5f8286611abb565b6401029a2aa160dd1b81526005019150611f798285611abb565b9150611b858284611abb565b60008154611f9281611b0e565b808552602085019450600182168015611fb25760018114611fc857611ff6565b60ff198316865260208215150286019350611ff6565b60008581526020902060005b83811015611ff057815488820152600190910190602001611fd4565b87019450505b50505092915050565b60006112e68383611f85565b6000612015825490565b808452602084019350836020820285016120358560009081526020902090565b8060005b85811015612067578484038952816120518582611fff565b60209a909a019994505060019182019101612039565b5091979650505050505050565b6040810161208282856117b7565b8181036020830152611689818461200b565b60006001600160401b038211156120ad576120ad611598565b5060209081020190565b8051610c5181611493565b60006120d061163a84612094565b838152905060208082019084028301858111156120ef576120ef600080fd5b835b81811015612113578061210488826120b7565b845250602092830192016120f1565b5050509392505050565b600082601f83011261213157612131600080fd5b81516116898482602086016120c2565b60006020828403121561215657612156600080fd5b81516001600160401b0381111561216f5761216f600080fd5b6116898482850161211d565b6000610c516121878381565b90565b6121938361217b565b815460001960089490940293841b1916921b91909117905550565b600061057f81848461218a565b81811015610995576121ce6000826121ae565b6001016121bb565b601f82111561057f576000818152602090206020601f850104810160208510156121fd5750805b61220f6020601f8601048301826121bb565b5050505050565b81516001600160401b0381111561222f5761222f611598565b6122398254611b0e565b6122448282856121d6565b6020601f83116001811461227857600084156122605750858201515b600019600886021c1981166002860217865550610db4565b600085815260208120601f198616915b828110156122a85788850151825560209485019460019092019101612288565b868310156122c45784890151600019601f89166008021c191682555b600160028802018855505050505050505050565b6000816122e7576122e7611a05565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000611c31565b60208082528101610c51816122ef565b605f60f81b81526000611ab4565b600061234b8286611abb565b915061235682612331565b91506123628285611abb565b9150611f798261233156fe7569642c20736368656d615549442c206372656174696f6e54696d657374616d702c2065787069726174696f6e54696d652c207265665549442c20726563697069656e742c2061747465737465722c20646174617569642c207265766f636174696f6e54696d652c207265766f6b65722c207265766f6361626c65a2646970667358221220330791534e9d564a09926bd93c299669da63e908a6d111f5509d89e126b9f43f64736f6c634300081300337265766f6b657220746578742c2075696420746578742c207265766f6b6564417420746578747569642074657874207072696d617279206b65792c20736368656d6155494420746578742c206372656174696f6e54696d657374616d7020746578742c2065787069726174696f6e54696d6520746578742c2072656655494420746578742c20726563697069656e7420746578742c20617474657374657220746578742c206461746120746578747569642074657874207072696d617279206b65792c207265766f636174696f6e54696d6520746578742c207265766f6b657220746578742c207265766f6361626c652074657874",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "TAS",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "notice": "The Tableland Attestation Service protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11556,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "tablelandContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITablelandTables)4963"
      },
      {
        "astId": 11559,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 11562,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "tables",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 11565,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "tableIDs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11567,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "tablesUpdates",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11569,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "tablesRowsCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ITablelandTables)4963": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}