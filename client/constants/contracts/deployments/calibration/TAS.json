{
  "address": "0x2d70e8Dd3C680CD8D0A857034e080ADE6Bb7220E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITASIndexer",
          "name": "_tableland",
          "type": "address"
        },
        {
          "internalType": "contract ISchemaRegistry",
          "name": "registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyRevoked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyRevokedOffchain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyTimestamped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeadlineExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAttestation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAttestations",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExpirationTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOffset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRevocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRevocations",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSchema",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVerifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Irrevocable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPayable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongSchema",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "dataBase64",
              "type": "string"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "bump",
          "type": "uint32"
        }
      ],
      "name": "_getUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "string",
                  "name": "dataBase64",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AttestationRequestData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct AttestationRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "attest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "string",
                  "name": "dataBase64",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AttestationRequestData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Signature",
              "name": "signature",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            }
          ],
          "internalType": "struct DelegatedAttestationRequest",
          "name": "delegatedRequest",
          "type": "tuple"
        }
      ],
      "name": "attestByDelegation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAttestTypeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "getAttestation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "dataBase64",
              "type": "string"
            }
          ],
          "internalType": "struct Attestation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevokeTypeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSchemaRegistry",
      "outputs": [
        {
          "internalType": "contract ISchemaRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newNonce",
          "type": "uint256"
        }
      ],
      "name": "increaseNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "isAttestationValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "string",
                  "name": "dataBase64",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AttestationRequestData[]",
              "name": "data",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MultiAttestationRequest[]",
          "name": "multiRequests",
          "type": "tuple[]"
        }
      ],
      "name": "multiAttest",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "string",
                  "name": "dataBase64",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AttestationRequestData[]",
              "name": "data",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Signature[]",
              "name": "signatures",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            }
          ],
          "internalType": "struct MultiDelegatedAttestationRequest[]",
          "name": "multiDelegatedRequests",
          "type": "tuple[]"
        }
      ],
      "name": "multiAttestByDelegation",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct RevocationRequestData[]",
              "name": "data",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MultiRevocationRequest[]",
          "name": "multiRequests",
          "type": "tuple[]"
        }
      ],
      "name": "multiRevoke",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct RevocationRequestData[]",
              "name": "data",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Signature[]",
              "name": "signatures",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "revoker",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            }
          ],
          "internalType": "struct MultiDelegatedRevocationRequest[]",
          "name": "multiDelegatedRequests",
          "type": "tuple[]"
        }
      ],
      "name": "multiRevokeByDelegation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "multiRevokeOffchain",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "multiTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct RevocationRequestData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct RevocationRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct RevocationRequestData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Signature",
              "name": "signature",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "revoker",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            }
          ],
          "internalType": "struct DelegatedRevocationRequest",
          "name": "delegatedRequest",
          "type": "tuple"
        }
      ],
      "name": "revokeByDelegation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "revokeOffchain",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "timestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e7d8c46d0eee163abdd386282ef3c6357cc019722e8eb30852f9ce206bc724e",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0x2d70e8Dd3C680CD8D0A857034e080ADE6Bb7220E",
    "transactionIndex": 7,
    "gasUsed": "129387809",
    "logsBloom": "0xfffffffffffffffffffffffffffffff7fffffffbffffffffffffffffffffffffffffffffffffefffffffffffffffffffffffbfffffffffffffffffffffffffffffffffffffbfffffffffffffffffffffffffbfffffffffffffffffffffffffffffefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffffeffffffffffffbffffffffffffffffffbffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffff7ffffffffffff7fffffffffffffffffffffffffffffffffffffffff7fffffffefffffffffbfffffffffffffffffffffffffffffffbffffffffffffffeffff7fffffffaffdffffffffffff",
    "blockHash": "0xd5dc33856226f7c736995947ab4141a270171fbfc336a4ffcdf6f3321c6ce80d",
    "transactionHash": "0x3e7d8c46d0eee163abdd386282ef3c6357cc019722e8eb30852f9ce206bc724e",
    "logs": [],
    "blockNumber": 948124,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1c3f0e8418e2F104bcDEB997a7045Bd5A075b687",
    "0x98f49F16Bc77bAa51e6c9f938BFc111462e1f90D"
  ],
  "numDeployments": 1,
  "solcInputHash": "1663970b7101576bbd241d48e0243975",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITASIndexer\",\"name\":\"_tableland\",\"type\":\"address\"},{\"internalType\":\"contract ISchemaRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRevokedOffchain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyTimestamped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAttestation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAttestations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpirationTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOffset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRevocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRevocations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSchema\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVerifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Irrevocable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSchema\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"dataBase64\",\"type\":\"string\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"bump\",\"type\":\"uint32\"}],\"name\":\"_getUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"dataBase64\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"dataBase64\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct DelegatedAttestationRequest\",\"name\":\"delegatedRequest\",\"type\":\"tuple\"}],\"name\":\"attestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAttestTypeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"dataBase64\",\"type\":\"string\"}],\"internalType\":\"struct Attestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevokeTypeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchemaRegistry\",\"outputs\":[{\"internalType\":\"contract ISchemaRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"increaseNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"isAttestationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"dataBase64\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiAttestationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"dataBase64\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct MultiDelegatedAttestationRequest[]\",\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiAttestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiRevocationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct MultiDelegatedRevocationRequest[]\",\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevokeByDelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"multiRevokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"multiTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct RevocationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct DelegatedRevocationRequest\",\"name\":\"delegatedRequest\",\"type\":\"tuple\"}],\"name\":\"revokeByDelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"revokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"_getUID((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes,string),uint32)\":{\"details\":\"Calculates a UID for a given attestation.\",\"params\":{\"attestation\":\"The input attestation.\",\"bump\":\"A bump value to use in case of a UID conflict.\"},\"returns\":{\"_0\":\"Attestation UID.\"}},\"attest((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)))\":{\"params\":{\"request\":\"The arguments of the attestation request.\"},\"returns\":{\"_0\":\"The UID of the new attestation. Example:     attest({         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",         data: {             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",             expirationTime: 0,             revocable: true,             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",             data: \\\"0xF00D\\\",             value: 0         }     })\"}},\"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"params\":{\"delegatedRequest\":\"The arguments of the delegated attestation request.\"},\"returns\":{\"_0\":\"The UID of the new attestation. Example:     attestByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         signature: {             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',         deadline: 1673891048     })\"}},\"constructor\":{\"details\":\"Creates a new TAS instance.\",\"params\":{\"registry\":\"The address of the global schema registry.\"}},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getAttestTypeHash()\":{\"returns\":{\"_0\":\"The EIP712 type hash for the attest function.\"}},\"getAttestation(bytes32)\":{\"params\":{\"uid\":\"The UID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"The attestation data members.\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"The domain separator used in the encoding of the signatures for attest, and revoke.\"}},\"getName()\":{\"returns\":{\"_0\":\"The EIP712 name.\"}},\"getNonce(address)\":{\"params\":{\"account\":\"The requested account.\"},\"returns\":{\"_0\":\"The current nonce.\"}},\"getRevokeTypeHash()\":{\"returns\":{\"_0\":\"The EIP712 type hash for the revoke function.\"}},\"getSchemaRegistry()\":{\"returns\":{\"_0\":\"The address of the global schema registry.\"}},\"increaseNonce(uint256)\":{\"params\":{\"newNonce\":\"The (higher) new value.\"}},\"isAttestationValid(bytes32)\":{\"params\":{\"uid\":\"The UID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"Whether an attestation exists.\"}},\"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)[])[])\":{\"params\":{\"multiRequests\":\"The arguments of the multi attestation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization.\"},\"returns\":{\"_0\":\"The UIDs of the new attestations. Example:     multiAttest([{         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 1000         },         {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 0,             revocable: false,             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',             data: '0x00',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: true,             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',             data: '0x12345678',             value: 0         },     }])\"}},\"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"params\":{\"multiDelegatedRequests\":\"The arguments of the delegated multi attestation requests. The requests should be     grouped by distinct schema ids to benefit from the best batching optimization.\"},\"returns\":{\"_0\":\"The UIDs of the new attestations. Example:     multiAttestByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         {             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: false,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x00',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',         deadline: 1673891048     }])\"}},\"multiRevoke((bytes32,(bytes32,uint256)[])[])\":{\"params\":{\"multiRequests\":\"The arguments of the multi revocation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization. Example:     multiRevoke([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',             value: 0         },     }])\"}},\"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"params\":{\"multiDelegatedRequests\":\"The arguments of the delegated multi revocation attestation requests. The requests     should be grouped by distinct schema ids to benefit from the best batching optimization. Example:     multiRevokeByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     }])\"}},\"multiRevokeOffchain(bytes32[])\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was revoked with.\"}},\"multiTimestamp(bytes32[])\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"revoke((bytes32,(bytes32,uint256)))\":{\"params\":{\"request\":\"The arguments of the revocation request. Example:     revoke({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',             value: 0         }     })\"}},\"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"params\":{\"delegatedRequest\":\"The arguments of the delegated revocation request. Example:     revokeByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',             value: 0         },         signature: {             v: 27,             r: '0xb593...7142',             s: '0x0f5b...2cce'         },         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     })\"}},\"revokeOffchain(bytes32)\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was revoked with.\"}},\"timestamp(bytes32)\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"TAS\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attest((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)))\":{\"notice\":\"Attests to a specific schema.\"},\"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"notice\":\"Attests to a specific schema via the provided ECDSA signature.\"},\"getAttestTypeHash()\":{\"notice\":\"Returns the EIP712 type hash for the attest function.\"},\"getAttestation(bytes32)\":{\"notice\":\"Returns an existing attestation by UID.\"},\"getDomainSeparator()\":{\"notice\":\"Returns the domain separator used in the encoding of the signatures for attest, and revoke.\"},\"getName()\":{\"notice\":\"Returns the EIP712 name.\"},\"getNonce(address)\":{\"notice\":\"Returns the current nonce per-account.\"},\"getRevokeTypeHash()\":{\"notice\":\"Returns the EIP712 type hash for the revoke function.\"},\"getSchemaRegistry()\":{\"notice\":\"Returns the address of the global schema registry.\"},\"increaseNonce(uint256)\":{\"notice\":\"Provides users an option to invalidate nonces by increasing their nonces to (higher) new values.\"},\"isAttestationValid(bytes32)\":{\"notice\":\"Checks whether an attestation exists.\"},\"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)[])[])\":{\"notice\":\"Attests to multiple schemas.\"},\"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"notice\":\"Attests to multiple schemas using via provided ECDSA signatures.\"},\"multiRevoke((bytes32,(bytes32,uint256)[])[])\":{\"notice\":\"Revokes existing attestations to multiple schemas.\"},\"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"notice\":\"Revokes existing attestations to multiple schemas via provided ECDSA signatures.\"},\"multiRevokeOffchain(bytes32[])\":{\"notice\":\"Revokes the specified multiple bytes32 data.\"},\"multiTimestamp(bytes32[])\":{\"notice\":\"Timestamps the specified multiple bytes32 data.\"},\"revoke((bytes32,(bytes32,uint256)))\":{\"notice\":\"Revokes an existing attestation to a specific schema.\"},\"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"notice\":\"Revokes an existing attestation to a specific schema via the provided ECDSA signature.\"},\"revokeOffchain(bytes32)\":{\"notice\":\"Revokes the specified bytes32 data.\"},\"timestamp(bytes32)\":{\"notice\":\"Timestamps the specified bytes32 data.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"The Tableland Attestation Service protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TAS.sol\":\"TAS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidTAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n    string dataBase64;\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x3a8284675c5fe312aeabffb195dfa388645f8fc6c84a5238e007694a8954fec7\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\nstruct SchemaRegistrationInput {\\n    string schema;\\n    string schemaName;\\n    string schemaDescription;\\n    string[] categories;\\n    ISchemaResolver schemaResolver;\\n    bool revocable;\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    function register(\\n        SchemaRegistrationInput memory input\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xde2a2b64e934247a6631bd82bfdaddb64afb80f6212e5247e968d9b0723b3a3c\",\"license\":\"MIT\"},\"contracts/ITAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    string dataBase64;\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title ITAS\\n/// @notice TAS - Tableland Attestation Service interface.\\ninterface ITAS {\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7912eceb3e99ddcbbc6f268a7067f83d47f3bec78b43fc1bb1c5266ca36d1b7d\",\"license\":\"MIT\"},\"contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x51a65a7dfe211b1b014d26523d0bd6680e7e85de5e5a66b13df2a167dd2702fb\",\"license\":\"MIT\"},\"contracts/TAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {EIP1271Verifier} from \\\"./eip1271/EIP1271Verifier.sol\\\";\\n\\nimport {ISchemaResolver} from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\nimport {ITASIndexer} from \\\"./interfaces/ITASIndexer.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    AccessDenied,\\n    EMPTY_UID,\\n    Signature,\\n    InvalidLength,\\n    NotFound,\\n    NO_EXPIRATION_TIME,\\n    uncheckedInc\\n} from \\\"./Common.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    Attestation,\\n    AttestationRequest,\\n    AttestationRequestData,\\n    DelegatedAttestationRequest,\\n    DelegatedRevocationRequest,\\n    ITAS,\\n    MultiAttestationRequest,\\n    MultiDelegatedAttestationRequest,\\n    MultiDelegatedRevocationRequest,\\n    MultiRevocationRequest,\\n    RevocationRequest,\\n    RevocationRequestData\\n} from \\\"./ITAS.sol\\\";\\n\\nimport {Semver} from \\\"./Semver.sol\\\";\\n\\nimport {ISchemaRegistry, SchemaRecord} from \\\"./ISchemaRegistry.sol\\\";\\n\\n/// @title TAS\\n/// @notice The Tableland Attestation Service protocol.\\ncontract TAS is ITAS, Semver, EIP1271Verifier {\\n    using Address for address payable;\\n\\n    error AlreadyRevoked();\\n    error AlreadyRevokedOffchain();\\n    error AlreadyTimestamped();\\n    error InsufficientValue();\\n    error InvalidAttestation();\\n    error InvalidAttestations();\\n    error InvalidExpirationTime();\\n    error InvalidOffset();\\n    error InvalidRegistry();\\n    error InvalidRevocation();\\n    error InvalidRevocations();\\n    error InvalidSchema();\\n    error InvalidVerifier();\\n    error Irrevocable();\\n    error NotPayable();\\n    error WrongSchema();\\n\\n    /// @notice A struct representing an internal attestation result.\\n    struct AttestationsResult {\\n        uint256 usedValue; // Total ETH amount that was sent to resolvers.\\n        bytes32[] uids; // UIDs of the new attestations.\\n    }\\n\\n    // The global schema registry.\\n    ISchemaRegistry private immutable _schemaRegistry;\\n\\n    ITASIndexer private tableland;\\n\\n    // The global mapping between attestations and their UIDs.\\n    mapping(bytes32 uid => Attestation attestation) private _db;\\n\\n    // The global mapping between data and their timestamps.\\n    mapping(bytes32 data => uint64 timestamp) private _timestamps;\\n\\n    // The global mapping between data and their revocation timestamps.\\n    mapping(address revoker => mapping(bytes32 data => uint64 timestamp) timestamps)\\n        private _revocationsOffchain;\\n\\n    /// @dev Creates a new TAS instance.\\n    /// @param registry The address of the global schema registry.\\n    constructor(\\n        ITASIndexer _tableland,\\n        ISchemaRegistry registry\\n    ) Semver(0, 0, 1) EIP1271Verifier(\\\"TAS\\\", \\\"0.0.1\\\") {\\n        if (address(registry) == address(0)) {\\n            revert InvalidRegistry();\\n        }\\n\\n        _schemaRegistry = registry;\\n\\n        tableland = _tableland;\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function getSchemaRegistry() external view returns (ISchemaRegistry) {\\n        return _schemaRegistry;\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32) {\\n        AttestationRequestData[] memory data = new AttestationRequestData[](1);\\n        data[0] = request.data;\\n\\n        return\\n            _attest(request.schema, data, msg.sender, msg.value, true).uids[0];\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32) {\\n        _verifyAttest(delegatedRequest);\\n\\n        AttestationRequestData[] memory data = new AttestationRequestData[](1);\\n        data[0] = delegatedRequest.data;\\n\\n        return\\n            _attest(\\n                delegatedRequest.schema,\\n                data,\\n                delegatedRequest.attester,\\n                msg.value,\\n                true\\n            ).uids[0];\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory) {\\n        // Since a multi-attest call is going to make multiple attestations for multiple schemas, we'd need to collect\\n        // all the returned UIDs into a single list.\\n        uint256 length = multiRequests.length;\\n        bytes32[][] memory totalUids = new bytes32[][](multiRequests.length);\\n        uint256 totalUidsCount = 0;\\n\\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. PlTASe note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 availableValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\\n            // last and final batch).\\n            bool last;\\n            unchecked {\\n                last = i == length - 1;\\n            }\\n\\n            // Process the current batch of attestations.\\n            MultiAttestationRequest calldata multiRequest = multiRequests[i];\\n\\n            // Ensure that data isn't empty.\\n            if (multiRequest.data.length == 0) {\\n                revert InvalidLength();\\n            }\\n\\n            AttestationsResult memory res = _attest(\\n                multiRequest.schema,\\n                multiRequest.data,\\n                msg.sender,\\n                availableValue,\\n                last\\n            );\\n\\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\\n            availableValue -= res.usedValue;\\n\\n            // Collect UIDs (and merge them later).\\n            totalUids[i] = res.uids;\\n            unchecked {\\n                totalUidsCount += res.uids.length;\\n            }\\n        }\\n\\n        // Merge all the collected UIDs and return them as a flatten array.\\n        return _mergeUIDs(totalUids, totalUidsCount);\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory) {\\n        // Since a multi-attest call is going to make multiple attestations for multiple schemas, we'd need to collect\\n        // all the returned UIDs into a single list.\\n        uint256 length = multiDelegatedRequests.length;\\n        bytes32[][] memory totalUids = new bytes32[][](length);\\n        uint256 totalUidsCount = 0;\\n\\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. PlTASe note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 availableValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\\n            // last and final batch).\\n            bool last;\\n            unchecked {\\n                last = i == length - 1;\\n            }\\n\\n            MultiDelegatedAttestationRequest\\n                calldata multiDelegatedRequest = multiDelegatedRequests[i];\\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\\n\\n            // Ensure that no inputs are missing.\\n            uint256 dataLength = data.length;\\n            if (\\n                dataLength == 0 ||\\n                dataLength != multiDelegatedRequest.signatures.length\\n            ) {\\n                revert InvalidLength();\\n            }\\n\\n            // Verify signatures. PlTASe note that the signatures are assumed to be signed with incrTASing nonces.\\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\\n                _verifyAttest(\\n                    DelegatedAttestationRequest({\\n                        schema: multiDelegatedRequest.schema,\\n                        data: data[j],\\n                        signature: multiDelegatedRequest.signatures[j],\\n                        attester: multiDelegatedRequest.attester,\\n                        deadline: multiDelegatedRequest.deadline\\n                    })\\n                );\\n            }\\n\\n            // Process the current batch of attestations.\\n            AttestationsResult memory res = _attest(\\n                multiDelegatedRequest.schema,\\n                data,\\n                multiDelegatedRequest.attester,\\n                availableValue,\\n                last\\n            );\\n\\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\\n            availableValue -= res.usedValue;\\n\\n            // Collect UIDs (and merge them later).\\n            totalUids[i] = res.uids;\\n            unchecked {\\n                totalUidsCount += res.uids.length;\\n            }\\n        }\\n\\n        // Merge all the collected UIDs and return them as a flatten array.\\n        return _mergeUIDs(totalUids, totalUidsCount);\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function revoke(RevocationRequest calldata request) external payable {\\n        RevocationRequestData[] memory data = new RevocationRequestData[](1);\\n        data[0] = request.data;\\n\\n        _revoke(request.schema, data, msg.sender, msg.value, true);\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable {\\n        _verifyRevoke(delegatedRequest);\\n\\n        RevocationRequestData[] memory data = new RevocationRequestData[](1);\\n        data[0] = delegatedRequest.data;\\n\\n        _revoke(\\n            delegatedRequest.schema,\\n            data,\\n            delegatedRequest.revoker,\\n            msg.value,\\n            true\\n        );\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable {\\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. PlTASe note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 availableValue = msg.value;\\n\\n        uint256 length = multiRequests.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\\n            // last and final batch).\\n            bool last;\\n            unchecked {\\n                last = i == length - 1;\\n            }\\n\\n            MultiRevocationRequest calldata multiRequest = multiRequests[i];\\n\\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\\n            availableValue -= _revoke(\\n                multiRequest.schema,\\n                multiRequest.data,\\n                msg.sender,\\n                availableValue,\\n                last\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable {\\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. PlTASe note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 availableValue = msg.value;\\n\\n        uint256 length = multiDelegatedRequests.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\\n            // last and final batch).\\n            bool last;\\n            unchecked {\\n                last = i == length - 1;\\n            }\\n\\n            MultiDelegatedRevocationRequest\\n                memory multiDelegatedRequest = multiDelegatedRequests[i];\\n            RevocationRequestData[] memory data = multiDelegatedRequest.data;\\n\\n            // Ensure that no inputs are missing.\\n            uint256 dataLength = data.length;\\n            if (\\n                dataLength == 0 ||\\n                dataLength != multiDelegatedRequest.signatures.length\\n            ) {\\n                revert InvalidLength();\\n            }\\n\\n            // Verify signatures. PlTASe note that the signatures are assumed to be signed with incrTASing nonces.\\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\\n                _verifyRevoke(\\n                    DelegatedRevocationRequest({\\n                        schema: multiDelegatedRequest.schema,\\n                        data: data[j],\\n                        signature: multiDelegatedRequest.signatures[j],\\n                        revoker: multiDelegatedRequest.revoker,\\n                        deadline: multiDelegatedRequest.deadline\\n                    })\\n                );\\n            }\\n\\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\\n            availableValue -= _revoke(\\n                multiDelegatedRequest.schema,\\n                data,\\n                multiDelegatedRequest.revoker,\\n                availableValue,\\n                last\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function timestamp(bytes32 data) external returns (uint64) {\\n        uint64 time = _time();\\n\\n        _timestamp(data, time);\\n\\n        return time;\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function revokeOffchain(bytes32 data) external returns (uint64) {\\n        uint64 time = _time();\\n\\n        _revokeOffchain(msg.sender, data, time);\\n\\n        return time;\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64) {\\n        uint64 time = _time();\\n\\n        uint256 length = data.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            _revokeOffchain(msg.sender, data[i], time);\\n        }\\n\\n        return time;\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64) {\\n        uint64 time = _time();\\n\\n        uint256 length = data.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            _timestamp(data[i], time);\\n        }\\n\\n        return time;\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory) {\\n        return _db[uid];\\n    }\\n\\n    /// @inheritdoc ITAS\\n    function isAttestationValid(bytes32 uid) public view returns (bool) {\\n        return _db[uid].uid != EMPTY_UID;\\n    }\\n\\n    /// @dev Attests to a specific schema.\\n    /// @param schemaUID The unique identifier of the schema to attest to.\\n    /// @param data The arguments of the attestation requests.\\n    /// @param attester The attesting account.\\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\\n    /// @param last Whether this is the last attestations/revocations set.\\n    /// @return The UID of the new attestations and the total sent ETH amount.\\n    function _attest(\\n        bytes32 schemaUID,\\n        AttestationRequestData[] memory data,\\n        address attester,\\n        uint256 availableValue,\\n        bool last\\n    ) private returns (AttestationsResult memory) {\\n        uint256 length = data.length;\\n\\n        AttestationsResult memory res;\\n        res.uids = new bytes32[](length);\\n\\n        // Ensure that we aren't attempting to attest to a non-existing schema.\\n        SchemaRecord memory schemaRecord = _schemaRegistry.getSchema(schemaUID);\\n        if (schemaRecord.uid == EMPTY_UID) {\\n            revert InvalidSchema();\\n        }\\n\\n        Attestation[] memory attestations = new Attestation[](length);\\n        uint256[] memory values = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            AttestationRequestData memory request = data[i];\\n\\n            // Ensure that either no expiration time was set or that it was set in the future.\\n            if (\\n                request.expirationTime != NO_EXPIRATION_TIME &&\\n                request.expirationTime <= _time()\\n            ) {\\n                revert InvalidExpirationTime();\\n            }\\n\\n            // Ensure that we aren't trying to make a revocable attestation for a non-revocable schema.\\n            if (!schemaRecord.revocable && request.revocable) {\\n                revert Irrevocable();\\n            }\\n\\n            Attestation memory attestation = Attestation({\\n                uid: EMPTY_UID,\\n                schema: schemaUID,\\n                refUID: request.refUID,\\n                time: _time(),\\n                expirationTime: request.expirationTime,\\n                revocationTime: 0,\\n                recipient: request.recipient,\\n                attester: attester,\\n                revocable: request.revocable,\\n                data: request.data,\\n                dataBase64: request.dataBase64\\n            });\\n\\n            // Look for the first non-existing UID (and use a bump seed/nonce in the rare case of a conflict).\\n            bytes32 uid;\\n            uint32 bump = 0;\\n            while (true) {\\n                uid = _getUID(attestation, bump);\\n                if (_db[uid].uid == EMPTY_UID) {\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++bump;\\n                }\\n            }\\n            attestation.uid = uid;\\n\\n            _db[uid] = attestation;\\n\\n            if (request.refUID != EMPTY_UID) {\\n                // Ensure that we aren't trying to attest to a non-existing referenced UID.\\n                if (!isAttestationValid(request.refUID)) {\\n                    revert NotFound();\\n                }\\n            }\\n\\n            attestations[i] = attestation;\\n            values[i] = request.value;\\n\\n            res.uids[i] = uid;\\n\\n            tableland.AttestationInserted(attestation);\\n        }\\n\\n        res.usedValue = _resolveAttestations(\\n            schemaRecord,\\n            attestations,\\n            values,\\n            false,\\n            availableValue,\\n            last\\n        );\\n\\n        return res;\\n    }\\n\\n    /// @dev Revokes an existing attestation to a specific schema.\\n    /// @param schemaUID The unique identifier of the schema to attest to.\\n    /// @param data The arguments of the revocation requests.\\n    /// @param revoker The revoking account.\\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\\n    /// @param last Whether this is the last attestations/revocations set.\\n    /// @return Returns the total sent ETH amount.\\n    function _revoke(\\n        bytes32 schemaUID,\\n        RevocationRequestData[] memory data,\\n        address revoker,\\n        uint256 availableValue,\\n        bool last\\n    ) private returns (uint256) {\\n        // Ensure that a non-existing schema ID wasn't passed by accident.\\n        SchemaRecord memory schemaRecord = _schemaRegistry.getSchema(schemaUID);\\n        if (schemaRecord.uid == EMPTY_UID) {\\n            revert InvalidSchema();\\n        }\\n\\n        uint256 length = data.length;\\n        Attestation[] memory attestations = new Attestation[](length);\\n        uint256[] memory values = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            RevocationRequestData memory request = data[i];\\n\\n            Attestation storage attestation = _db[request.uid];\\n\\n            // Ensure that we aren't attempting to revoke a non-existing attestation.\\n            if (attestation.uid == EMPTY_UID) {\\n                revert NotFound();\\n            }\\n\\n            // Ensure that a wrong schema ID wasn't passed by accident.\\n            if (attestation.schema != schemaUID) {\\n                revert InvalidSchema();\\n            }\\n\\n            // Allow only original attesters to revoke their attestations.\\n            if (attestation.attester != revoker) {\\n                revert AccessDenied();\\n            }\\n\\n            // PlTASe note that also checking of the schema itself is revocable is unnecessary, since it's not possible to\\n            // make revocable attestations to an irrevocable schema.\\n            if (!attestation.revocable) {\\n                revert Irrevocable();\\n            }\\n\\n            // Ensure that we aren't trying to revoke the same attestation twice.\\n            if (attestation.revocationTime != 0) {\\n                revert AlreadyRevoked();\\n            }\\n            attestation.revocationTime = _time();\\n\\n            attestations[i] = attestation;\\n            values[i] = request.value;\\n\\n            tableland.AttestationRevokedUpdate(\\n                attestation.uid,\\n                revoker,\\n                attestation.revocationTime\\n            );\\n        }\\n\\n        return\\n            _resolveAttestations(\\n                schemaRecord,\\n                attestations,\\n                values,\\n                true,\\n                availableValue,\\n                last\\n            );\\n    }\\n\\n    /// @dev Resolves a new attestation or a revocation of an existing attestation.\\n    /// @param schemaRecord The schema of the attestation.\\n    /// @param attestation The data of the attestation to make/revoke.\\n    /// @param value An explicit ETH amount to send to the resolver.\\n    /// @param isRevocation Whether to resolve an attestation or its revocation.\\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\\n    /// @param last Whether this is the last attestations/revocations set.\\n    /// @return Returns the total sent ETH amount.\\n    function _resolveAttestation(\\n        SchemaRecord memory schemaRecord,\\n        Attestation memory attestation,\\n        uint256 value,\\n        bool isRevocation,\\n        uint256 availableValue,\\n        bool last\\n    ) private returns (uint256) {\\n        ISchemaResolver resolver = schemaRecord.resolver;\\n        if (address(resolver) == address(0)) {\\n            // Ensure that we don't accept payments if there is no resolver.\\n            if (value != 0) {\\n                revert NotPayable();\\n            }\\n\\n            if (last) {\\n                _refund(availableValue);\\n            }\\n\\n            return 0;\\n        }\\n\\n        // Ensure that we don't accept payments which can't be forwarded to the resolver.\\n        if (value != 0) {\\n            if (!resolver.isPayable()) {\\n                revert NotPayable();\\n            }\\n\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            if (value > availableValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Ensure to deduct the sent value explicitly.\\n            unchecked {\\n                availableValue -= value;\\n            }\\n        }\\n\\n        if (isRevocation) {\\n            if (!resolver.revoke{value: value}(attestation)) {\\n                revert InvalidRevocation();\\n            }\\n        } else if (!resolver.attest{value: value}(attestation)) {\\n            revert InvalidAttestation();\\n        }\\n\\n        if (last) {\\n            _refund(availableValue);\\n        }\\n\\n        return value;\\n    }\\n\\n    /// @dev Resolves multiple attestations or revocations of existing attestations.\\n    /// @param schemaRecord The schema of the attestation.\\n    /// @param attestations The data of the attestations to make/revoke.\\n    /// @param values Explicit ETH amounts to send to the resolver.\\n    /// @param isRevocation Whether to resolve an attestation or its revocation.\\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\\n    /// @param last Whether this is the last attestations/revocations set.\\n    /// @return Returns the total sent ETH amount.\\n    function _resolveAttestations(\\n        SchemaRecord memory schemaRecord,\\n        Attestation[] memory attestations,\\n        uint256[] memory values,\\n        bool isRevocation,\\n        uint256 availableValue,\\n        bool last\\n    ) private returns (uint256) {\\n        uint256 length = attestations.length;\\n        if (length == 1) {\\n            return\\n                _resolveAttestation(\\n                    schemaRecord,\\n                    attestations[0],\\n                    values[0],\\n                    isRevocation,\\n                    availableValue,\\n                    last\\n                );\\n        }\\n\\n        ISchemaResolver resolver = schemaRecord.resolver;\\n        if (address(resolver) == address(0)) {\\n            // Ensure that we don't accept payments if there is no resolver.\\n            for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n                if (values[i] != 0) {\\n                    revert NotPayable();\\n                }\\n            }\\n\\n            if (last) {\\n                _refund(availableValue);\\n            }\\n\\n            return 0;\\n        }\\n\\n        uint256 totalUsedValue = 0;\\n        bool isResolverPayable = resolver.isPayable();\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            uint256 value = values[i];\\n\\n            // Ensure that we don't accept payments which can't be forwarded to the resolver.\\n            if (value == 0) {\\n                continue;\\n            }\\n\\n            if (!isResolverPayable) {\\n                revert NotPayable();\\n            }\\n\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            if (value > availableValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Ensure to deduct the sent value explicitly and add it to the total used value by the batch.\\n            unchecked {\\n                availableValue -= value;\\n                totalUsedValue += value;\\n            }\\n        }\\n\\n        if (isRevocation) {\\n            if (\\n                !resolver.multiRevoke{value: totalUsedValue}(\\n                    attestations,\\n                    values\\n                )\\n            ) {\\n                revert InvalidRevocations();\\n            }\\n        } else if (\\n            !resolver.multiAttest{value: totalUsedValue}(attestations, values)\\n        ) {\\n            revert InvalidAttestations();\\n        }\\n\\n        if (last) {\\n            _refund(availableValue);\\n        }\\n\\n        return totalUsedValue;\\n    }\\n\\n    /// @dev Calculates a UID for a given attestation.\\n    /// @param attestation The input attestation.\\n    /// @param bump A bump value to use in case of a UID conflict.\\n    /// @return Attestation UID.\\n    function _getUID(\\n        Attestation memory attestation,\\n        uint32 bump\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    attestation.schema,\\n                    attestation.recipient,\\n                    attestation.attester,\\n                    attestation.time,\\n                    attestation.expirationTime,\\n                    attestation.revocable,\\n                    attestation.refUID,\\n                    attestation.data,\\n                    bump\\n                )\\n            );\\n    }\\n\\n    function getTime() external view returns (uint256) {\\n        return _time();\\n    }\\n\\n    /// @dev Refunds remaining ETH amount to the attester.\\n    /// @param remainingValue The remaining ETH amount that was not sent to the resolver.\\n    function _refund(uint256 remainingValue) private {\\n        if (remainingValue > 0) {\\n            // Using a regular transfer here might revert, for some non-EOA attesters, due to exceeding of the 2300\\n            // gas limit which is why we're using call instead (via sendValue), which the 2300 gas limit does not\\n            // apply for.\\n            payable(msg.sender).sendValue(remainingValue);\\n        }\\n    }\\n\\n    /// @dev Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @param time The timestamp.\\n    function _timestamp(bytes32 data, uint64 time) private {\\n        if (_timestamps[data] != 0) {\\n            revert AlreadyTimestamped();\\n        }\\n\\n        _timestamps[data] = time;\\n\\n        tableland.Timestamped(data, time);\\n    }\\n\\n    /// @dev Revokes the specified bytes32 data.\\n    /// @param revoker The revoking account.\\n    /// @param data The data to revoke.\\n    /// @param time The timestamp the data was revoked with.\\n    function _revokeOffchain(\\n        address revoker,\\n        bytes32 data,\\n        uint64 time\\n    ) private {\\n        mapping(bytes32 data => uint64 timestamp)\\n            storage revocations = _revocationsOffchain[revoker];\\n\\n        if (revocations[data] != 0) {\\n            revert AlreadyRevokedOffchain();\\n        }\\n\\n        revocations[data] = time;\\n\\n        tableland.RevokedOffChain(revoker, data, time);\\n    }\\n\\n    /// @dev Merges lists of UIDs.\\n    /// @param uidLists The provided lists of UIDs.\\n    /// @param uidsCount Total UIDs count.\\n    /// @return A merged and flatten list of all the UIDs.\\n    function _mergeUIDs(\\n        bytes32[][] memory uidLists,\\n        uint256 uidsCount\\n    ) private pure returns (bytes32[] memory) {\\n        bytes32[] memory uids = new bytes32[](uidsCount);\\n\\n        uint256 currentIndex = 0;\\n        uint256 uidListLength = uidLists.length;\\n        for (uint256 i = 0; i < uidListLength; i = uncheckedInc(i)) {\\n            bytes32[] memory currentUids = uidLists[i];\\n            uint256 currentUidsLength = currentUids.length;\\n            for (uint256 j = 0; j < currentUidsLength; j = uncheckedInc(j)) {\\n                uids[currentIndex] = currentUids[j];\\n\\n                unchecked {\\n                    ++currentIndex;\\n                }\\n            }\\n        }\\n\\n        return uids;\\n    }\\n}\\n\",\"keccak256\":\"0xb6de8bb2f49645e3986093e0bc0bafa47a05b6dbede2c921d09e985944e19aff\",\"license\":\"MIT\"},\"contracts/eip1271/EIP1271Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    AttestationRequestData,\\n    DelegatedAttestationRequest,\\n    DelegatedRevocationRequest,\\n    RevocationRequestData\\n} from \\\"../ITAS.sol\\\";\\n\\nimport {DeadlineExpired, NO_EXPIRATION_TIME, Signature, InvalidSignature} from \\\"../Common.sol\\\";\\n\\n/// @title EIP1271Verifier\\n/// @notice EIP1271Verifier typed signatures verifier for EAS delegated attestations.\\nabstract contract EIP1271Verifier is EIP712 {\\n    using Address for address;\\n\\n    error InvalidNonce();\\n\\n    // The hash of the data type used to relay calls to the attest function. It's the value of\\n    // keccak256(\\\"Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint256 nonce,uint64 deadline)\\\").\\n    bytes32 private constant ATTEST_TYPEHASH =\\n        0xf83bb2b0ede93a840239f7e701a54d9bc35f03701f51ae153d601c6947ff3d3f;\\n\\n    // The hash of the data type used to relay calls to the revoke function. It's the value of\\n    // keccak256(\\\"Revoke(bytes32 schema,bytes32 uid,uint256 value,uint256 nonce,uint64 deadline)\\\").\\n    bytes32 private constant REVOKE_TYPEHASH =\\n        0x2d4116d8c9824e4c316453e5c2843a1885580374159ce8768603c49085ef424c;\\n\\n    // The user readable name of the signing domain.\\n    string private _name;\\n\\n    // Replay protection nonces.\\n    mapping(address attester => uint256 nonce) private _nonces;\\n\\n    /// @dev Creates a new EIP1271Verifier instance.\\n    /// @param version The current major version of the signing domain\\n    constructor(\\n        string memory name,\\n        string memory version\\n    ) EIP712(name, version) {\\n        _name = name;\\n    }\\n\\n    /// @notice Returns the domain separator used in the encoding of the signatures for attest, and revoke.\\n    /// @return The domain separator used in the encoding of the signatures for attest, and revoke.\\n    function getDomainSeparator() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /// @notice Returns the current nonce per-account.\\n    /// @param account The requested account.\\n    /// @return The current nonce.\\n    function getNonce(address account) external view returns (uint256) {\\n        return _nonces[account];\\n    }\\n\\n    /// @notice Returns the EIP712 type hash for the attest function.\\n    /// @return The EIP712 type hash for the attest function.\\n    function getAttestTypeHash() external pure returns (bytes32) {\\n        return ATTEST_TYPEHASH;\\n    }\\n\\n    /// @notice Returns the EIP712 type hash for the revoke function.\\n    /// @return The EIP712 type hash for the revoke function.\\n    function getRevokeTypeHash() external pure returns (bytes32) {\\n        return REVOKE_TYPEHASH;\\n    }\\n\\n    /// @notice Returns the EIP712 name.\\n    /// @return The EIP712 name.\\n    function getName() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @notice Provides users an option to invalidate nonces by increasing their nonces to (higher) new values.\\n    /// @param newNonce The (higher) new value.\\n    function increaseNonce(uint256 newNonce) external {\\n        if (newNonce <= _nonces[msg.sender]) {\\n            revert InvalidNonce();\\n        }\\n\\n        _nonces[msg.sender] = newNonce;\\n    }\\n\\n    /// @dev Verifies delegated attestation request.\\n    /// @param request The arguments of the delegated attestation request.\\n    function _verifyAttest(\\n        DelegatedAttestationRequest memory request\\n    ) internal {\\n        if (\\n            request.deadline != NO_EXPIRATION_TIME &&\\n            request.deadline <= _time()\\n        ) {\\n            revert DeadlineExpired();\\n        }\\n\\n        AttestationRequestData memory data = request.data;\\n        Signature memory signature = request.signature;\\n\\n        uint256 nonce;\\n        unchecked {\\n            nonce = _nonces[request.attester]++;\\n        }\\n\\n        bytes32 hash = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    ATTEST_TYPEHASH,\\n                    request.schema,\\n                    data.recipient,\\n                    data.expirationTime,\\n                    data.revocable,\\n                    data.refUID,\\n                    keccak256(data.data),\\n                    data.value,\\n                    nonce,\\n                    request.deadline\\n                )\\n            )\\n        );\\n        if (\\n            !SignatureChecker.isValidSignatureNow(\\n                request.attester,\\n                hash,\\n                abi.encodePacked(signature.r, signature.s, signature.v)\\n            )\\n        ) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /// @dev Verifies delegated revocation request.\\n    /// @param request The arguments of the delegated revocation request.\\n    function _verifyRevoke(DelegatedRevocationRequest memory request) internal {\\n        if (\\n            request.deadline != NO_EXPIRATION_TIME &&\\n            request.deadline <= _time()\\n        ) {\\n            revert DeadlineExpired();\\n        }\\n\\n        RevocationRequestData memory data = request.data;\\n        Signature memory signature = request.signature;\\n\\n        uint256 nonce;\\n        unchecked {\\n            nonce = _nonces[request.revoker]++;\\n        }\\n\\n        bytes32 hash = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    REVOKE_TYPEHASH,\\n                    request.schema,\\n                    data.uid,\\n                    data.value,\\n                    nonce,\\n                    request.deadline\\n                )\\n            )\\n        );\\n        if (\\n            !SignatureChecker.isValidSignatureNow(\\n                request.revoker,\\n                hash,\\n                abi.encodePacked(signature.r, signature.s, signature.v)\\n            )\\n        ) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /// @dev Returns the current's block timestamp. This method is overridden during tests and used to simulate the\\n    ///     current block time.\\n    function _time() internal view virtual returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1e3d358384030ada46f30f75404a3cde79d4d1261c6e7a23500a0d86045ead\",\"license\":\"MIT\"},\"contracts/interfaces/ITASIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport {Attestation} from \\\"../ITAS.sol\\\";\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ITASIndexer {\\n    function AttestationInserted(Attestation memory attestation) external;\\n\\n    function AttestationRevokedUpdate(\\n        bytes32 uid,\\n        address revoker,\\n        uint256 revocationTime\\n    ) external;\\n\\n    function Timestamped(bytes32 uid, uint256 time) external;\\n\\n    function RevokedOffChain(\\n        address revoker,\\n        bytes32 uid,\\n        uint256 time\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d62b843160203ea9b75cdca57fd36a71ef250760bafb3311c966a8ff633e367\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x41ca4d09299123200e38fae5b4f6767d0385271609b791cefac391641585c142\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101e06040523480156200001257600080fd5b5060405162004c2c38038062004c2c833981016040819052620000359162000268565b604080518082018252600381526254415360e81b60208083019190915282518084019093526005835264302e302e3160d81b908301526000608081905260a0819052600160c05290919082908290620000909083906200013d565b61018052620000a18160016200013d565b6101a052815160208084019190912061014052815190820120610160524661010052620000cd62000176565b60e052505030610120526002620000e58382620003b6565b5050506001600160a01b03811662000110576040516311a1e69760e01b815260040160405180910390fd5b6001600160a01b039081166101c052600480546001600160a01b03191692909116919091179055620005b3565b60006020835110156200015d576200015583620001d3565b905062000170565b816200016a8482620003b6565b5060ff90505b92915050565b6101405161016051604051600092620001b8927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f924690309060200162000499565b60405160208183030381529060405280519060200120905090565b600080829050601f815111156200020a578260405163305a27a960e01b81526004016200020191906200054a565b60405180910390fd5b805162000217826200056f565b179392505050565b90565b60006001600160a01b03821662000170565b6000620001708262000222565b6200024c8162000234565b81146200025857600080fd5b50565b8051620001708162000241565b60008060408385031215620002805762000280600080fd5b60006200028e85856200025b565b9250506020620002a1858286016200025b565b9150509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b600281046001821680620002ec57607f821691505b602082108103620003015762000301620002c1565b50919050565b6000620001706200021f8381565b620003208362000307565b815460001960089490940293841b1916921b91909117905550565b60006200034a81848462000315565b505050565b818110156200036e57620003656000826200033b565b6001016200034f565b5050565b601f8211156200034a576000818152602090206020601f850104810160208510156200039b5750805b620003af6020601f8601048301826200034f565b5050505050565b81516001600160401b03811115620003d257620003d2620002ab565b620003de8254620002d7565b620003eb82828562000372565b6020601f831160018114620004225760008415620004095750858201515b600019600886021c19811660028602178655506200047e565b600085815260208120601f198616915b8281101562000454578885015182556020948501946001909201910162000432565b86831015620004715784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b805b82525050565b620004888162000222565b60a08101620004a9828862000486565b620004b8602083018762000486565b620004c7604083018662000486565b620004d6606083018562000486565b620004e560808301846200048e565b9695505050505050565b60005b838110156200050c578181015183820152602001620004f2565b50506000910152565b600062000520825190565b80845260208401935062000539818560208601620004ef565b601f01601f19169290920192915050565b602080825281016200055d818462000515565b9392505050565b600062000170825190565b60006200057a825190565b60208301620005898162000564565b92506020821015620005ac57620005a7600019836020036008021b90565b831692505b5050919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516145e462000648600039600081816104950152818161127401526119ad01526000610b0401526000610ada0152600061283c0152600061281b015260006122c3015260006122ed01526000612317015260006109e2015260006109b90152600061099001526145e46000f3fe6080604052600436106101665760003560e01c806379f7573a116100d1578063cf190f341161008a578063e30bb56311610064578063e30bb56314610415578063e71ff36514610451578063ed24911d14610471578063f10b5cc81461048657600080fd5b8063cf190f34146103cf578063d1d7facd146103ef578063d96445021461040257600080fd5b806379f7573a1461030157806384b0196e14610321578063a3112a6414610349578063a641709c14610376578063a6d4dbc714610389578063b83010d31461039c57600080fd5b80634692626711610123578063469262671461026a5780634cb7e9e51461027d5780634d0030701461029057806354fd4d50146102b0578063557ed1ba146102c5578063619bf5a4146102e157600080fd5b806301de5e211461016b5780630eabf6601461019457806312b11a17146101a957806313893f61146101e557806317d7de7c146102125780632d0335ab14610234575b600080fd5b61017e610179366004612e38565b6104c1565b60405161018b9190612ee4565b60405180910390f35b6101a76101a2366004612e38565b61060c565b005b3480156101b557600080fd5b507ff83bb2b0ede93a840239f7e701a54d9bc35f03701f51ae153d601c6947ff3d3f5b60405161018b9190612ef5565b3480156101f157600080fd5b50610205610200366004612e38565b61075e565b60405161018b9190612f12565b34801561021e57600080fd5b506102276107a1565b60405161018b9190612f76565b34801561024057600080fd5b506101d861024f366004612fb7565b6001600160a01b031660009081526003602052604090205490565b6101a7610278366004612ffb565b610833565b6101a761028b366004612e38565b6108b7565b34801561029c57600080fd5b506102056102ab36600461302d565b61097c565b3480156102bc57600080fd5b50610227610989565b3480156102d157600080fd5b50426001600160401b03166101d8565b3480156102ed57600080fd5b506101d86102fc3660046132bd565b610a2c565b34801561030d57600080fd5b506101a761031c36600461302d565b610a8b565b34801561032d57600080fd5b50610336610acc565b60405161018b979695949392919061336a565b34801561035557600080fd5b5061036961036436600461302d565b610b54565b60405161018b91906134d3565b61017e610384366004612e38565b610d2d565b6101a76103973660046134fa565b610f5a565b3480156103a857600080fd5b507f2d4116d8c9824e4c316453e5c2843a1885580374159ce8768603c49085ef424c6101d8565b3480156103db57600080fd5b506102056103ea36600461302d565b610fff565b6101d86103fd366004613531565b61100d565b6101d8610410366004613580565b6110da565b34801561042157600080fd5b5061044461043036600461302d565b600090815260056020526040902054151590565b60405161018b91906135ba565b34801561045d57600080fd5b5061020561046c366004612e38565b6111a0565b34801561047d57600080fd5b506101d86111d8565b34801561049257600080fd5b507f000000000000000000000000000000000000000000000000000000000000000060405161018b919061360a565b6060816000816001600160401b038111156104de576104de61304e565b60405190808252806020026020018201604052801561051157816020015b60608152602001906001900390816104fc5790505b509050600034815b848110156105f457600019850181143689898481811061053b5761053b613618565b905060200281019061054d919061362e565b905061055c6020820182613652565b905060000361057e5760405163251f56a160e21b815260040160405180910390fd5b60006105a382356105926020850185613652565b61059b9161382a565b3388876111e7565b80519091506105b2908661384d565b945080602001518785815181106105cb576105cb613618565b6020026020010181905250806020015151860195505050506105ed8160010190565b9050610519565b506105ff838361177b565b9450505050505b92915050565b348160005b818110156107575760001982018114600086868481811061063457610634613618565b90506020028101906106469190613860565b61064f90613ade565b602081015180519192509080158061066c57508260400151518114155b1561068a5760405163251f56a160e21b815260040160405180910390fd5b60005b81811015610720576107186040518060a00160405280866000015181526020018584815181106106bf576106bf613618565b60200260200101518152602001866040015184815181106106e2576106e2613618565b6020026020010151815260200186606001516001600160a01b0316815260200186608001516001600160401b0316815250611864565b60010161068d565b5061073683600001518385606001518a886119a8565b610740908861384d565b9650505050506107508160010190565b9050610611565b5050505050565b60004282825b818110156107975761078f3387878481811061078257610782613618565b9050602002013585611eec565b600101610764565b5090949350505050565b6060600280546107b090613b00565b80601f01602080910402602001604051908101604052809291908181526020018280546107dc90613b00565b80156108295780601f106107fe57610100808354040283529160200191610829565b820191906000526020600020905b81548152906001019060200180831161080c57829003601f168201915b5050505050905090565b604080516001808252818301909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161084a57905050905061088536839003830160208401613b26565b8160008151811061089857610898613618565b60209081029190910101526108b2823582333460016119a8565b505050565b348160005b818110156107575760001982018114368686848181106108de576108de613618565b90506020028101906108f0919061362e565b905061095d81356109046020840184613b47565b808060200260200160405190810160405280939291908181526020016000905b828210156109505761094160408302860136819003810190613b26565b81526020019060010190610924565b50505050503388866119a8565b610967908661384d565b945050506109758160010190565b90506108bc565b6000426106068382611fcd565b60606109b47f0000000000000000000000000000000000000000000000000000000000000000612093565b6109dd7f0000000000000000000000000000000000000000000000000000000000000000612093565b610a067f0000000000000000000000000000000000000000000000000000000000000000612093565b604051602001610a1893929190613bbf565b604051602081830303815290604052905090565b60208083015160c084015160e0850151604080870151606088015161010089015160a08a01516101208b01519451600099610a6d99989796918c9101613c80565b60405160208183030381529060405280519060200120905092915050565b336000908152600360205260409020548111610aba57604051633ab3447f60e11b815260040160405180910390fd5b33600090815260036020526040902055565b600060608082808083610aff7f000000000000000000000000000000000000000000000000000000000000000083612126565b610b2a7f00000000000000000000000000000000000000000000000000000000000000006001612126565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b610b5c612d90565b6000828152600560208181526040928390208351610160810185528154815260018201549281019290925260028101546001600160401b0380821695840195909552600160401b810485166060840152600160801b90049093166080820152600383015460a082015260048301546001600160a01b0390811660c08301529183015491821660e0820152600160a01b90910460ff16151561010082015260068201805491929161012084019190610c1290613b00565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3e90613b00565b8015610c8b5780601f10610c6057610100808354040283529160200191610c8b565b820191906000526020600020905b815481529060010190602001808311610c6e57829003601f168201915b50505050508152602001600782018054610ca490613b00565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd090613b00565b8015610d1d5780601f10610cf257610100808354040283529160200191610d1d565b820191906000526020600020905b815481529060010190602001808311610d0057829003601f168201915b5050505050815250509050919050565b6060816000816001600160401b03811115610d4a57610d4a61304e565b604051908082528060200260200182016040528015610d7d57816020015b6060815260200190600190039081610d685790505b509050600034815b848110156105f4576000198501811436898984818110610da757610da7613618565b9050602002810190610db99190613860565b9050366000610dcb6020840184613652565b909250905080801580610dec5750610de66040850185613d19565b90508114155b15610e0a5760405163251f56a160e21b815260040160405180910390fd5b60005b81811015610edd57610ed56040518060a0016040528087600001358152602001868685818110610e3f57610e3f613618565b9050602002810190610e519190613d6f565b610e5a90613d89565b8152602001610e6c6040890189613d19565b85818110610e7c57610e7c613618565b905060600201803603810190610e929190613d95565b8152602001610ea76080890160608a01612fb7565b6001600160a01b03168152602001610ec560a0890160808a01613db6565b6001600160401b031690526121d1565b600101610e0d565b506000610f068535610eef858761382a565b610eff6080890160608a01612fb7565b8b8a6111e7565b8051909150610f15908961384d565b975080602001518a8881518110610f2e57610f2e613618565b602002602001018190525080602001515189019850505050505050610f538160010190565b9050610d85565b610f71610f6c36839003830183613e52565b611864565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610f88579050509050610fc336839003830160208401613b26565b81600081518110610fd657610fd6613618565b60209081029190910101526108b2823582610ff760e0860160c08701612fb7565b3460016119a8565b600042610606338483611eec565b604080516001808252818301909252600091829190816020015b6040805160e0810182526000808252602080830182905292820181905260608083018290526080830181905260a083015260c0820152825260001990920191018161102757905050905061107e6020840184613d6f565b61108790613d89565b8160008151811061109a5761109a613618565b60209081029190910101526110b4833582333460016111e7565b602001516000815181106110ca576110ca613618565b6020026020010151915050919050565b60006110ed6110e883613f08565b6121d1565b604080516001808252818301909252600091816020015b6040805160e0810182526000808252602080830182905292820181905260608083018290526080830181905260a083015260c0820152825260001990920191018161110457905050905061115b6020840184613d6f565b61116490613d89565b8160008151811061117757611177613618565b60209081029190910101526110b483358261119860c0870160a08801612fb7565b3460016111e7565b60004282825b81811015610797576111d08686838181106111c3576111c3613618565b9050602002013584611fcd565b6001016111a6565b60006111e26122b6565b905090565b6040805180820190915260008152606060208201528451604080518082019091526000815260606020820152816001600160401b0381111561122b5761122b61304e565b604051908082528060200260200182016040528015611254578160200160208202803683370190505b5060208201526040516351753e3760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a2ea7c6e906112a9908c90600401612ef5565b600060405180830381865afa1580156112c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ee919081019061402d565b805190915061131057604051635f9bd90760e11b815260040160405180910390fd5b6000836001600160401b0381111561132a5761132a61304e565b60405190808252806020026020018201604052801561136357816020015b611350612d90565b8152602001906001900390816113485790505b5090506000846001600160401b038111156113805761138061304e565b6040519080825280602002602001820160405280156113a9578160200160208202803683370190505b50905060005b858110156117585760008b82815181106113cb576113cb613618565b6020026020010151905060006001600160401b031681602001516001600160401b0316141580156114125750426001600160401b031681602001516001600160401b031611155b15611430576040516308e8b93760e01b815260040160405180910390fd5b8460400151158015611443575080604001515b156114615760405163157bd4c360e01b815260040160405180910390fd5b60006040518061016001604052806000801b81526020018f81526020016114854290565b6001600160401b0316815260200183602001516001600160401b0316815260200160006001600160401b031681526020018360600151815260200183600001516001600160a01b031681526020018d6001600160a01b03168152602001836040015115158152602001836080015181526020018360a001518152509050600080600090505b6115148382610a2c565b600081815260056020526040902054909250156115335760010161150a565b8183526000828152600560208181526040928390208651815590860151600182015591850151600283018054606088015160808901516001600160401b03908116600160801b0267ffffffffffffffff60801b19928216600160401b026fffffffffffffffffffffffffffffffff199094169190951617919091171691909117905560a0850151600383015560c08501516004830180546001600160a01b039283166001600160a01b031990911617905560e086015191830180546101008801511515600160a01b026001600160a81b03199091169390921692909217179055610120840151849190600682019061162b90826140fc565b50610140820151600782019061164190826140fc565b50505060608401511561167f57606084015160009081526005602052604090205461167f5760405163c5723b5160e01b815260040160405180910390fd5b8287868151811061169257611692613618565b60200260200101819052508360c001518686815181106116b4576116b4613618565b60200260200101818152505081896020015186815181106116d7576116d7613618565b60209081029190910101526004805460405163014b065360e11b81526001600160a01b03909116916302960ca691611711918791016134d3565b600060405180830381600087803b15801561172b57600080fd5b505af115801561173f573d6000803e3d6000fd5b50505050505050506117518160010190565b90506113af565b5061176883838360008c8c612341565b8452509193505050505b95945050505050565b60606000826001600160401b038111156117975761179761304e565b6040519080825280602002602001820160405280156117c0578160200160208202803683370190505b508451909150600090815b818110156118595760008782815181106117e7576117e7613618565b6020026020010151905060008151905060005b818110156118455782818151811061181457611814613618565b602002602001015187878151811061182e5761182e613618565b6020908102919091010152600195860195016117fa565b5050506118528160010190565b90506117cb565b509195945050505050565b60808101516001600160401b0316158015906118965750426001600160401b031681608001516001600160401b031611155b156118b457604051631ab7da6b60e01b815260040160405180910390fd5b60208082015160408084015160608501516001600160a01b0316600090815260038552828120805460018101909155865185518688015160808a01519651979895979396949561194b95611930957f2d4116d8c9824e4c316453e5c2843a1885580374159ce8768603c49085ef424c959493928a9291016141be565b6040516020818303038152906040528051906020012061264f565b905061198b85606001518285602001518660400151876000015160405160200161197793929190614224565b60405160208183030381529060405261267c565b61075757604051638baa579f60e01b815260040160405180910390fd5b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a2ea7c6e886040518263ffffffff1660e01b81526004016119f79190612ef5565b600060405180830381865afa158015611a14573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a3c919081019061402d565b8051909150611a5e57604051635f9bd90760e11b815260040160405180910390fd5b85516000816001600160401b03811115611a7a57611a7a61304e565b604051908082528060200260200182016040528015611ab357816020015b611aa0612d90565b815260200190600190039081611a985790505b5090506000826001600160401b03811115611ad057611ad061304e565b604051908082528060200260200182016040528015611af9578160200160208202803683370190505b50905060005b83811015611ece5760008a8281518110611b1b57611b1b613618565b6020908102919091018101518051600090815260059092526040909120805491925090611b5b5760405163c5723b5160e01b815260040160405180910390fd5b8c816001015414611b7f57604051635f9bd90760e11b815260040160405180910390fd5b60058101546001600160a01b038c8116911614611baf57604051634ca8886760e01b815260040160405180910390fd5b6005810154600160a01b900460ff16611bdb5760405163157bd4c360e01b815260040160405180910390fd5b6002810154600160801b90046001600160401b031615611c0e5760405163905e710760e01b815260040160405180910390fd5b4260028201805467ffffffffffffffff60801b198116600160801b6001600160401b03948516810291821793849055604080516101608101825287548152600188015460208201529386169286169290921791830191909152600160401b8304841660608301529091049091166080820152600382015460a082015260048201546001600160a01b0390811660c0830152600583015490811660e0830152600160a01b900460ff1615156101008201526006820180548391610120840191611cd590613b00565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0190613b00565b8015611d4e5780601f10611d2357610100808354040283529160200191611d4e565b820191906000526020600020905b815481529060010190602001808311611d3157829003601f168201915b50505050508152602001600782018054611d6790613b00565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9390613b00565b8015611de05780601f10611db557610100808354040283529160200191611de0565b820191906000526020600020905b815481529060010190602001808311611dc357829003601f168201915b505050505081525050858481518110611dfb57611dfb613618565b60200260200101819052508160200151848481518110611e1d57611e1d613618565b602002602001018181525050600460009054906101000a90046001600160a01b03166001600160a01b0316639566523582600001548d8460020160109054906101000a90046001600160401b03166040518463ffffffff1660e01b8152600401611e8993929190614279565b600060405180830381600087803b158015611ea357600080fd5b505af1158015611eb7573d6000803e3d6000fd5b505050505050611ec78160010190565b9050611aff565b50611ede84838360018b8b612341565b9a9950505050505050505050565b6001600160a01b038316600090815260076020908152604080832085845291829052909120546001600160401b031615611f395760405163ec9d6eeb60e01b815260040160405180910390fd5b60008381526020829052604090819020805467ffffffffffffffff19166001600160401b038516179055600480549151637a99dcd960e01b81526001600160a01b0390921691637a99dcd991611f9591889188918891016142a1565b600060405180830381600087803b158015611faf57600080fd5b505af1158015611fc3573d6000803e3d6000fd5b5050505050505050565b6000828152600660205260409020546001600160401b031615612003576040516317133ca360e11b815260040160405180910390fd5b60008281526006602052604090819020805467ffffffffffffffff19166001600160401b03841617905560048054915163d7d2054560e01b81526001600160a01b039092169163d7d205459161205d9186918691016142bc565b600060405180830381600087803b15801561207757600080fd5b505af115801561208b573d6000803e3d6000fd5b505050505050565b606060006120a0836126df565b60010190506000816001600160401b038111156120bf576120bf61304e565b6040519080825280601f01601f1916602001820160405280156120e9576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120f3575b509392505050565b606060ff831461214057612139836127b7565b9050610606565b81805461214c90613b00565b80601f016020809104026020016040519081016040528092919081815260200182805461217890613b00565b80156121c55780601f1061219a576101008083540402835291602001916121c5565b820191906000526020600020905b8154815290600101906020018083116121a857829003601f168201915b50505050509050610606565b60808101516001600160401b0316158015906122035750426001600160401b031681608001516001600160401b031611155b1561222157604051631ab7da6b60e01b815260040160405180910390fd5b6020808201516040808401516060808601516001600160a01b0316600090815260038652838120805460018101909155875186518789015187890151958901516080808b01518051908d012060c08c0151918e01519a519b9c999b969a979961194b99611930997ff83bb2b0ede93a840239f7e701a54d9bc35f03701f51ae153d601c6947ff3d3f99919594928e92016142d7565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561230f57507f000000000000000000000000000000000000000000000000000000000000000046145b1561233957507f000000000000000000000000000000000000000000000000000000000000000090565b6111e26127f6565b8451600090600181900361239957612391888860008151811061236657612366613618565b60200260200101518860008151811061238157612381613618565b602002602001015188888861288c565b915050612645565b60208801516001600160a01b0381166124145760005b828110156123f9578781815181106123c9576123c9613618565b60200260200101516000146123f157604051631574f9f360e01b815260040160405180910390fd5b6001016123af565b5083156124095761240985612ac8565b600092505050612645565b600080826001600160a01b031663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612455573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612479919061436c565b905060005b848110156125045760008a828151811061249a5761249a613618565b60200260200101519050806000036124b257506124fc565b826124d057604051631574f9f360e01b815260040160405180910390fd5b888111156124f15760405163044044a560e21b815260040160405180910390fd5b978890039792909201915b60010161247e565b5087156125a0576040516308e1252960e41b81526001600160a01b03841690638e12529090849061253b908e908e906004016143ff565b60206040518083038185885af1158015612559573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061257e919061436c565b61259b5760405163bf2f3a8b60e01b815260040160405180910390fd5b612630565b60405163383aef5760e01b81526001600160a01b0384169063383aef579084906125d0908e908e906004016143ff565b60206040518083038185885af11580156125ee573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612613919061436c565b6126305760405163e8bee83960e01b815260040160405180910390fd5b851561263f5761263f87612ac8565b50925050505b9695505050505050565b600061060661265c6122b6565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600061268b8585612adb565b909250905060008160048111156126a4576126a4614424565b1480156126c25750856001600160a01b0316826001600160a01b0316145b806126d357506126d3868686612b20565b925050505b9392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061271e5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061274a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061276857662386f26fc10000830492506010015b6305f5e1008310612780576305f5e100830492506008015b612710831061279457612710830492506004015b606483106127a6576064830492506002015b600a83106106065760010192915050565b606060006127c483612c0c565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000463060405160200161287195949392919061443a565b60405160208183030381529060405280519060200120905090565b60208601516000906001600160a01b0381166128da5785156128c157604051631574f9f360e01b815260040160405180910390fd5b82156128d0576128d084612ac8565b6000915050612645565b851561298657806001600160a01b031663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561291e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612942919061436c565b61295f57604051631574f9f360e01b815260040160405180910390fd5b838611156129805760405163044044a560e21b815260040160405180910390fd5b85840393505b8415612a1f5760405163b4188e2560e01b81526001600160a01b0382169063b4188e259088906129ba908b906004016134d3565b60206040518083038185885af11580156129d8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906129fd919061436c565b612a1a5760405163ccf3bb2760e01b815260040160405180910390fd5b612aad565b6040516304b832d560e11b81526001600160a01b0382169063097065aa908890612a4d908b906004016134d3565b60206040518083038185885af1158015612a6b573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612a90919061436c565b612aad5760405163bd8ba84d60e01b815260040160405180910390fd5b8215612abc57612abc84612ac8565b50939695505050505050565b8015612ad857612ad83382612c34565b50565b6000808251604103612b115760208301516040840151606085015160001a612b0587828585612cd9565b94509450505050612b19565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b8686604051602401612b4a92919061447c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612b88919061449c565b600060405180830381855afa9150503d8060008114612bc3576040519150601f19603f3d011682016040523d82523d6000602084013e612bc8565b606091505b5091509150818015612bdc57506020815110155b80156126d357508051630b135d3f60e11b90612c0190830160209081019084016144a8565b149695505050505050565b600060ff8216601f81111561060657604051632cd44ac360e21b815260040160405180910390fd5b80471015612c5d5760405162461bcd60e51b8152600401612c54906144c9565b60405180910390fd5b6000826001600160a01b031682604051612c7690614504565b60006040518083038185875af1925050503d8060008114612cb3576040519150601f19603f3d011682016040523d82523d6000602084013e612cb8565b606091505b50509050806108b25760405162461bcd60e51b8152600401612c549061450f565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612d105750600090506003612d87565b600060018787878760405160008152602001604052604051612d359493929190614579565b6020604051602081039080840390855afa158015612d57573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612d8057600060019250925050612d87565b9150600090505b94509492505050565b604080516101608101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820192909252610120810182905261014081019190915290565b60008083601f840112612e0357612e03600080fd5b5081356001600160401b03811115612e1d57612e1d600080fd5b602083019150836020820283011115612b1957612b19600080fd5b60008060208385031215612e4e57612e4e600080fd5b82356001600160401b03811115612e6757612e67600080fd5b612e7385828601612dee565b92509250509250929050565b805b82525050565b6000612e938383612e7f565b505060200190565b6000612ea5825190565b80845260209384019383018060005b83811015612ed9578151612ec88882612e87565b975060208301925050600101612eb4565b509495945050505050565b602080825281016126d88184612e9b565b602081016106068284612e7f565b6001600160401b038116612e81565b602081016106068284612f03565b60005b83811015612f3b578181015183820152602001612f23565b50506000910152565b6000612f4e825190565b808452602084019350612f65818560208601612f20565b601f01601f19169290920192915050565b602080825281016126d88184612f44565b60006001600160a01b038216610606565b612fa181612f87565b8114612ad857600080fd5b803561060681612f98565b600060208284031215612fcc57612fcc600080fd5b6000612fd88484612fac565b949350505050565b600060608284031215612ff557612ff5600080fd5b50919050565b60006060828403121561301057613010600080fd5b6000612fd88484612fe0565b80612fa1565b80356106068161301c565b60006020828403121561304257613042600080fd5b6000612fd88484613022565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156130895761308961304e565b6040525050565b600061309b60405190565b90506130a78282613064565b919050565b6001600160401b038116612fa1565b8035610606816130ac565b801515612fa1565b8035610606816130c6565b60006001600160401b038211156130f2576130f261304e565b601f19601f83011660200192915050565b82818337506000910152565b600061312261311d846130d9565b613090565b90508281526020810184848401111561313d5761313d600080fd5b61211e848285613103565b600082601f83011261315c5761315c600080fd5b8135612fd884826020860161310f565b6000610160828403121561318257613182600080fd5b61318d610160613090565b9050600061319b8484613022565b82525060206131ac84848301613022565b60208301525060406131c0848285016130bb565b60408301525060606131d4848285016130bb565b60608301525060806131e8848285016130bb565b60808301525060a06131fc84828501613022565b60a08301525060c061321084828501612fac565b60c08301525060e061322484828501612fac565b60e083015250610100613239848285016130ce565b610100830152506101208201356001600160401b0381111561325d5761325d600080fd5b61326984828501613148565b610120830152506101408201356001600160401b0381111561328d5761328d600080fd5b61329984828501613148565b6101408301525092915050565b63ffffffff8116612fa1565b8035610606816132a6565b600080604083850312156132d3576132d3600080fd5b82356001600160401b038111156132ec576132ec600080fd5b6132f88582860161316c565b9250506020613309858286016132b2565b9150509250929050565b6001600160f81b03198116612e81565b612e8181612f87565b6000613336825190565b80845260209384019383018060005b83811015612ed95781516133598882612e87565b975060208301925050600101613345565b60e08101613378828a613313565b818103602083015261338a8189612f44565b9050818103604083015261339e8188612f44565b90506133ad6060830187612e7f565b6133ba6080830186613323565b6133c760a0830185612e7f565b81810360c08301526133d9818461332c565b9998505050505050505050565b801515612e81565b80516000906101608401906134038582612e7f565b5060208301516134166020860182612e7f565b5060408301516134296040860182612f03565b50606083015161343c6060860182612f03565b50608083015161344f6080860182612f03565b5060a083015161346260a0860182612e7f565b5060c083015161347560c0860182613323565b5060e083015161348860e0860182613323565b5061010083015161349d6101008601826133e6565b506101208301518482036101208601526134b78282612f44565b9150506101408301518482036101408601526117728282612f44565b602080825281016126d881846133ee565b60006101008284031215612ff557612ff5600080fd5b6000610100828403121561351057613510600080fd5b6000612fd884846134e4565b600060408284031215612ff557612ff5600080fd5b60006020828403121561354657613546600080fd5b81356001600160401b0381111561355f5761355f600080fd5b612fd88482850161351c565b600060e08284031215612ff557612ff5600080fd5b60006020828403121561359557613595600080fd5b81356001600160401b038111156135ae576135ae600080fd5b612fd88482850161356b565b6020810161060682846133e6565b60006106066001600160a01b0383166135df565b90565b6001600160a01b031690565b6000610606826135c8565b6000610606826135eb565b612e81816135f6565b602081016106068284613601565b634e487b7160e01b600052603260045260246000fd5b60008235603e193684900301811261364857613648600080fd5b9190910192915050565b6000808335601e193685900301811261366d5761366d600080fd5b8084019250823591506001600160401b0382111561368d5761368d600080fd5b602092830192820236038313156136a6576136a6600080fd5b509250929050565b60006001600160401b038211156136c7576136c761304e565b5060209081020190565b600060e082840312156136e6576136e6600080fd5b6136f060e0613090565b905060006136fe8484612fac565b825250602061370f848483016130bb565b6020830152506040613723848285016130ce565b604083015250606061373784828501613022565b60608301525060808201356001600160401b0381111561375957613759600080fd5b61376584828501613148565b60808301525060a08201356001600160401b0381111561378757613787600080fd5b61379384828501613148565b60a08301525060c06137a784828501613022565b60c08301525092915050565b60006137c161311d846136ae565b838152905060208082019084028301858111156137e0576137e0600080fd5b835b818110156138205780356001600160401b0381111561380357613803600080fd5b80860161381089826136d1565b85525050602092830192016137e2565b5050509392505050565b60006126d83684846137b3565b634e487b7160e01b600052601160045260246000fd5b8181038181111561060657610606613837565b60008235609e193684900301811261364857613648600080fd5b60006040828403121561388f5761388f600080fd5b6138996040613090565b905060006138a78484613022565b82525060206138b884848301613022565b60208301525092915050565b60006138d261311d846136ae565b838152905060208101604084028301858111156138f1576138f1600080fd5b835b818110156138205780613906888261387a565b8452506020909201916040016138f3565b600082601f83011261392b5761392b600080fd5b8135612fd88482602086016138c4565b60ff8116612fa1565b80356106068161393b565b60006060828403121561396457613964600080fd5b61396e6060613090565b9050600061397c8484613944565b825250602061398d84848301613022565b60208301525060406139a184828501613022565b60408301525092915050565b60006139bb61311d846136ae565b838152905060208101606084028301858111156139da576139da600080fd5b835b8181101561382057806139ef888261394f565b8452506020909201916060016139dc565b600082601f830112613a1457613a14600080fd5b8135612fd88482602086016139ad565b600060a08284031215613a3957613a39600080fd5b613a4360a0613090565b90506000613a518484613022565b82525060208201356001600160401b03811115613a7057613a70600080fd5b613a7c84828501613917565b60208301525060408201356001600160401b03811115613a9e57613a9e600080fd5b613aaa84828501613a00565b6040830152506060613abe84828501612fac565b6060830152506080613ad2848285016130bb565b60808301525092915050565b60006106063683613a24565b634e487b7160e01b600052602260045260246000fd5b600281046001821680613b1457607f821691505b602082108103612ff557612ff5613aea565b600060408284031215613b3b57613b3b600080fd5b6000612fd8848461387a565b6000808335601e1936859003018112613b6257613b62600080fd5b8084019250823591506001600160401b03821115613b8257613b82600080fd5b6020830192506040820236038313156136a6576136a6600080fd5b6000613ba7825190565b613bb5818560208601612f20565b9290920192915050565b6000613bcb8286613b9d565b601760f91b81526001019150613be18285613b9d565b601760f91b815260010191506117728284613b9d565b80612e81565b60006106068260601b90565b600061060682613bfd565b612e81613c2082612f87565b613c09565b60006106068260c01b90565b612e816001600160401b038216613c25565b60006106068260f81b90565b600061060682613c43565b612e81811515613c4f565b60006106068260e01b90565b612e8163ffffffff8216613c65565b6000613c8c828c613bf7565b602082019150613c9c828b613c14565b601482019150613cac828a613c14565b601482019150613cbc8289613c31565b600882019150613ccc8288613c31565b600882019150613cdc8287613c5a565b600182019150613cec8286613bf7565b602082019150613cfc8285613b9d565b9150613d088284613c71565b506004019998505050505050505050565b6000808335601e1936859003018112613d3457613d34600080fd5b8084019250823591506001600160401b03821115613d5457613d54600080fd5b6020830192506060820236038313156136a6576136a6600080fd5b6000823560de193684900301811261364857613648600080fd5b600061060636836136d1565b600060608284031215613daa57613daa600080fd5b6000612fd8848461394f565b600060208284031215613dcb57613dcb600080fd5b6000612fd884846130bb565b60006101008284031215613ded57613ded600080fd5b613df760a0613090565b90506000613e058484613022565b8252506020613e168484830161387a565b6020830152506060613e2a8482850161394f565b60408301525060c0613e3e84828501612fac565b60608301525060e0613ad2848285016130bb565b60006101008284031215613e6857613e68600080fd5b6000612fd88484613dd7565b600060e08284031215613e8957613e89600080fd5b613e9360a0613090565b90506000613ea18484613022565b82525060208201356001600160401b03811115613ec057613ec0600080fd5b613ecc848285016136d1565b6020830152506040613ee08482850161394f565b60408301525060a0613ef484828501612fac565b60608301525060c0613ad2848285016130bb565b60006106063683613e74565b80516106068161301c565b600061060682612f87565b612fa181613f1f565b805161060681613f2a565b8051610606816130c6565b6000613f5761311d846130d9565b905082815260208101848484011115613f7257613f72600080fd5b61211e848285612f20565b600082601f830112613f9157613f91600080fd5b8151612fd8848260208601613f49565b600060808284031215613fb657613fb6600080fd5b613fc06080613090565b90506000613fce8484613f14565b8252506020613fdf84848301613f33565b6020830152506040613ff384828501613f3e565b60408301525060608201516001600160401b0381111561401557614015600080fd5b61402184828501613f7d565b60608301525092915050565b60006020828403121561404257614042600080fd5b81516001600160401b0381111561405b5761405b600080fd5b612fd884828501613fa1565b60006106066135dc8381565b61407c83614067565b815460001960089490940293841b1916921b91909117905550565b60006108b2818484614073565b818110156140bf576140b7600082614097565b6001016140a4565b5050565b601f8211156108b2576000818152602090206020601f850104810160208510156140ea5750805b6107576020601f8601048301826140a4565b81516001600160401b038111156141155761411561304e565b61411f8254613b00565b61412a8282856140c3565b6020601f83116001811461415e57600084156141465750858201515b600019600886021c198116600286021786555061208b565b600085815260208120601f198616915b8281101561418e578885015182556020948501946001909201910161416e565b868310156141aa5784890151600019601f89166008021c191682555b600160028802018855505050505050505050565b60c081016141cc8289612e7f565b6141d96020830188612e7f565b6141e66040830187612e7f565b6141f36060830186612e7f565b6142006080830185612e7f565b61420d60a0830184612f03565b979650505050505050565b612e8160ff8216613c43565b60006142308286613bf7565b6020820191506142408285613bf7565b6020820191506142508284614218565b506001019392505050565b60006106066135dc6001600160401b03841681565b612e818161425b565b606081016142878286612e7f565b6142946020830185613323565b612fd86040830184614270565b606081016142af8286613323565b6142946020830185612e7f565b604081016142ca8285612e7f565b6126d86020830184614270565b61014081016142e6828d612e7f565b6142f3602083018c612e7f565b614300604083018b613323565b61430d606083018a612f03565b61431a60808301896133e6565b61432760a0830188612e7f565b61433460c0830187612e7f565b61434160e0830186612e7f565b61434f610100830185612e7f565b61435d610120830184612f03565b9b9a5050505050505050505050565b60006020828403121561438157614381600080fd5b6000612fd88484613f3e565b60006126d883836133ee565b60006143a3825190565b808452602084019350836020820285016143bd8560200190565b8060005b858110156143f257848403895281516143da858261438d565b94506020830160209a909a01999250506001016143c1565b5091979650505050505050565b604080825281016144108185614399565b90508181036020830152612fd8818461332c565b634e487b7160e01b600052602160045260246000fd5b60a081016144488288612e7f565b6144556020830187612e7f565b6144626040830186612e7f565b61446f6060830185612e7f565b6126456080830184613323565b6040810161448a8285612e7f565b8181036020830152612fd88184612f44565b60006126d88284613b9d565b6000602082840312156144bd576144bd600080fd5b6000612fd88484613f14565b6020808252810161060681601d81527f416464726573733a20696e73756666696369656e742062616c616e6365000000602082015260400190565b6000610606826135dc565b6020808252810161060681603a81527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260208201527f6563697069656e74206d61792068617665207265766572746564000000000000604082015260600190565b60ff8116612e81565b608081016145878287612e7f565b6145946020830186614570565b6145a16040830185612e7f565b6117726060830184612e7f56fea2646970667358221220828aa64a1a2599abebfa62ccc23834a3481389356bbc4bea469dfd27a419581264736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101665760003560e01c806379f7573a116100d1578063cf190f341161008a578063e30bb56311610064578063e30bb56314610415578063e71ff36514610451578063ed24911d14610471578063f10b5cc81461048657600080fd5b8063cf190f34146103cf578063d1d7facd146103ef578063d96445021461040257600080fd5b806379f7573a1461030157806384b0196e14610321578063a3112a6414610349578063a641709c14610376578063a6d4dbc714610389578063b83010d31461039c57600080fd5b80634692626711610123578063469262671461026a5780634cb7e9e51461027d5780634d0030701461029057806354fd4d50146102b0578063557ed1ba146102c5578063619bf5a4146102e157600080fd5b806301de5e211461016b5780630eabf6601461019457806312b11a17146101a957806313893f61146101e557806317d7de7c146102125780632d0335ab14610234575b600080fd5b61017e610179366004612e38565b6104c1565b60405161018b9190612ee4565b60405180910390f35b6101a76101a2366004612e38565b61060c565b005b3480156101b557600080fd5b507ff83bb2b0ede93a840239f7e701a54d9bc35f03701f51ae153d601c6947ff3d3f5b60405161018b9190612ef5565b3480156101f157600080fd5b50610205610200366004612e38565b61075e565b60405161018b9190612f12565b34801561021e57600080fd5b506102276107a1565b60405161018b9190612f76565b34801561024057600080fd5b506101d861024f366004612fb7565b6001600160a01b031660009081526003602052604090205490565b6101a7610278366004612ffb565b610833565b6101a761028b366004612e38565b6108b7565b34801561029c57600080fd5b506102056102ab36600461302d565b61097c565b3480156102bc57600080fd5b50610227610989565b3480156102d157600080fd5b50426001600160401b03166101d8565b3480156102ed57600080fd5b506101d86102fc3660046132bd565b610a2c565b34801561030d57600080fd5b506101a761031c36600461302d565b610a8b565b34801561032d57600080fd5b50610336610acc565b60405161018b979695949392919061336a565b34801561035557600080fd5b5061036961036436600461302d565b610b54565b60405161018b91906134d3565b61017e610384366004612e38565b610d2d565b6101a76103973660046134fa565b610f5a565b3480156103a857600080fd5b507f2d4116d8c9824e4c316453e5c2843a1885580374159ce8768603c49085ef424c6101d8565b3480156103db57600080fd5b506102056103ea36600461302d565b610fff565b6101d86103fd366004613531565b61100d565b6101d8610410366004613580565b6110da565b34801561042157600080fd5b5061044461043036600461302d565b600090815260056020526040902054151590565b60405161018b91906135ba565b34801561045d57600080fd5b5061020561046c366004612e38565b6111a0565b34801561047d57600080fd5b506101d86111d8565b34801561049257600080fd5b507f000000000000000000000000000000000000000000000000000000000000000060405161018b919061360a565b6060816000816001600160401b038111156104de576104de61304e565b60405190808252806020026020018201604052801561051157816020015b60608152602001906001900390816104fc5790505b509050600034815b848110156105f457600019850181143689898481811061053b5761053b613618565b905060200281019061054d919061362e565b905061055c6020820182613652565b905060000361057e5760405163251f56a160e21b815260040160405180910390fd5b60006105a382356105926020850185613652565b61059b9161382a565b3388876111e7565b80519091506105b2908661384d565b945080602001518785815181106105cb576105cb613618565b6020026020010181905250806020015151860195505050506105ed8160010190565b9050610519565b506105ff838361177b565b9450505050505b92915050565b348160005b818110156107575760001982018114600086868481811061063457610634613618565b90506020028101906106469190613860565b61064f90613ade565b602081015180519192509080158061066c57508260400151518114155b1561068a5760405163251f56a160e21b815260040160405180910390fd5b60005b81811015610720576107186040518060a00160405280866000015181526020018584815181106106bf576106bf613618565b60200260200101518152602001866040015184815181106106e2576106e2613618565b6020026020010151815260200186606001516001600160a01b0316815260200186608001516001600160401b0316815250611864565b60010161068d565b5061073683600001518385606001518a886119a8565b610740908861384d565b9650505050506107508160010190565b9050610611565b5050505050565b60004282825b818110156107975761078f3387878481811061078257610782613618565b9050602002013585611eec565b600101610764565b5090949350505050565b6060600280546107b090613b00565b80601f01602080910402602001604051908101604052809291908181526020018280546107dc90613b00565b80156108295780601f106107fe57610100808354040283529160200191610829565b820191906000526020600020905b81548152906001019060200180831161080c57829003601f168201915b5050505050905090565b604080516001808252818301909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161084a57905050905061088536839003830160208401613b26565b8160008151811061089857610898613618565b60209081029190910101526108b2823582333460016119a8565b505050565b348160005b818110156107575760001982018114368686848181106108de576108de613618565b90506020028101906108f0919061362e565b905061095d81356109046020840184613b47565b808060200260200160405190810160405280939291908181526020016000905b828210156109505761094160408302860136819003810190613b26565b81526020019060010190610924565b50505050503388866119a8565b610967908661384d565b945050506109758160010190565b90506108bc565b6000426106068382611fcd565b60606109b47f0000000000000000000000000000000000000000000000000000000000000000612093565b6109dd7f0000000000000000000000000000000000000000000000000000000000000000612093565b610a067f0000000000000000000000000000000000000000000000000000000000000000612093565b604051602001610a1893929190613bbf565b604051602081830303815290604052905090565b60208083015160c084015160e0850151604080870151606088015161010089015160a08a01516101208b01519451600099610a6d99989796918c9101613c80565b60405160208183030381529060405280519060200120905092915050565b336000908152600360205260409020548111610aba57604051633ab3447f60e11b815260040160405180910390fd5b33600090815260036020526040902055565b600060608082808083610aff7f000000000000000000000000000000000000000000000000000000000000000083612126565b610b2a7f00000000000000000000000000000000000000000000000000000000000000006001612126565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b610b5c612d90565b6000828152600560208181526040928390208351610160810185528154815260018201549281019290925260028101546001600160401b0380821695840195909552600160401b810485166060840152600160801b90049093166080820152600383015460a082015260048301546001600160a01b0390811660c08301529183015491821660e0820152600160a01b90910460ff16151561010082015260068201805491929161012084019190610c1290613b00565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3e90613b00565b8015610c8b5780601f10610c6057610100808354040283529160200191610c8b565b820191906000526020600020905b815481529060010190602001808311610c6e57829003601f168201915b50505050508152602001600782018054610ca490613b00565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd090613b00565b8015610d1d5780601f10610cf257610100808354040283529160200191610d1d565b820191906000526020600020905b815481529060010190602001808311610d0057829003601f168201915b5050505050815250509050919050565b6060816000816001600160401b03811115610d4a57610d4a61304e565b604051908082528060200260200182016040528015610d7d57816020015b6060815260200190600190039081610d685790505b509050600034815b848110156105f4576000198501811436898984818110610da757610da7613618565b9050602002810190610db99190613860565b9050366000610dcb6020840184613652565b909250905080801580610dec5750610de66040850185613d19565b90508114155b15610e0a5760405163251f56a160e21b815260040160405180910390fd5b60005b81811015610edd57610ed56040518060a0016040528087600001358152602001868685818110610e3f57610e3f613618565b9050602002810190610e519190613d6f565b610e5a90613d89565b8152602001610e6c6040890189613d19565b85818110610e7c57610e7c613618565b905060600201803603810190610e929190613d95565b8152602001610ea76080890160608a01612fb7565b6001600160a01b03168152602001610ec560a0890160808a01613db6565b6001600160401b031690526121d1565b600101610e0d565b506000610f068535610eef858761382a565b610eff6080890160608a01612fb7565b8b8a6111e7565b8051909150610f15908961384d565b975080602001518a8881518110610f2e57610f2e613618565b602002602001018190525080602001515189019850505050505050610f538160010190565b9050610d85565b610f71610f6c36839003830183613e52565b611864565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610f88579050509050610fc336839003830160208401613b26565b81600081518110610fd657610fd6613618565b60209081029190910101526108b2823582610ff760e0860160c08701612fb7565b3460016119a8565b600042610606338483611eec565b604080516001808252818301909252600091829190816020015b6040805160e0810182526000808252602080830182905292820181905260608083018290526080830181905260a083015260c0820152825260001990920191018161102757905050905061107e6020840184613d6f565b61108790613d89565b8160008151811061109a5761109a613618565b60209081029190910101526110b4833582333460016111e7565b602001516000815181106110ca576110ca613618565b6020026020010151915050919050565b60006110ed6110e883613f08565b6121d1565b604080516001808252818301909252600091816020015b6040805160e0810182526000808252602080830182905292820181905260608083018290526080830181905260a083015260c0820152825260001990920191018161110457905050905061115b6020840184613d6f565b61116490613d89565b8160008151811061117757611177613618565b60209081029190910101526110b483358261119860c0870160a08801612fb7565b3460016111e7565b60004282825b81811015610797576111d08686838181106111c3576111c3613618565b9050602002013584611fcd565b6001016111a6565b60006111e26122b6565b905090565b6040805180820190915260008152606060208201528451604080518082019091526000815260606020820152816001600160401b0381111561122b5761122b61304e565b604051908082528060200260200182016040528015611254578160200160208202803683370190505b5060208201526040516351753e3760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a2ea7c6e906112a9908c90600401612ef5565b600060405180830381865afa1580156112c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ee919081019061402d565b805190915061131057604051635f9bd90760e11b815260040160405180910390fd5b6000836001600160401b0381111561132a5761132a61304e565b60405190808252806020026020018201604052801561136357816020015b611350612d90565b8152602001906001900390816113485790505b5090506000846001600160401b038111156113805761138061304e565b6040519080825280602002602001820160405280156113a9578160200160208202803683370190505b50905060005b858110156117585760008b82815181106113cb576113cb613618565b6020026020010151905060006001600160401b031681602001516001600160401b0316141580156114125750426001600160401b031681602001516001600160401b031611155b15611430576040516308e8b93760e01b815260040160405180910390fd5b8460400151158015611443575080604001515b156114615760405163157bd4c360e01b815260040160405180910390fd5b60006040518061016001604052806000801b81526020018f81526020016114854290565b6001600160401b0316815260200183602001516001600160401b0316815260200160006001600160401b031681526020018360600151815260200183600001516001600160a01b031681526020018d6001600160a01b03168152602001836040015115158152602001836080015181526020018360a001518152509050600080600090505b6115148382610a2c565b600081815260056020526040902054909250156115335760010161150a565b8183526000828152600560208181526040928390208651815590860151600182015591850151600283018054606088015160808901516001600160401b03908116600160801b0267ffffffffffffffff60801b19928216600160401b026fffffffffffffffffffffffffffffffff199094169190951617919091171691909117905560a0850151600383015560c08501516004830180546001600160a01b039283166001600160a01b031990911617905560e086015191830180546101008801511515600160a01b026001600160a81b03199091169390921692909217179055610120840151849190600682019061162b90826140fc565b50610140820151600782019061164190826140fc565b50505060608401511561167f57606084015160009081526005602052604090205461167f5760405163c5723b5160e01b815260040160405180910390fd5b8287868151811061169257611692613618565b60200260200101819052508360c001518686815181106116b4576116b4613618565b60200260200101818152505081896020015186815181106116d7576116d7613618565b60209081029190910101526004805460405163014b065360e11b81526001600160a01b03909116916302960ca691611711918791016134d3565b600060405180830381600087803b15801561172b57600080fd5b505af115801561173f573d6000803e3d6000fd5b50505050505050506117518160010190565b90506113af565b5061176883838360008c8c612341565b8452509193505050505b95945050505050565b60606000826001600160401b038111156117975761179761304e565b6040519080825280602002602001820160405280156117c0578160200160208202803683370190505b508451909150600090815b818110156118595760008782815181106117e7576117e7613618565b6020026020010151905060008151905060005b818110156118455782818151811061181457611814613618565b602002602001015187878151811061182e5761182e613618565b6020908102919091010152600195860195016117fa565b5050506118528160010190565b90506117cb565b509195945050505050565b60808101516001600160401b0316158015906118965750426001600160401b031681608001516001600160401b031611155b156118b457604051631ab7da6b60e01b815260040160405180910390fd5b60208082015160408084015160608501516001600160a01b0316600090815260038552828120805460018101909155865185518688015160808a01519651979895979396949561194b95611930957f2d4116d8c9824e4c316453e5c2843a1885580374159ce8768603c49085ef424c959493928a9291016141be565b6040516020818303038152906040528051906020012061264f565b905061198b85606001518285602001518660400151876000015160405160200161197793929190614224565b60405160208183030381529060405261267c565b61075757604051638baa579f60e01b815260040160405180910390fd5b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a2ea7c6e886040518263ffffffff1660e01b81526004016119f79190612ef5565b600060405180830381865afa158015611a14573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a3c919081019061402d565b8051909150611a5e57604051635f9bd90760e11b815260040160405180910390fd5b85516000816001600160401b03811115611a7a57611a7a61304e565b604051908082528060200260200182016040528015611ab357816020015b611aa0612d90565b815260200190600190039081611a985790505b5090506000826001600160401b03811115611ad057611ad061304e565b604051908082528060200260200182016040528015611af9578160200160208202803683370190505b50905060005b83811015611ece5760008a8281518110611b1b57611b1b613618565b6020908102919091018101518051600090815260059092526040909120805491925090611b5b5760405163c5723b5160e01b815260040160405180910390fd5b8c816001015414611b7f57604051635f9bd90760e11b815260040160405180910390fd5b60058101546001600160a01b038c8116911614611baf57604051634ca8886760e01b815260040160405180910390fd5b6005810154600160a01b900460ff16611bdb5760405163157bd4c360e01b815260040160405180910390fd5b6002810154600160801b90046001600160401b031615611c0e5760405163905e710760e01b815260040160405180910390fd5b4260028201805467ffffffffffffffff60801b198116600160801b6001600160401b03948516810291821793849055604080516101608101825287548152600188015460208201529386169286169290921791830191909152600160401b8304841660608301529091049091166080820152600382015460a082015260048201546001600160a01b0390811660c0830152600583015490811660e0830152600160a01b900460ff1615156101008201526006820180548391610120840191611cd590613b00565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0190613b00565b8015611d4e5780601f10611d2357610100808354040283529160200191611d4e565b820191906000526020600020905b815481529060010190602001808311611d3157829003601f168201915b50505050508152602001600782018054611d6790613b00565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9390613b00565b8015611de05780601f10611db557610100808354040283529160200191611de0565b820191906000526020600020905b815481529060010190602001808311611dc357829003601f168201915b505050505081525050858481518110611dfb57611dfb613618565b60200260200101819052508160200151848481518110611e1d57611e1d613618565b602002602001018181525050600460009054906101000a90046001600160a01b03166001600160a01b0316639566523582600001548d8460020160109054906101000a90046001600160401b03166040518463ffffffff1660e01b8152600401611e8993929190614279565b600060405180830381600087803b158015611ea357600080fd5b505af1158015611eb7573d6000803e3d6000fd5b505050505050611ec78160010190565b9050611aff565b50611ede84838360018b8b612341565b9a9950505050505050505050565b6001600160a01b038316600090815260076020908152604080832085845291829052909120546001600160401b031615611f395760405163ec9d6eeb60e01b815260040160405180910390fd5b60008381526020829052604090819020805467ffffffffffffffff19166001600160401b038516179055600480549151637a99dcd960e01b81526001600160a01b0390921691637a99dcd991611f9591889188918891016142a1565b600060405180830381600087803b158015611faf57600080fd5b505af1158015611fc3573d6000803e3d6000fd5b5050505050505050565b6000828152600660205260409020546001600160401b031615612003576040516317133ca360e11b815260040160405180910390fd5b60008281526006602052604090819020805467ffffffffffffffff19166001600160401b03841617905560048054915163d7d2054560e01b81526001600160a01b039092169163d7d205459161205d9186918691016142bc565b600060405180830381600087803b15801561207757600080fd5b505af115801561208b573d6000803e3d6000fd5b505050505050565b606060006120a0836126df565b60010190506000816001600160401b038111156120bf576120bf61304e565b6040519080825280601f01601f1916602001820160405280156120e9576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120f3575b509392505050565b606060ff831461214057612139836127b7565b9050610606565b81805461214c90613b00565b80601f016020809104026020016040519081016040528092919081815260200182805461217890613b00565b80156121c55780601f1061219a576101008083540402835291602001916121c5565b820191906000526020600020905b8154815290600101906020018083116121a857829003601f168201915b50505050509050610606565b60808101516001600160401b0316158015906122035750426001600160401b031681608001516001600160401b031611155b1561222157604051631ab7da6b60e01b815260040160405180910390fd5b6020808201516040808401516060808601516001600160a01b0316600090815260038652838120805460018101909155875186518789015187890151958901516080808b01518051908d012060c08c0151918e01519a519b9c999b969a979961194b99611930997ff83bb2b0ede93a840239f7e701a54d9bc35f03701f51ae153d601c6947ff3d3f99919594928e92016142d7565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561230f57507f000000000000000000000000000000000000000000000000000000000000000046145b1561233957507f000000000000000000000000000000000000000000000000000000000000000090565b6111e26127f6565b8451600090600181900361239957612391888860008151811061236657612366613618565b60200260200101518860008151811061238157612381613618565b602002602001015188888861288c565b915050612645565b60208801516001600160a01b0381166124145760005b828110156123f9578781815181106123c9576123c9613618565b60200260200101516000146123f157604051631574f9f360e01b815260040160405180910390fd5b6001016123af565b5083156124095761240985612ac8565b600092505050612645565b600080826001600160a01b031663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612455573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612479919061436c565b905060005b848110156125045760008a828151811061249a5761249a613618565b60200260200101519050806000036124b257506124fc565b826124d057604051631574f9f360e01b815260040160405180910390fd5b888111156124f15760405163044044a560e21b815260040160405180910390fd5b978890039792909201915b60010161247e565b5087156125a0576040516308e1252960e41b81526001600160a01b03841690638e12529090849061253b908e908e906004016143ff565b60206040518083038185885af1158015612559573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061257e919061436c565b61259b5760405163bf2f3a8b60e01b815260040160405180910390fd5b612630565b60405163383aef5760e01b81526001600160a01b0384169063383aef579084906125d0908e908e906004016143ff565b60206040518083038185885af11580156125ee573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612613919061436c565b6126305760405163e8bee83960e01b815260040160405180910390fd5b851561263f5761263f87612ac8565b50925050505b9695505050505050565b600061060661265c6122b6565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600061268b8585612adb565b909250905060008160048111156126a4576126a4614424565b1480156126c25750856001600160a01b0316826001600160a01b0316145b806126d357506126d3868686612b20565b925050505b9392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061271e5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061274a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061276857662386f26fc10000830492506010015b6305f5e1008310612780576305f5e100830492506008015b612710831061279457612710830492506004015b606483106127a6576064830492506002015b600a83106106065760010192915050565b606060006127c483612c0c565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000463060405160200161287195949392919061443a565b60405160208183030381529060405280519060200120905090565b60208601516000906001600160a01b0381166128da5785156128c157604051631574f9f360e01b815260040160405180910390fd5b82156128d0576128d084612ac8565b6000915050612645565b851561298657806001600160a01b031663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561291e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612942919061436c565b61295f57604051631574f9f360e01b815260040160405180910390fd5b838611156129805760405163044044a560e21b815260040160405180910390fd5b85840393505b8415612a1f5760405163b4188e2560e01b81526001600160a01b0382169063b4188e259088906129ba908b906004016134d3565b60206040518083038185885af11580156129d8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906129fd919061436c565b612a1a5760405163ccf3bb2760e01b815260040160405180910390fd5b612aad565b6040516304b832d560e11b81526001600160a01b0382169063097065aa908890612a4d908b906004016134d3565b60206040518083038185885af1158015612a6b573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612a90919061436c565b612aad5760405163bd8ba84d60e01b815260040160405180910390fd5b8215612abc57612abc84612ac8565b50939695505050505050565b8015612ad857612ad83382612c34565b50565b6000808251604103612b115760208301516040840151606085015160001a612b0587828585612cd9565b94509450505050612b19565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b8686604051602401612b4a92919061447c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612b88919061449c565b600060405180830381855afa9150503d8060008114612bc3576040519150601f19603f3d011682016040523d82523d6000602084013e612bc8565b606091505b5091509150818015612bdc57506020815110155b80156126d357508051630b135d3f60e11b90612c0190830160209081019084016144a8565b149695505050505050565b600060ff8216601f81111561060657604051632cd44ac360e21b815260040160405180910390fd5b80471015612c5d5760405162461bcd60e51b8152600401612c54906144c9565b60405180910390fd5b6000826001600160a01b031682604051612c7690614504565b60006040518083038185875af1925050503d8060008114612cb3576040519150601f19603f3d011682016040523d82523d6000602084013e612cb8565b606091505b50509050806108b25760405162461bcd60e51b8152600401612c549061450f565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612d105750600090506003612d87565b600060018787878760405160008152602001604052604051612d359493929190614579565b6020604051602081039080840390855afa158015612d57573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612d8057600060019250925050612d87565b9150600090505b94509492505050565b604080516101608101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820192909252610120810182905261014081019190915290565b60008083601f840112612e0357612e03600080fd5b5081356001600160401b03811115612e1d57612e1d600080fd5b602083019150836020820283011115612b1957612b19600080fd5b60008060208385031215612e4e57612e4e600080fd5b82356001600160401b03811115612e6757612e67600080fd5b612e7385828601612dee565b92509250509250929050565b805b82525050565b6000612e938383612e7f565b505060200190565b6000612ea5825190565b80845260209384019383018060005b83811015612ed9578151612ec88882612e87565b975060208301925050600101612eb4565b509495945050505050565b602080825281016126d88184612e9b565b602081016106068284612e7f565b6001600160401b038116612e81565b602081016106068284612f03565b60005b83811015612f3b578181015183820152602001612f23565b50506000910152565b6000612f4e825190565b808452602084019350612f65818560208601612f20565b601f01601f19169290920192915050565b602080825281016126d88184612f44565b60006001600160a01b038216610606565b612fa181612f87565b8114612ad857600080fd5b803561060681612f98565b600060208284031215612fcc57612fcc600080fd5b6000612fd88484612fac565b949350505050565b600060608284031215612ff557612ff5600080fd5b50919050565b60006060828403121561301057613010600080fd5b6000612fd88484612fe0565b80612fa1565b80356106068161301c565b60006020828403121561304257613042600080fd5b6000612fd88484613022565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156130895761308961304e565b6040525050565b600061309b60405190565b90506130a78282613064565b919050565b6001600160401b038116612fa1565b8035610606816130ac565b801515612fa1565b8035610606816130c6565b60006001600160401b038211156130f2576130f261304e565b601f19601f83011660200192915050565b82818337506000910152565b600061312261311d846130d9565b613090565b90508281526020810184848401111561313d5761313d600080fd5b61211e848285613103565b600082601f83011261315c5761315c600080fd5b8135612fd884826020860161310f565b6000610160828403121561318257613182600080fd5b61318d610160613090565b9050600061319b8484613022565b82525060206131ac84848301613022565b60208301525060406131c0848285016130bb565b60408301525060606131d4848285016130bb565b60608301525060806131e8848285016130bb565b60808301525060a06131fc84828501613022565b60a08301525060c061321084828501612fac565b60c08301525060e061322484828501612fac565b60e083015250610100613239848285016130ce565b610100830152506101208201356001600160401b0381111561325d5761325d600080fd5b61326984828501613148565b610120830152506101408201356001600160401b0381111561328d5761328d600080fd5b61329984828501613148565b6101408301525092915050565b63ffffffff8116612fa1565b8035610606816132a6565b600080604083850312156132d3576132d3600080fd5b82356001600160401b038111156132ec576132ec600080fd5b6132f88582860161316c565b9250506020613309858286016132b2565b9150509250929050565b6001600160f81b03198116612e81565b612e8181612f87565b6000613336825190565b80845260209384019383018060005b83811015612ed95781516133598882612e87565b975060208301925050600101613345565b60e08101613378828a613313565b818103602083015261338a8189612f44565b9050818103604083015261339e8188612f44565b90506133ad6060830187612e7f565b6133ba6080830186613323565b6133c760a0830185612e7f565b81810360c08301526133d9818461332c565b9998505050505050505050565b801515612e81565b80516000906101608401906134038582612e7f565b5060208301516134166020860182612e7f565b5060408301516134296040860182612f03565b50606083015161343c6060860182612f03565b50608083015161344f6080860182612f03565b5060a083015161346260a0860182612e7f565b5060c083015161347560c0860182613323565b5060e083015161348860e0860182613323565b5061010083015161349d6101008601826133e6565b506101208301518482036101208601526134b78282612f44565b9150506101408301518482036101408601526117728282612f44565b602080825281016126d881846133ee565b60006101008284031215612ff557612ff5600080fd5b6000610100828403121561351057613510600080fd5b6000612fd884846134e4565b600060408284031215612ff557612ff5600080fd5b60006020828403121561354657613546600080fd5b81356001600160401b0381111561355f5761355f600080fd5b612fd88482850161351c565b600060e08284031215612ff557612ff5600080fd5b60006020828403121561359557613595600080fd5b81356001600160401b038111156135ae576135ae600080fd5b612fd88482850161356b565b6020810161060682846133e6565b60006106066001600160a01b0383166135df565b90565b6001600160a01b031690565b6000610606826135c8565b6000610606826135eb565b612e81816135f6565b602081016106068284613601565b634e487b7160e01b600052603260045260246000fd5b60008235603e193684900301811261364857613648600080fd5b9190910192915050565b6000808335601e193685900301811261366d5761366d600080fd5b8084019250823591506001600160401b0382111561368d5761368d600080fd5b602092830192820236038313156136a6576136a6600080fd5b509250929050565b60006001600160401b038211156136c7576136c761304e565b5060209081020190565b600060e082840312156136e6576136e6600080fd5b6136f060e0613090565b905060006136fe8484612fac565b825250602061370f848483016130bb565b6020830152506040613723848285016130ce565b604083015250606061373784828501613022565b60608301525060808201356001600160401b0381111561375957613759600080fd5b61376584828501613148565b60808301525060a08201356001600160401b0381111561378757613787600080fd5b61379384828501613148565b60a08301525060c06137a784828501613022565b60c08301525092915050565b60006137c161311d846136ae565b838152905060208082019084028301858111156137e0576137e0600080fd5b835b818110156138205780356001600160401b0381111561380357613803600080fd5b80860161381089826136d1565b85525050602092830192016137e2565b5050509392505050565b60006126d83684846137b3565b634e487b7160e01b600052601160045260246000fd5b8181038181111561060657610606613837565b60008235609e193684900301811261364857613648600080fd5b60006040828403121561388f5761388f600080fd5b6138996040613090565b905060006138a78484613022565b82525060206138b884848301613022565b60208301525092915050565b60006138d261311d846136ae565b838152905060208101604084028301858111156138f1576138f1600080fd5b835b818110156138205780613906888261387a565b8452506020909201916040016138f3565b600082601f83011261392b5761392b600080fd5b8135612fd88482602086016138c4565b60ff8116612fa1565b80356106068161393b565b60006060828403121561396457613964600080fd5b61396e6060613090565b9050600061397c8484613944565b825250602061398d84848301613022565b60208301525060406139a184828501613022565b60408301525092915050565b60006139bb61311d846136ae565b838152905060208101606084028301858111156139da576139da600080fd5b835b8181101561382057806139ef888261394f565b8452506020909201916060016139dc565b600082601f830112613a1457613a14600080fd5b8135612fd88482602086016139ad565b600060a08284031215613a3957613a39600080fd5b613a4360a0613090565b90506000613a518484613022565b82525060208201356001600160401b03811115613a7057613a70600080fd5b613a7c84828501613917565b60208301525060408201356001600160401b03811115613a9e57613a9e600080fd5b613aaa84828501613a00565b6040830152506060613abe84828501612fac565b6060830152506080613ad2848285016130bb565b60808301525092915050565b60006106063683613a24565b634e487b7160e01b600052602260045260246000fd5b600281046001821680613b1457607f821691505b602082108103612ff557612ff5613aea565b600060408284031215613b3b57613b3b600080fd5b6000612fd8848461387a565b6000808335601e1936859003018112613b6257613b62600080fd5b8084019250823591506001600160401b03821115613b8257613b82600080fd5b6020830192506040820236038313156136a6576136a6600080fd5b6000613ba7825190565b613bb5818560208601612f20565b9290920192915050565b6000613bcb8286613b9d565b601760f91b81526001019150613be18285613b9d565b601760f91b815260010191506117728284613b9d565b80612e81565b60006106068260601b90565b600061060682613bfd565b612e81613c2082612f87565b613c09565b60006106068260c01b90565b612e816001600160401b038216613c25565b60006106068260f81b90565b600061060682613c43565b612e81811515613c4f565b60006106068260e01b90565b612e8163ffffffff8216613c65565b6000613c8c828c613bf7565b602082019150613c9c828b613c14565b601482019150613cac828a613c14565b601482019150613cbc8289613c31565b600882019150613ccc8288613c31565b600882019150613cdc8287613c5a565b600182019150613cec8286613bf7565b602082019150613cfc8285613b9d565b9150613d088284613c71565b506004019998505050505050505050565b6000808335601e1936859003018112613d3457613d34600080fd5b8084019250823591506001600160401b03821115613d5457613d54600080fd5b6020830192506060820236038313156136a6576136a6600080fd5b6000823560de193684900301811261364857613648600080fd5b600061060636836136d1565b600060608284031215613daa57613daa600080fd5b6000612fd8848461394f565b600060208284031215613dcb57613dcb600080fd5b6000612fd884846130bb565b60006101008284031215613ded57613ded600080fd5b613df760a0613090565b90506000613e058484613022565b8252506020613e168484830161387a565b6020830152506060613e2a8482850161394f565b60408301525060c0613e3e84828501612fac565b60608301525060e0613ad2848285016130bb565b60006101008284031215613e6857613e68600080fd5b6000612fd88484613dd7565b600060e08284031215613e8957613e89600080fd5b613e9360a0613090565b90506000613ea18484613022565b82525060208201356001600160401b03811115613ec057613ec0600080fd5b613ecc848285016136d1565b6020830152506040613ee08482850161394f565b60408301525060a0613ef484828501612fac565b60608301525060c0613ad2848285016130bb565b60006106063683613e74565b80516106068161301c565b600061060682612f87565b612fa181613f1f565b805161060681613f2a565b8051610606816130c6565b6000613f5761311d846130d9565b905082815260208101848484011115613f7257613f72600080fd5b61211e848285612f20565b600082601f830112613f9157613f91600080fd5b8151612fd8848260208601613f49565b600060808284031215613fb657613fb6600080fd5b613fc06080613090565b90506000613fce8484613f14565b8252506020613fdf84848301613f33565b6020830152506040613ff384828501613f3e565b60408301525060608201516001600160401b0381111561401557614015600080fd5b61402184828501613f7d565b60608301525092915050565b60006020828403121561404257614042600080fd5b81516001600160401b0381111561405b5761405b600080fd5b612fd884828501613fa1565b60006106066135dc8381565b61407c83614067565b815460001960089490940293841b1916921b91909117905550565b60006108b2818484614073565b818110156140bf576140b7600082614097565b6001016140a4565b5050565b601f8211156108b2576000818152602090206020601f850104810160208510156140ea5750805b6107576020601f8601048301826140a4565b81516001600160401b038111156141155761411561304e565b61411f8254613b00565b61412a8282856140c3565b6020601f83116001811461415e57600084156141465750858201515b600019600886021c198116600286021786555061208b565b600085815260208120601f198616915b8281101561418e578885015182556020948501946001909201910161416e565b868310156141aa5784890151600019601f89166008021c191682555b600160028802018855505050505050505050565b60c081016141cc8289612e7f565b6141d96020830188612e7f565b6141e66040830187612e7f565b6141f36060830186612e7f565b6142006080830185612e7f565b61420d60a0830184612f03565b979650505050505050565b612e8160ff8216613c43565b60006142308286613bf7565b6020820191506142408285613bf7565b6020820191506142508284614218565b506001019392505050565b60006106066135dc6001600160401b03841681565b612e818161425b565b606081016142878286612e7f565b6142946020830185613323565b612fd86040830184614270565b606081016142af8286613323565b6142946020830185612e7f565b604081016142ca8285612e7f565b6126d86020830184614270565b61014081016142e6828d612e7f565b6142f3602083018c612e7f565b614300604083018b613323565b61430d606083018a612f03565b61431a60808301896133e6565b61432760a0830188612e7f565b61433460c0830187612e7f565b61434160e0830186612e7f565b61434f610100830185612e7f565b61435d610120830184612f03565b9b9a5050505050505050505050565b60006020828403121561438157614381600080fd5b6000612fd88484613f3e565b60006126d883836133ee565b60006143a3825190565b808452602084019350836020820285016143bd8560200190565b8060005b858110156143f257848403895281516143da858261438d565b94506020830160209a909a01999250506001016143c1565b5091979650505050505050565b604080825281016144108185614399565b90508181036020830152612fd8818461332c565b634e487b7160e01b600052602160045260246000fd5b60a081016144488288612e7f565b6144556020830187612e7f565b6144626040830186612e7f565b61446f6060830185612e7f565b6126456080830184613323565b6040810161448a8285612e7f565b8181036020830152612fd88184612f44565b60006126d88284613b9d565b6000602082840312156144bd576144bd600080fd5b6000612fd88484613f14565b6020808252810161060681601d81527f416464726573733a20696e73756666696369656e742062616c616e6365000000602082015260400190565b6000610606826135dc565b6020808252810161060681603a81527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260208201527f6563697069656e74206d61792068617665207265766572746564000000000000604082015260600190565b60ff8116612e81565b608081016145878287612e7f565b6145946020830186614570565b6145a16040830185612e7f565b6117726060830184612e7f56fea2646970667358221220828aa64a1a2599abebfa62ccc23834a3481389356bbc4bea469dfd27a419581264736f6c63430008130033",
  "devdoc": {
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      }
    },
    "kind": "dev",
    "methods": {
      "_getUID((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes,string),uint32)": {
        "details": "Calculates a UID for a given attestation.",
        "params": {
          "attestation": "The input attestation.",
          "bump": "A bump value to use in case of a UID conflict."
        },
        "returns": {
          "_0": "Attestation UID."
        }
      },
      "attest((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)))": {
        "params": {
          "request": "The arguments of the attestation request."
        },
        "returns": {
          "_0": "The UID of the new attestation. Example:     attest({         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",         data: {             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",             expirationTime: 0,             revocable: true,             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",             data: \"0xF00D\",             value: 0         }     })"
        }
      },
      "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256),(uint8,bytes32,bytes32),address,uint64))": {
        "params": {
          "delegatedRequest": "The arguments of the delegated attestation request."
        },
        "returns": {
          "_0": "The UID of the new attestation. Example:     attestByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         signature: {             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',         deadline: 1673891048     })"
        }
      },
      "constructor": {
        "details": "Creates a new TAS instance.",
        "params": {
          "registry": "The address of the global schema registry."
        }
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "getAttestTypeHash()": {
        "returns": {
          "_0": "The EIP712 type hash for the attest function."
        }
      },
      "getAttestation(bytes32)": {
        "params": {
          "uid": "The UID of the attestation to retrieve."
        },
        "returns": {
          "_0": "The attestation data members."
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "The domain separator used in the encoding of the signatures for attest, and revoke."
        }
      },
      "getName()": {
        "returns": {
          "_0": "The EIP712 name."
        }
      },
      "getNonce(address)": {
        "params": {
          "account": "The requested account."
        },
        "returns": {
          "_0": "The current nonce."
        }
      },
      "getRevokeTypeHash()": {
        "returns": {
          "_0": "The EIP712 type hash for the revoke function."
        }
      },
      "getSchemaRegistry()": {
        "returns": {
          "_0": "The address of the global schema registry."
        }
      },
      "increaseNonce(uint256)": {
        "params": {
          "newNonce": "The (higher) new value."
        }
      },
      "isAttestationValid(bytes32)": {
        "params": {
          "uid": "The UID of the attestation to retrieve."
        },
        "returns": {
          "_0": "Whether an attestation exists."
        }
      },
      "multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)[])[])": {
        "params": {
          "multiRequests": "The arguments of the multi attestation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization."
        },
        "returns": {
          "_0": "The UIDs of the new attestations. Example:     multiAttest([{         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 1000         },         {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 0,             revocable: false,             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',             data: '0x00',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: true,             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',             data: '0x12345678',             value: 0         },     }])"
        }
      },
      "multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
        "params": {
          "multiDelegatedRequests": "The arguments of the delegated multi attestation requests. The requests should be     grouped by distinct schema ids to benefit from the best batching optimization."
        },
        "returns": {
          "_0": "The UIDs of the new attestations. Example:     multiAttestByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         {             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: false,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x00',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',         deadline: 1673891048     }])"
        }
      },
      "multiRevoke((bytes32,(bytes32,uint256)[])[])": {
        "params": {
          "multiRequests": "The arguments of the multi revocation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization. Example:     multiRevoke([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',             value: 0         },     }])"
        }
      },
      "multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
        "params": {
          "multiDelegatedRequests": "The arguments of the delegated multi revocation attestation requests. The requests     should be grouped by distinct schema ids to benefit from the best batching optimization. Example:     multiRevokeByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     }])"
        }
      },
      "multiRevokeOffchain(bytes32[])": {
        "params": {
          "data": "The data to timestamp."
        },
        "returns": {
          "_0": "The timestamp the data was revoked with."
        }
      },
      "multiTimestamp(bytes32[])": {
        "params": {
          "data": "The data to timestamp."
        },
        "returns": {
          "_0": "The timestamp the data was timestamped with."
        }
      },
      "revoke((bytes32,(bytes32,uint256)))": {
        "params": {
          "request": "The arguments of the revocation request. Example:     revoke({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',             value: 0         }     })"
        }
      },
      "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))": {
        "params": {
          "delegatedRequest": "The arguments of the delegated revocation request. Example:     revokeByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',             value: 0         },         signature: {             v: 27,             r: '0xb593...7142',             s: '0x0f5b...2cce'         },         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     })"
        }
      },
      "revokeOffchain(bytes32)": {
        "params": {
          "data": "The data to timestamp."
        },
        "returns": {
          "_0": "The timestamp the data was revoked with."
        }
      },
      "timestamp(bytes32)": {
        "params": {
          "data": "The data to timestamp."
        },
        "returns": {
          "_0": "The timestamp the data was timestamped with."
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "title": "TAS",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "attest((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)))": {
        "notice": "Attests to a specific schema."
      },
      "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256),(uint8,bytes32,bytes32),address,uint64))": {
        "notice": "Attests to a specific schema via the provided ECDSA signature."
      },
      "getAttestTypeHash()": {
        "notice": "Returns the EIP712 type hash for the attest function."
      },
      "getAttestation(bytes32)": {
        "notice": "Returns an existing attestation by UID."
      },
      "getDomainSeparator()": {
        "notice": "Returns the domain separator used in the encoding of the signatures for attest, and revoke."
      },
      "getName()": {
        "notice": "Returns the EIP712 name."
      },
      "getNonce(address)": {
        "notice": "Returns the current nonce per-account."
      },
      "getRevokeTypeHash()": {
        "notice": "Returns the EIP712 type hash for the revoke function."
      },
      "getSchemaRegistry()": {
        "notice": "Returns the address of the global schema registry."
      },
      "increaseNonce(uint256)": {
        "notice": "Provides users an option to invalidate nonces by increasing their nonces to (higher) new values."
      },
      "isAttestationValid(bytes32)": {
        "notice": "Checks whether an attestation exists."
      },
      "multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)[])[])": {
        "notice": "Attests to multiple schemas."
      },
      "multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,string,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
        "notice": "Attests to multiple schemas using via provided ECDSA signatures."
      },
      "multiRevoke((bytes32,(bytes32,uint256)[])[])": {
        "notice": "Revokes existing attestations to multiple schemas."
      },
      "multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
        "notice": "Revokes existing attestations to multiple schemas via provided ECDSA signatures."
      },
      "multiRevokeOffchain(bytes32[])": {
        "notice": "Revokes the specified multiple bytes32 data."
      },
      "multiTimestamp(bytes32[])": {
        "notice": "Timestamps the specified multiple bytes32 data."
      },
      "revoke((bytes32,(bytes32,uint256)))": {
        "notice": "Revokes an existing attestation to a specific schema."
      },
      "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))": {
        "notice": "Revokes an existing attestation to a specific schema via the provided ECDSA signature."
      },
      "revokeOffchain(bytes32)": {
        "notice": "Revokes the specified bytes32 data."
      },
      "timestamp(bytes32)": {
        "notice": "Timestamps the specified bytes32 data."
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "The Tableland Attestation Service protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2603,
        "contract": "contracts/TAS.sol:TAS",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2605,
        "contract": "contracts/TAS.sol:TAS",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 8297,
        "contract": "contracts/TAS.sol:TAS",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 8301,
        "contract": "contracts/TAS.sol:TAS",
        "label": "_nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6404,
        "contract": "contracts/TAS.sol:TAS",
        "label": "tableland",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITASIndexer)8645"
      },
      {
        "astId": 6409,
        "contract": "contracts/TAS.sol:TAS",
        "label": "_db",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Attestation)5182_storage)"
      },
      {
        "astId": 6413,
        "contract": "contracts/TAS.sol:TAS",
        "label": "_timestamps",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint64)"
      },
      {
        "astId": 6419,
        "contract": "contracts/TAS.sol:TAS",
        "label": "_revocationsOffchain",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint64))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ITASIndexer)8645": {
        "encoding": "inplace",
        "label": "contract ITASIndexer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint64))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint64)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Attestation)5182_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Attestation)",
        "numberOfBytes": "32",
        "value": "t_struct(Attestation)5182_storage"
      },
      "t_mapping(t_bytes32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Attestation)5182_storage": {
        "encoding": "inplace",
        "label": "struct Attestation",
        "members": [
          {
            "astId": 5161,
            "contract": "contracts/TAS.sol:TAS",
            "label": "uid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5163,
            "contract": "contracts/TAS.sol:TAS",
            "label": "schema",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5165,
            "contract": "contracts/TAS.sol:TAS",
            "label": "time",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 5167,
            "contract": "contracts/TAS.sol:TAS",
            "label": "expirationTime",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 5169,
            "contract": "contracts/TAS.sol:TAS",
            "label": "revocationTime",
            "offset": 16,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 5171,
            "contract": "contracts/TAS.sol:TAS",
            "label": "refUID",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 5173,
            "contract": "contracts/TAS.sol:TAS",
            "label": "recipient",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5175,
            "contract": "contracts/TAS.sol:TAS",
            "label": "attester",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5177,
            "contract": "contracts/TAS.sol:TAS",
            "label": "revocable",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 5179,
            "contract": "contracts/TAS.sol:TAS",
            "label": "data",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5181,
            "contract": "contracts/TAS.sol:TAS",
            "label": "dataBase64",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}