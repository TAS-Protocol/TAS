{
  "address": "0xC32c9cE03c097bbcb1e97d85524a7ad234f732fE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITAS",
          "name": "tas",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_splitterFactory",
          "type": "address"
        },
        {
          "internalType": "contract ISchemaRegistry",
          "name": "_schemaRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTAS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPayable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "attesters",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "revokers",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "schema",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "schemaName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "schemaDescription",
          "type": "string"
        }
      ],
      "name": "ACSchemaRegistered",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "attest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPayable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "attestations",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "multiAttest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "attestations",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "multiRevoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "revoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitterFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd72b1042e769f10266d3348894b4d5f9473d5711dd83077c6e409f72c5337453",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0xC32c9cE03c097bbcb1e97d85524a7ad234f732fE",
    "transactionIndex": 21,
    "gasUsed": "2361312",
    "logsBloom": "0x
    "blockHash": "0x2df713ebecb3dacc40c3389566856be13cc2ef522e1401dafeaa9af04a41c46a",
    "transactionHash": "0xd72b1042e769f10266d3348894b4d5f9473d5711dd83077c6e409f72c5337453",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 9647494,
        "transactionHash": "0xd72b1042e769f10266d3348894b4d5f9473d5711dd83077c6e409f72c5337453",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c32c9ce03c097bbcb1e97d85524a7ad234f732fe",
          "0x0000000000000000000000000000000000000000000000000000000000000677"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x2df713ebecb3dacc40c3389566856be13cc2ef522e1401dafeaa9af04a41c46a"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 9647494,
        "transactionHash": "0xd72b1042e769f10266d3348894b4d5f9473d5711dd83077c6e409f72c5337453",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000c32c9ce03c097bbcb1e97d85524a7ad234f732fe00000000000000000000000000000000000000000000000000000000000006770000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000003e435245415445205441424c4520736368656d615f6174746573746572735f3528736368656d6155494420746578742c2061747465737465722074657874290000",
        "logIndex": 27,
        "blockHash": "0x2df713ebecb3dacc40c3389566856be13cc2ef522e1401dafeaa9af04a41c46a"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 9647494,
        "transactionHash": "0xd72b1042e769f10266d3348894b4d5f9473d5711dd83077c6e409f72c5337453",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c32c9ce03c097bbcb1e97d85524a7ad234f732fe",
          "0x0000000000000000000000000000000000000000000000000000000000000678"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x2df713ebecb3dacc40c3389566856be13cc2ef522e1401dafeaa9af04a41c46a"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 9647494,
        "transactionHash": "0xd72b1042e769f10266d3348894b4d5f9473d5711dd83077c6e409f72c5337453",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000c32c9ce03c097bbcb1e97d85524a7ad234f732fe00000000000000000000000000000000000000000000000000000000000006780000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000003c435245415445205441424c4520736368656d615f7265766f6b6572735f3528736368656d6155494420746578742c207265766f6b657220746578742900000000",
        "logIndex": 29,
        "blockHash": "0x2df713ebecb3dacc40c3389566856be13cc2ef522e1401dafeaa9af04a41c46a"
      }
    ],
    "blockNumber": 9647494,
    "cumulativeGasUsed": "19700856",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5E0FFE0950231EfaD5972afce26f1a91F9B7a74b",
    "0x0EA67bE9F10DDfEC17ce67fC802ecE32cf5C4f29",
    "0x38Db6ff229c7d357ed34126fBd7F9200553eb245"
  ],
  "numDeployments": 1,
  "solcInputHash": "49ec6d5a7c331538ab42d44533de0f70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITAS\",\"name\":\"tas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_splitterFactory\",\"type\":\"address\"},{\"internalType\":\"contract ISchemaRegistry\",\"name\":\"_schemaRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"attesters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"revokers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaDescription\",\"type\":\"string\"}],\"name\":\"ACSchemaRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitterFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isPayable()\":{\"returns\":{\"_0\":\"True, indicating that the contract can accept payments.\"}},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"ContentSubscriptionResolver\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation and verifies whether it's valid.\"},\"isPayable()\":{\"notice\":\"Indicates whether the contract is designed to handle incoming payments.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes multiple attestations and verifies whether they are valid.\"},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes revocation of multiple attestation and verifies they can be revoked.\"},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation revocation and verifies if it can be revoked.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"A schema resolver subcription to content example\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolver/examples/ACResolver.sol\":\"ACResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Goerli.\\n    address internal constant GOERLI =\\n        0xDA8EA22d092307874f30A1F277D1388dca0BA97a;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Goerli.\\n    address internal constant ARBITRUM_GOERLI =\\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Hyperspace.\\n    address internal constant FILECOIN_HYPERSPACE =\\n        0x0B9737ab4B3e5303CB67dB031b509697e31c02d3;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (ITablelandTables) {\\n        if (block.chainid == 1) {\\n            return ITablelandTables(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return ITablelandTables(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return ITablelandTables(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return ITablelandTables(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return ITablelandTables(MATIC);\\n        } else if (block.chainid == 314) {\\n            return ITablelandTables(FILECOIN);\\n        } else if (block.chainid == 5) {\\n            return ITablelandTables(GOERLI);\\n        } else if (block.chainid == 420) {\\n            return ITablelandTables(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421613) {\\n            return ITablelandTables(ARBITRUM_GOERLI);\\n        } else if (block.chainid == 80001) {\\n            return ITablelandTables(MATICMUM);\\n        } else if (block.chainid == 3141) {\\n            return ITablelandTables(FILECOIN_HYPERSPACE);\\n        } else if (block.chainid == 31337) {\\n            return ITablelandTables(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x245cfb7b5e4d9e4874146dac869e7a28a5c9caf2251fd9eeb3518d3e57f0ca01\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidTAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\",\"keccak256\":\"0x0d95a05a089cc0388e57e1baf03fd4882de7c6424311d50831f627a03752092e\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ISchemaRegistry {\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(        \\n        string calldata schema,\\n        string calldata schemaName,\\n        string memory schemaDescription,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\",\"keccak256\":\"0x321d2ec466d25d766edd119eb0aba54fdecfc1c8a402a8be7a4a86629b675d8b\",\"license\":\"MIT\"},\"contracts/ITAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title ITAS\\n/// @notice TAS - Tableland Attestation Service interface.\\ninterface ITAS {\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n}\",\"keccak256\":\"0xbc746a15c4be99028921309b514b0c28a6639d6e17bd241bc9135f94c0471198\",\"license\":\"MIT\"},\"contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\",\"keccak256\":\"0x3c960ee02543c88107d840df240bab23ac07d583ba7ff582c9b5cac1b8b73a7c\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\",\"keccak256\":\"0x1dec285f07614107174b652568474a55b6a2692631888731967fb5cc53d4f417\",\"license\":\"MIT\"},\"contracts/resolver/SchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { ITAS, Attestation } from \\\"../ITAS.sol\\\";\\nimport { AccessDenied, InvalidTAS, InvalidLength, uncheckedInc } from \\\"../Common.sol\\\";\\nimport { Semver } from \\\"../Semver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @title SchemaResolver\\n/// @notice The base schema resolver contract.\\nabstract contract SchemaResolver is ISchemaResolver, Semver {\\n    error InsufficientValue();\\n    error NotPayable();\\n\\n    // The global tas contract.\\n    ITAS internal immutable _tas;\\n\\n    /// @dev Creates a new resolver.\\n    /// @param tas The address of the global tas contract.\\n    constructor(ITAS tas) Semver(0, 0, 1) {\\n        if (address(tas) == address(0)) {\\n            revert InvalidTAS();\\n        }\\n\\n        _tas = tas;\\n    }\\n\\n    /// @dev Ensures that only the tas contract can make this call.\\n    modifier onlytas() {\\n        _onlytas();\\n\\n        _;\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function isPayable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev ETH callback.\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function attest(Attestation calldata attestation) external payable onlytas returns (bool) {\\n        return onAttest(attestation, msg.value);\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlytas returns (bool) {\\n        uint256 length = attestations.length;\\n        if (length != values.length) {\\n            revert InvalidLength();\\n        }\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Pltase note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the attestation to the underlying resolver and return false in case it isn't approved.\\n            if (!onAttest(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function revoke(Attestation calldata attestation) external payable onlytas returns (bool) {\\n        return onRevoke(attestation, msg.value);\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlytas returns (bool) {\\n        uint256 length = attestations.length;\\n        if (length != values.length) {\\n            revert InvalidLength();\\n        }\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Pltase note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the revocation to the underlying resolver and return false in case it isn't approved.\\n            if (!onRevoke(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice A resolver callback that should be implemented by child contracts.\\n    /// @param attestation The new attestation.\\n    /// @param value An explicit ETH amount that was sent to the resolver. Pltase note that this value is verified in\\n    ///     both attest() and multiAttest() callbacks tas-only callbacks and that in case of multi attestations, it'll\\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\\n    ///     attestations in the batch.\\n    /// @return Whether the attestation is valid.\\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @param value An explicit ETH amount that was sent to the resolver. Pltase note that this value is verified in\\n    ///     both revoke() and multiRevoke() callbacks tas-only callbacks and that in case of multi attestations, it'll\\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\\n    ///     attestations in the batch.\\n    /// @return Whether the attestation can be revoked.\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /// @dev Ensures that only the tas contract can make this call.\\n    function _onlytas() private view {\\n        if (msg.sender != address(_tas)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\",\"keccak256\":\"0x15b8bc50da941d4cd5ca986efc37e738331b6ddb3f86c0fe953247606fecad42\",\"license\":\"MIT\"},\"contracts/resolver/examples/ACResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { TablelandDeployments, ITablelandTables } from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport { SQLHelpers } from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport {ITAS, Attestation} from \\\"../../ITAS.sol\\\";\\n\\nimport {SchemaResolver} from \\\"../SchemaResolver.sol\\\";\\n\\nimport \\\"../../ISchemaRegistry.sol\\\";\\n\\n/**\\n * @title ContentSubscriptionResolver\\n * @notice A schema resolver subcription to content example\\n */\\n\\ncontract ACResolver is SchemaResolver, AccessControl {    \\n        // State variables\\n    ISchemaRegistry private schemaRegistry;\\n\\n    address public splitterFactory;\\n\\n    struct SchemaInfo{\\n        bool AllowAllToAttest;\\n        bool AllowAllToRevoke;\\n    }\\n\\n    mapping(bytes32 => SchemaInfo) private schemas;\\n\\n    ITablelandTables private tablelandContract;\\n    \\n    string[] createTableStatements; \\n\\n    string[] public tables;\\n\\n    uint256[] tableIDs;\\n\\n    uint256 tablesUpdates;\\n\\n    uint256 private tablesRowsCounter;\\n\\n    string private constant ATTESTER_TABLE_PREFIX = \\\"schema_attesters\\\";\\n\\n    string private constant ATTESTER_SCHEMA = \\\"schemaUID text, attester text\\\";\\n\\n    string private constant REVOKER_TABLE_PREFIX = \\\"schema_revokers\\\";\\n\\n    string private constant REVOKER_SCHEMA = \\\"schemaUID text, revoker text\\\";\\n\\n    constructor(\\n        ITAS tas,\\n        address _splitterFactory,\\n        ISchemaRegistry _schemaRegistry\\n    )SchemaResolver(tas){\\n\\n        schemaRegistry = _schemaRegistry;\\n\\n        splitterFactory = _splitterFactory;\\n        tablelandContract = TablelandDeployments.get();        \\n\\n        createTableStatements.push(SQLHelpers.toCreateFromSchema(\\n            ATTESTER_SCHEMA,\\n            ATTESTER_TABLE_PREFIX\\n        ));\\n\\n        createTableStatements.push(SQLHelpers.toCreateFromSchema(\\n            REVOKER_SCHEMA,\\n            REVOKER_TABLE_PREFIX\\n        ));\\n\\n\\n        tableIDs = tablelandContract.create(address(this), createTableStatements);\\n\\n        tables.push(SQLHelpers.toNameFromId(ATTESTER_TABLE_PREFIX, tableIDs[0]));\\n        tables.push(SQLHelpers.toNameFromId(REVOKER_TABLE_PREFIX, tableIDs[1]));\\n\\n    }\\n\\n    function ACSchemaRegistered(\\n        address[] calldata attesters,\\n        address[] calldata revokers,\\n        string calldata schema,\\n        string calldata schemaName,\\n        string calldata schemaDescription\\n    )external{\\n        // Register the schema and get its UID\\n        bytes32 schemaUID = schemaRegistry.register(\\n            schema,\\n            schemaName,\\n            schemaDescription,\\n            ISchemaResolver(address(this)),\\n            true\\n        );\\n        uint attestersSize = attesters.length;\\n        if(attestersSize == 0){\\n            schemas[schemaUID].AllowAllToAttest = true;\\n        }\\n        uint revokersSize = revokers.length;\\n        if(revokersSize == 0){\\n            schemas[schemaUID].AllowAllToRevoke = true;\\n        }\\n\\n        SchemaInfoInserted(schemaUID, attesters, revokers);       \\n    }\\n\\n    function SchemaInfoInserted(\\n        bytes32 schemaUID,\\n        address[] calldata attesters,\\n        address[] calldata revokers\\n    ) internal {\\n        uint256 totalMax = attesters.length > revokers.length? attesters.length : revokers.length;\\n        // Managing tableland rows limitation.\\n        if(tablesRowsCounter + totalMax >= 100000){\\n            renewTables();\\n        }\\n        for(uint i =0; i < attesters.length; i++){\\n            mutate(\\n                tableIDs[0],\\n                SQLHelpers.toInsert(\\n                    ATTESTER_TABLE_PREFIX,\\n                    tableIDs[0],\\n                    \\\"schemaUID, attester\\\",\\n                    string.concat(\\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(attesters[i]))\\n                    )\\n                )\\n            );\\n            _grantRole(keccak256(abi.encode(schemaUID, \\\"ATTESTER\\\")), attesters[i]);\\n        }\\n        for(uint i =0; i < revokers.length; i++){\\n            mutate(\\n                tableIDs[1],\\n                SQLHelpers.toInsert(\\n                    REVOKER_TABLE_PREFIX,\\n                    tableIDs[1],\\n                    \\\"schemaUID, revoker\\\",\\n                    string.concat(\\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(revokers[i]))\\n                    )\\n                )\\n            );\\n            _grantRole(keccak256(abi.encode(schemaUID, \\\"REVOKER\\\")), revokers[i]);\\n        }\\n        tablesRowsCounter += totalMax;\\n    }\\n\\n    /**\\n    * @dev Handles attestation by validating the attester and bond value.\\n    * @param attestation The attestation data.\\n    * @return Boolean indicating the success of the attestation.\\n    */\\n    function onAttest(\\n        Attestation calldata attestation,\\n        uint256 /* value */\\n    ) internal override view returns (bool) {\\n        address attester = attestation.attester;\\n        bytes32 schemaUID = attestation.schema;\\n        if(schemas[schemaUID].AllowAllToAttest){\\n            return true;\\n        }\\n        if (hasRole(keccak256(abi.encode(schemaUID, \\\"ATTESTER\\\")), attester)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    * @dev Checks if an attestation can be revoked based on resolution status and time.\\n    * @return Boolean indicating whether the attestation can be revoked.\\n    */\\n    function onRevoke(\\n        Attestation calldata attestation,\\n        uint256 /* value */\\n    ) internal override view returns (bool) {\\n        bytes32 schemaUID = attestation.schema;\\n        if(schemas[schemaUID].AllowAllToRevoke){\\n            return true;\\n        }\\n        if (hasRole(keccak256(abi.encode(schemaUID, \\\"REVOKER\\\")), tx.origin)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Indicates whether the contract is designed to handle incoming payments.\\n     * @return True, indicating that the contract can accept payments.\\n     */\\n    function isPayable() public pure override returns (bool) {\\n        return false;\\n    }\\n\\n    function renewTables()internal{\\n        \\n        tableIDs = tablelandContract.create(address(this), createTableStatements);\\n\\n        tables.push(SQLHelpers.toNameFromId(ATTESTER_TABLE_PREFIX, tableIDs[0]));\\n        tables.push(SQLHelpers.toNameFromId(REVOKER_TABLE_PREFIX, tableIDs[1]));\\n\\n        tablesRowsCounter = 0; \\n\\n        tablesUpdates++;\\n    }\\n\\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n        converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n        converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n\\n    /*\\n    * @dev Internal function to execute a mutation on a table.\\n    * @param {uint256} tableId - Table ID.\\n    * @param {string} statement - Mutation statement.\\n    */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        tablelandContract.mutate(address(this), tableId, statement);\\n    }\\n}\\n\",\"keccak256\":\"0x227f0569fdd5567263407d1383f757c49233d73c6306b1566c781f49fe926403\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002cd938038062002cd98339810160408190526200003591620007ac565b6000608081905260a052600160c052826001600160a01b0381166200006d5760405163120d8e6b60e21b815260040160405180910390fd5b6001600160a01b0390811660e052600180546001600160a01b03199081168484161790915560028054909116918416919091179055620000ac6200037f565b600460006101000a8154816001600160a01b0302191690836001600160a01b031602179055506005620001436040518060400160405280601d81526020017f736368656d6155494420746578742c20617474657374657220746578740000008152506040518060400160405280601081526020016f736368656d615f61747465737465727360801b8152506200054260201b60201c565b81546001810183556000928352602090922090910190620001659082620008a5565b506005620001d66040518060400160405280601c81526020017f736368656d6155494420746578742c207265766f6b65722074657874000000008152506040518060400160405280600f81526020016e736368656d615f7265766f6b65727360881b8152506200054260201b60201c565b81546001810183556000928352602090922090910190620001f89082620008a5565b50600480546040516361a23d0f60e01b81526001600160a01b03909116916361a23d0f916200022d9130916005910162000971565b6000604051808303816000875af11580156200024d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000277919081019062000a59565b80516200028d916007916020909101906200072c565b506006620002eb6040518060400160405280601081526020016f736368656d615f61747465737465727360801b8152506007600081548110620002d457620002d462000b22565b90600052602060002001546200057c60201b60201c565b815460018101835560009283526020909220909101906200030d9082620008a5565b506006620003536040518060400160405280600f81526020016e736368656d615f7265766f6b65727360881b8152506007600181548110620002d457620002d462000b22565b81546001810183556000928352602090922090910190620003759082620008a5565b5050505062000c13565b600046600103620003a3575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a03620003c5575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b103620003e85750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba036200040b5750731a22854c5b1642760a827f20137a67930ae108d290565b466089036200042d5750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a036200045057507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4660050362000472575073da8ea22d092307874f30a1f277d1388dca0ba97a90565b466101a40362000495575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed03620004b9575073033f69e8d119205089ab15d340f5b797732f646b90565b466201388103620004dd5750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b46610c4503620005005750730b9737ab4b3e5303cb67db031b509697e31c02d390565b46617a690362000523575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b60405163264e42cf60e01b815246600482015260240160405180910390fd5b6060816200055046620005a9565b84604051602001620005659392919062000b6a565b604051602081830303815290604052905092915050565b6060826200058a46620005a9565b6200059584620005a9565b604051602001620005659392919062000bd0565b60606000620005b88362000642565b60010190506000816001600160401b03811115620005da57620005da62000800565b6040519080825280601f01601f19166020018201604052801562000605576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200060f57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106200068c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310620006b9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310620006d857662386f26fc10000830492506010015b6305f5e1008310620006f1576305f5e100830492506008015b61271083106200070657612710830492506004015b6064831062000719576064830492506002015b600a831062000726576001015b92915050565b8280548282559060005260206000209081019282156200076a579160200282015b828111156200076a5782518255916020019190600101906200074d565b50620007789291506200077c565b5090565b5b808211156200077857600081556001016200077d565b6001600160a01b0381168114620007a957600080fd5b50565b600080600060608486031215620007c257600080fd5b8351620007cf8162000793565b6020850151909350620007e28162000793565b6040850151909250620007f58162000793565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200082b57607f821691505b6020821081036200084c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008a057600081815260208120601f850160051c810160208610156200087b5750805b601f850160051c820191505b818110156200089c5782815560010162000887565b5050505b505050565b81516001600160401b03811115620008c157620008c162000800565b620008d981620008d2845462000816565b8462000852565b602080601f831160018114620009115760008415620008f85750858301515b600019600386901b1c1916600185901b1785556200089c565b600085815260208120601f198616915b82811015620009425788860151825594840194600190910190840162000921565b5085821015620009615787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006040820160018060a01b0385168352602060408185015281855480845260608601915060059350606081851b8701016000888152848120815b8481101562000a4957605f198a8503018652828254620009cc8162000816565b80875260018281168015620009ea576001811462000a045762000a31565b60ff198416898d01528215158d1b89018c01945062000a31565b8688528b8820885b8481101562000a295781548b82018f0152908301908d0162000a0c565b8a018d019550505b50988a019892965050509190910190600101620009ac565b50919a9950505050505050505050565b6000602080838503121562000a6d57600080fd5b82516001600160401b038082111562000a8557600080fd5b818501915085601f83011262000a9a57600080fd5b81518181111562000aaf5762000aaf62000800565b8060051b604051601f19603f8301168101818110858211171562000ad75762000ad762000800565b60405291825284820192508381018501918883111562000af657600080fd5b938501935b8285101562000b165784518452938501939285019262000afb565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000815160005b8181101562000b5b576020818501810151868301520162000b3f565b50600093019283525090919050565b6c021a922a0aa22902a20a126229609d1b8152600062000b8e600d83018662000b38565b605f60f81b815262000ba4600182018662000b38565b9050600560fb1b815262000bbc600182018562000b38565b602960f81b81526001019695505050505050565b600062000bde828662000b38565b605f60f81b80825262000bf5600183018762000b38565b908152905062000c09600182018562000b38565b9695505050505050565b60805160a05160c05160e05161208c62000c4d6000396000610bbd015260006104860152600061045d01526000610434015261208c6000f3fe6080604052600436106101025760003560e01c806391d1485411610095578063ce46e04611610064578063ce46e046146102cf578063d547741f146102e3578063e49617e114610303578063e60c350514610316578063f66633881461032957600080fd5b806391d148541461026757806391db0b7e146102875780639201de551461029a578063a217fddf146102ba57600080fd5b806354fd4d50116100d157806354fd4d50146101da5780635608d9e5146101fc57806371671bf21461023457806388e5b2d91461025457600080fd5b806301ffc9a714610127578063248a9ca31461015c5780632f2ff15d1461019a57806336568abe146101ba57600080fd5b3661012257604051631574f9f360e01b815260040160405180910390fd5b005b600080fd5b34801561013357600080fd5b5061014761014236600461163c565b610349565b60405190151581526020015b60405180910390f35b34801561016857600080fd5b5061018c610177366004611666565b60009081526020819052604090206001015490565b604051908152602001610153565b3480156101a657600080fd5b506101206101b5366004611696565b610380565b3480156101c657600080fd5b506101206101d5366004611696565b6103aa565b3480156101e657600080fd5b506101ef61042d565b6040516101539190611712565b34801561020857600080fd5b5060025461021c906001600160a01b031681565b6040516001600160a01b039091168152602001610153565b34801561024057600080fd5b506101ef61024f366004611666565b6104d0565b610147610262366004611771565b61057c565b34801561027357600080fd5b50610147610282366004611696565b61064b565b610147610295366004611771565b610674565b3480156102a657600080fd5b506101ef6102b5366004611666565b610733565b3480156102c657600080fd5b5061018c600081565b3480156102db57600080fd5b506000610147565b3480156102ef57600080fd5b506101206102fe366004611696565b6108ec565b6101476103113660046117dd565b610911565b6101476103243660046117dd565b61092a565b34801561033557600080fd5b5061012061034436600461185b565b61093e565b60006001600160e01b03198216637965db0b60e01b148061037a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461039b81610a29565b6103a58383610a36565b505050565b6001600160a01b038116331461041f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104298282610aba565b5050565b60606104587f0000000000000000000000000000000000000000000000000000000000000000610b1f565b6104817f0000000000000000000000000000000000000000000000000000000000000000610b1f565b6104aa7f0000000000000000000000000000000000000000000000000000000000000000610b1f565b6040516020016104bc9392919061194c565b604051602081830303815290604052905090565b600681815481106104e057600080fd5b9060005260206000200160009150905080546104fb906119a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610527906119a6565b80156105745780601f1061054957610100808354040283529160200191610574565b820191906000526020600020905b81548152906001019060200180831161055757829003601f168201915b505050505081565b6000610586610bb2565b838281146105a75760405163251f56a160e21b815260040160405180910390fd5b3460005b8281101561063b5760008686838181106105c7576105c76119e0565b905060200201359050828111156105f15760405163044044a560e21b815260040160405180910390fd5b61061e898984818110610606576106066119e0565b905060200281019061061891906119f6565b82610bfd565b61062f576000945050505050610643565b909103906001016105ab565b506001925050505b949350505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061067e610bb2565b8382811461069f5760405163251f56a160e21b815260040160405180910390fd5b3460005b8281101561063b5760008686838181106106bf576106bf6119e0565b905060200201359050828111156106e95760405163044044a560e21b815260040160405180910390fd5b6107168989848181106106fe576106fe6119e0565b905060200281019061071091906119f6565b82610c93565b610727576000945050505050610643565b909103906001016106a3565b6060600061074360206002611a2d565b60ff1667ffffffffffffffff81111561075e5761075e611a50565b6040519080825280601f01601f191660200182016040528015610788576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b60208110156108c2578182518683602081106107d4576107d46119e0565b6107e09291901a611a7c565b815181106107f0576107f06119e0565b01602001516001600160f81b0319168361080b836002611a90565b8151811061081b5761081b6119e0565b60200101906001600160f81b031916908160001a905350818251868360208110610847576108476119e0565b6108539291901a611aa7565b81518110610863576108636119e0565b01602001516001600160f81b0319168361087e836002611a90565b610889906001611abb565b81518110610899576108996119e0565b60200101906001600160f81b031916908160001a905350806108ba81611ace565b9150506107b6565b50816040516020016108d49190611ae7565b60405160208183030381529060405292505050919050565b60008281526020819052604090206001015461090781610a29565b6103a58383610aba565b600061091b610bb2565b61037a8234610bfd565b919050565b6000610934610bb2565b61037a8234610c93565b600180546040516364ccc13760e01b81526000926001600160a01b03909216916364ccc1379161097e918b918b918b918b918b918b913091600401611b3a565b6020604051808303816000875af115801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c19190611b9c565b90508960008190036109e7576000828152600360205260409020805460ff191660011790555b886000819003610a0d576000838152600360205260409020805461ff0019166101001790555b610a1a838e8e8e8e610d41565b50505050505050505050505050565b610a338133611064565b50565b610a40828261064b565b610429576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610a763390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610ac4828261064b565b15610429576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610b2c836110bd565b600101905060008167ffffffffffffffff811115610b4c57610b4c611a50565b6040519080825280601f01601f191660200182016040528015610b76576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610b8057509392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bfb57604051634ca8886760e01b815260040160405180910390fd5b565b602082810135600081815260039092526040822054610100900460ff1615610c2957600191505061037a565b610c7a81604051602001610c5e918152604060208201819052600790820152662922ab27a5a2a960c91b606082015260800190565b604051602081830303815290604052805190602001203261064b565b15610c8957600191505061037a565b5060009392505050565b600080610ca7610100850160e08601611bb5565b602080860135600081815260039092526040909120549192509060ff1615610cd45760019250505061037a565b610d2681604051602001610d0a9181526040602082018190526008908201526720aa2a22a9aa22a960c11b606082015260800190565b604051602081830303815290604052805190602001208361064b565b15610d365760019250505061037a565b506000949350505050565b6000818411610d505781610d52565b835b9050620186a081600954610d669190611abb565b10610d7357610d73611195565b60005b84811015610f0e57610e846007600081548110610d9557610d956119e0565b9060005260206000200154610e7f6040518060400160405280601081526020016f736368656d615f61747465737465727360801b8152506007600081548110610de057610de06119e0565b90600052602060002001546040518060400160405280601381526020017239b1b432b6b0aaa4a2161030ba3a32b9ba32b960691b815250610e28610e238e610733565b611314565b610e5a610e238e8e8b818110610e4057610e406119e0565b9050602002016020810190610e559190611bb5565b61133d565b604051602001610e6b929190611bd0565b604051602081830303815290604052611353565b611392565b610efc87604051602001610eba9181526040602082018190526008908201526720aa2a22a9aa22a960c11b606082015260800190565b60405160208183030381529060405280519060200120878784818110610ee257610ee26119e0565b9050602002016020810190610ef79190611bb5565b610a36565b80610f0681611ace565b915050610d76565b5060005b8281101561104457610fd56007600181548110610f3157610f316119e0565b9060005260206000200154610e7f6040518060400160405280600f81526020016e736368656d615f7265766f6b65727360881b8152506007600181548110610f7b57610f7b6119e0565b90600052602060002001546040518060400160405280601281526020017139b1b432b6b0aaa4a216103932bb37b5b2b960711b815250610fbd610e238e610733565b610e5a610e238c8c8b818110610e4057610e406119e0565b6110328760405160200161100a918152604060208201819052600790820152662922ab27a5a2a960c91b606082015260800190565b60405160208183030381529060405280519060200120858584818110610ee257610ee26119e0565b8061103c81611ace565b915050610f12565b5080600960008282546110579190611abb565b9091555050505050505050565b61106e828261064b565b6104295761107b8161133d565b6110868360206113fb565b604051602001611097929190611c0c565b60408051601f198184030181529082905262461bcd60e51b825261041691600401611712565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106110fc5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611128576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061114657662386f26fc10000830492506010015b6305f5e100831061115e576305f5e100830492506008015b612710831061117257612710830492506004015b60648310611184576064830492506002015b600a831061037a5760010192915050565b600480546040516361a23d0f60e01b81526001600160a01b03909116916361a23d0f916111c791309160059101611c81565b6000604051808303816000875af11580156111e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120e9190810190611d5f565b8051611222916007916020909101906115dc565b5060066112756040518060400160405280601081526020016f736368656d615f61747465737465727360801b8152506007600081548110611265576112656119e0565b906000526020600020015461159e565b815460018101835560009283526020909220909101906112959082611e63565b5060066112d76040518060400160405280600f81526020016e736368656d615f7265766f6b65727360881b8152506007600181548110611265576112656119e0565b815460018101835560009283526020909220909101906112f79082611e63565b5060006009819055600880549161130d83611ace565b9190505550565b6060816040516020016113279190611f23565b6040516020818303038152906040529050919050565b606061037a6001600160a01b03831660146113fb565b60606000611361868661159e565b905080848460405160200161137893929190611f51565b604051602081830303815290604052915050949350505050565b60048054604051631bbd786d60e11b81526001600160a01b039091169163377af0da916113c59130918791879101611fdd565b600060405180830381600087803b1580156113df57600080fd5b505af11580156113f3573d6000803e3d6000fd5b505050505050565b6060600061140a836002611a90565b611415906002611abb565b67ffffffffffffffff81111561142d5761142d611a50565b6040519080825280601f01601f191660200182016040528015611457576020820181803683370190505b509050600360fc1b81600081518110611472576114726119e0565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106114a1576114a16119e0565b60200101906001600160f81b031916908160001a90535060006114c5846002611a90565b6114d0906001611abb565b90505b6001811115611548576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611504576115046119e0565b1a60f81b82828151811061151a5761151a6119e0565b60200101906001600160f81b031916908160001a90535060049490941c936115418161200d565b90506114d3565b5083156115975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610416565b9392505050565b6060826115aa46610b1f565b6115b384610b1f565b6040516020016115c593929190612024565b604051602081830303815290604052905092915050565b828054828255906000526020600020908101928215611617579160200282015b828111156116175782518255916020019190600101906115fc565b50611623929150611627565b5090565b5b808211156116235760008155600101611628565b60006020828403121561164e57600080fd5b81356001600160e01b03198116811461159757600080fd5b60006020828403121561167857600080fd5b5035919050565b80356001600160a01b038116811461092557600080fd5b600080604083850312156116a957600080fd5b823591506116b96020840161167f565b90509250929050565b60005b838110156116dd5781810151838201526020016116c5565b50506000910152565b600081518084526116fe8160208601602086016116c2565b601f01601f19169290920160200192915050565b60208152600061159760208301846116e6565b60008083601f84011261173757600080fd5b50813567ffffffffffffffff81111561174f57600080fd5b6020830191508360208260051b850101111561176a57600080fd5b9250929050565b6000806000806040858703121561178757600080fd5b843567ffffffffffffffff8082111561179f57600080fd5b6117ab88838901611725565b909650945060208701359150808211156117c457600080fd5b506117d187828801611725565b95989497509550505050565b6000602082840312156117ef57600080fd5b813567ffffffffffffffff81111561180657600080fd5b8201610140818503121561159757600080fd5b60008083601f84011261182b57600080fd5b50813567ffffffffffffffff81111561184357600080fd5b60208301915083602082850101111561176a57600080fd5b60008060008060008060008060008060a08b8d03121561187a57600080fd5b8a3567ffffffffffffffff8082111561189257600080fd5b61189e8e838f01611725565b909c509a5060208d01359150808211156118b757600080fd5b6118c38e838f01611725565b909a50985060408d01359150808211156118dc57600080fd5b6118e88e838f01611819565b909850965060608d013591508082111561190157600080fd5b61190d8e838f01611819565b909650945060808d013591508082111561192657600080fd5b506119338d828e01611819565b915080935050809150509295989b9194979a5092959850565b6000845161195e8184602089016116c2565b8083019050601760f91b808252855161197e816001850160208a016116c2565b600192019182015283516119998160028401602088016116c2565b0160020195945050505050565b600181811c908216806119ba57607f821691505b6020821081036119da57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000823561013e19833603018112611a0d57600080fd5b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60ff8181168382160290811690818114611a4957611a49611a17565b5092915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082611a8b57611a8b611a66565b500490565b808202811582820484141761037a5761037a611a17565b600082611ab657611ab6611a66565b500690565b8082018082111561037a5761037a611a17565b600060018201611ae057611ae0611a17565b5060010190565b61060f60f31b815260008251611b048160028501602087016116c2565b9190910160020192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a081526000611b4e60a083018a8c611b11565b8281036020840152611b6181898b611b11565b90508281036040840152611b76818789611b11565b6001600160a01b0395909516606084015250509015156080909101529695505050505050565b600060208284031215611bae57600080fd5b5051919050565b600060208284031215611bc757600080fd5b6115978261167f565b60008351611be28184602088016116c2565b600b60fa1b9083019081528351611c008160018401602088016116c2565b01600101949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611c448160178501602088016116c2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611c758160288401602088016116c2565b01602801949350505050565b60006040820160018060a01b0385168352602060408185015281855480845260608601915060059350606081851b8701016000888152848120815b84811015611d4f57605f198a8503018652828254611cd9816119a6565b80875260018281168015611cf45760018114611d0d57611d38565b60ff198416898d01528215158d1b89018c019450611d38565b8688528b8820885b84811015611d305781548b82018f0152908301908d01611d15565b8a018d019550505b50988a019892965050509190910190600101611cbc565b50919a9950505050505050505050565b60006020808385031215611d7257600080fd5b825167ffffffffffffffff80821115611d8a57600080fd5b818501915085601f830112611d9e57600080fd5b815181811115611db057611db0611a50565b8060051b604051601f19603f83011681018181108582111715611dd557611dd5611a50565b604052918252848201925083810185019188831115611df357600080fd5b938501935b82851015611e1157845184529385019392850192611df8565b98975050505050505050565b601f8211156103a557600081815260208120601f850160051c81016020861015611e445750805b601f850160051c820191505b818110156113f357828155600101611e50565b815167ffffffffffffffff811115611e7d57611e7d611a50565b611e9181611e8b84546119a6565b84611e1d565b602080601f831160018114611ec65760008415611eae5750858301515b600019600386901b1c1916600185901b1785556113f3565b600085815260208120601f198616915b82811015611ef557888601518255948401946001909101908401611ed6565b5085821015611f135787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602760f81b8083528351611f408160018601602088016116c2565b600193019283015250600201919050565b6b024a729a2a92a1024a72a27960a51b815260008451611f7881600c8501602089016116c2565b600560fb1b600c918401918201528451611f9981600d8401602089016116c2565b67052ac8298aa8aa6560c31b600d92909101918201528351611fc28160158401602088016116c2565b602960f81b6015929091019182015260160195945050505050565b60018060a01b038416815282602082015260606040820152600061200460608301846116e6565b95945050505050565b60008161201c5761201c611a17565b506000190190565b600084516120368184602089016116c2565b8083019050605f60f81b808252855161197e816001850160208a016116c256fea26469706673582212205979261f410359ccff434ba123d605372fc82affd120ab9989f20867ff075f1964736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "params": {
          "attestation": "The new attestation."
        },
        "returns": {
          "_0": "Whether the attestation is valid."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isPayable()": {
        "returns": {
          "_0": "True, indicating that the contract can accept payments."
        }
      },
      "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "params": {
          "attestations": "The new attestations.",
          "values": "Explicit ETH amounts which were sent with each attestation."
        },
        "returns": {
          "_0": "Whether all the attestations are valid."
        }
      },
      "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "params": {
          "attestations": "The existing attestations to be revoked.",
          "values": "Explicit ETH amounts which were sent with each revocation."
        },
        "returns": {
          "_0": "Whether the attestations can be revoked."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "params": {
          "attestation": "The existing attestation to be revoked."
        },
        "returns": {
          "_0": "Whether the attestation can be revoked."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "title": "ContentSubscriptionResolver",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "notice": "Processes an attestation and verifies whether it's valid."
      },
      "isPayable()": {
        "notice": "Indicates whether the contract is designed to handle incoming payments."
      },
      "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "notice": "Processes multiple attestations and verifies whether they are valid."
      },
      "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
      },
      "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "notice": "Processes an attestation revocation and verifies if it can be revoked."
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "A schema resolver subcription to content example",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 8910,
        "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
        "label": "schemaRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISchemaRegistry)4698"
      },
      {
        "astId": 8912,
        "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
        "label": "splitterFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8922,
        "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
        "label": "schemas",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(SchemaInfo)8917_storage)"
      },
      {
        "astId": 8925,
        "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
        "label": "tablelandContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITablelandTables)4111"
      },
      {
        "astId": 8928,
        "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 8931,
        "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
        "label": "tables",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 8934,
        "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
        "label": "tableIDs",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 8936,
        "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
        "label": "tablesUpdates",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 8938,
        "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
        "label": "tablesRowsCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISchemaRegistry)4698": {
        "encoding": "inplace",
        "label": "contract ISchemaRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ITablelandTables)4111": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_struct(SchemaInfo)8917_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ACResolver.SchemaInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SchemaInfo)8917_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SchemaInfo)8917_storage": {
        "encoding": "inplace",
        "label": "struct ACResolver.SchemaInfo",
        "members": [
          {
            "astId": 8914,
            "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
            "label": "AllowAllToAttest",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8916,
            "contract": "contracts/resolver/examples/ACResolver.sol:ACResolver",
            "label": "AllowAllToRevoke",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}