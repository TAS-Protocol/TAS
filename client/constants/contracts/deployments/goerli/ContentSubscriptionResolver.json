{
  "address": "0xa5575A144fb6C7455CB776CE3b8e5F00A4a797d8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITAS",
          "name": "tas",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_splitterFactory",
          "type": "address"
        },
        {
          "internalType": "contract ISchemaRegistry",
          "name": "_schemaRegistry",
          "type": "address"
        },
        {
          "internalType": "contract ITablelandSubscriptionsIndexer",
          "name": "_tableland",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTAS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPayable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "attest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        }
      ],
      "name": "hasAccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPayable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "attestations",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "multiAttest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "attestations",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "multiRevoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "contentCreators",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "creatorsShares",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "monthlySubscriptionPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "schemaName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "schemaDescription",
          "type": "string"
        }
      ],
      "name": "registerSubscriptionSchema",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "revoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitterFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "months",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "userSubscriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9f9888830ebd7abedcd364c961f5e4ffbc150e4e73e6c561281332e8051d2bac",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0xa5575A144fb6C7455CB776CE3b8e5F00A4a797d8",
    "transactionIndex": 16,
    "gasUsed": "2050248",
    "logsBloom": "0x
    "blockHash": "0xad3326f0bf808fd2ad5d028ddb4126f4290d5ad64a5ffadcb2beeb6a489dc126",
    "transactionHash": "0x9f9888830ebd7abedcd364c961f5e4ffbc150e4e73e6c561281332e8051d2bac",
    "logs": [],
    "blockNumber": 9694254,
    "cumulativeGasUsed": "7509134",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39F4484D73C169690311e0cA6743Fc41266ff610",
    "0x4dd3AE0c4A032fc36206Ec8B71d19581c0478d86",
    "0xe9eF4381f0c61491E502e721bD1AE6b40d43Dfd3",
    "0x14868A496a775e1D83E135a06310EC3a277572DC"
  ],
  "numDeployments": 1,
  "solcInputHash": "53e9c95838ef4fc431170f19d48664b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITAS\",\"name\":\"tas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_splitterFactory\",\"type\":\"address\"},{\"internalType\":\"contract ISchemaRegistry\",\"name\":\"_schemaRegistry\",\"type\":\"address\"},{\"internalType\":\"contract ITablelandSubscriptionsIndexer\",\"name\":\"_tableland\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contentCreators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"creatorsShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"monthlySubscriptionPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"schemaName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaDescription\",\"type\":\"string\"}],\"name\":\"registerSubscriptionSchema\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitterFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"months\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userSubscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"isPayable()\":{\"returns\":{\"_0\":\"True, indicating that the contract can accept payments.\"}},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}},\"subscribe(bytes32,uint256)\":{\"details\":\"Mint tokens for encrypted attestations.\",\"params\":{\"schemaUID\":\"The UID of the schema for which tokens are being minted.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"ContentSubscriptionResolver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation and verifies whether it's valid.\"},\"isPayable()\":{\"notice\":\"Indicates whether the contract is designed to handle incoming payments.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes multiple attestations and verifies whether they are valid.\"},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes revocation of multiple attestation and verifies they can be revoked.\"},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation revocation and verifies if it can be revoked.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"A schema resolver subcription to content example\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolver/examples/ContentSubscriptionResolver.sol\":\"ContentSubscriptionResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Goerli.\\n    address internal constant GOERLI =\\n        0xDA8EA22d092307874f30A1F277D1388dca0BA97a;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Goerli.\\n    address internal constant ARBITRUM_GOERLI =\\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Hyperspace.\\n    address internal constant FILECOIN_HYPERSPACE =\\n        0x0B9737ab4B3e5303CB67dB031b509697e31c02d3;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (ITablelandTables) {\\n        if (block.chainid == 1) {\\n            return ITablelandTables(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return ITablelandTables(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return ITablelandTables(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return ITablelandTables(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return ITablelandTables(MATIC);\\n        } else if (block.chainid == 314) {\\n            return ITablelandTables(FILECOIN);\\n        } else if (block.chainid == 5) {\\n            return ITablelandTables(GOERLI);\\n        } else if (block.chainid == 420) {\\n            return ITablelandTables(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421613) {\\n            return ITablelandTables(ARBITRUM_GOERLI);\\n        } else if (block.chainid == 80001) {\\n            return ITablelandTables(MATICMUM);\\n        } else if (block.chainid == 3141) {\\n            return ITablelandTables(FILECOIN_HYPERSPACE);\\n        } else if (block.chainid == 31337) {\\n            return ITablelandTables(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x245cfb7b5e4d9e4874146dac869e7a28a5c9caf2251fd9eeb3518d3e57f0ca01\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidTAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\",\"keccak256\":\"0x0d95a05a089cc0388e57e1baf03fd4882de7c6424311d50831f627a03752092e\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ISchemaRegistry {\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(        \\n        string memory schema,\\n        string memory schemaName,\\n        string memory schemaDescription,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\",\"keccak256\":\"0x8a863291cd7c53cb93c44fb199bcfa05471c75f5ff1b830bea15ee17982e6d23\",\"license\":\"MIT\"},\"contracts/ITAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title ITAS\\n/// @notice TAS - Tableland Attestation Service interface.\\ninterface ITAS {\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n}\",\"keccak256\":\"0xbc746a15c4be99028921309b514b0c28a6639d6e17bd241bc9135f94c0471198\",\"license\":\"MIT\"},\"contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\",\"keccak256\":\"0x3c960ee02543c88107d840df240bab23ac07d583ba7ff582c9b5cac1b8b73a7c\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\",\"keccak256\":\"0x1dec285f07614107174b652568474a55b6a2692631888731967fb5cc53d4f417\",\"license\":\"MIT\"},\"contracts/resolver/SchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { ITAS, Attestation } from \\\"../ITAS.sol\\\";\\nimport { AccessDenied, InvalidTAS, InvalidLength, uncheckedInc } from \\\"../Common.sol\\\";\\nimport { Semver } from \\\"../Semver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @title SchemaResolver\\n/// @notice The base schema resolver contract.\\nabstract contract SchemaResolver is ISchemaResolver, Semver {\\n    error InsufficientValue();\\n    error NotPayable();\\n\\n    // The global tas contract.\\n    ITAS internal immutable _tas;\\n\\n    /// @dev Creates a new resolver.\\n    /// @param tas The address of the global tas contract.\\n    constructor(ITAS tas) Semver(0, 0, 1) {\\n        if (address(tas) == address(0)) {\\n            revert InvalidTAS();\\n        }\\n\\n        _tas = tas;\\n    }\\n\\n    /// @dev Ensures that only the tas contract can make this call.\\n    modifier onlytas() {\\n        _onlytas();\\n\\n        _;\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function isPayable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev ETH callback.\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function attest(Attestation calldata attestation) external payable onlytas returns (bool) {\\n        return onAttest(attestation, msg.value);\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlytas returns (bool) {\\n        uint256 length = attestations.length;\\n        if (length != values.length) {\\n            revert InvalidLength();\\n        }\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Pltase note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the attestation to the underlying resolver and return false in case it isn't approved.\\n            if (!onAttest(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function revoke(Attestation calldata attestation) external payable onlytas returns (bool) {\\n        return onRevoke(attestation, msg.value);\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlytas returns (bool) {\\n        uint256 length = attestations.length;\\n        if (length != values.length) {\\n            revert InvalidLength();\\n        }\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Pltase note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the revocation to the underlying resolver and return false in case it isn't approved.\\n            if (!onRevoke(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice A resolver callback that should be implemented by child contracts.\\n    /// @param attestation The new attestation.\\n    /// @param value An explicit ETH amount that was sent to the resolver. Pltase note that this value is verified in\\n    ///     both attest() and multiAttest() callbacks tas-only callbacks and that in case of multi attestations, it'll\\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\\n    ///     attestations in the batch.\\n    /// @return Whether the attestation is valid.\\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @param value An explicit ETH amount that was sent to the resolver. Pltase note that this value is verified in\\n    ///     both revoke() and multiRevoke() callbacks tas-only callbacks and that in case of multi attestations, it'll\\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\\n    ///     attestations in the batch.\\n    /// @return Whether the attestation can be revoked.\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /// @dev Ensures that only the tas contract can make this call.\\n    function _onlytas() private view {\\n        if (msg.sender != address(_tas)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\",\"keccak256\":\"0x15b8bc50da941d4cd5ca986efc37e738331b6ddb3f86c0fe953247606fecad42\",\"license\":\"MIT\"},\"contracts/resolver/examples/ContentSubscriptionResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { TablelandDeployments, ITablelandTables } from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport { SQLHelpers } from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {ITAS, Attestation} from \\\"../../ITAS.sol\\\";\\n\\nimport {SchemaResolver} from \\\"../SchemaResolver.sol\\\";\\n\\nimport { ITablelandSubscriptionsIndexer } from \\\"./interfaces/ITablelandSubscriptionsIndexer.sol\\\";\\n\\nimport \\\"../../ISchemaRegistry.sol\\\";\\n\\n/**\\n * @title ContentSubscriptionResolver\\n * @notice A schema resolver subcription to content example\\n */\\ncontract ContentSubscriptionResolver is SchemaResolver {\\n    using Address for address payable;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    uint256 ONE_MONTH = 30 days;\\n\\n    struct SchemaInfo{\\n        EnumerableSet.AddressSet contentCreators;\\n        address multisig;\\n        uint256 subscriptionPrice;\\n        uint256 subscriptionsPool;\\n        uint256 totalRevenue;\\n        address splitterContract;\\n    }\\n\\n    string schema = \\\"string jsonCID\\\";\\n\\n    mapping(bytes32 => SchemaInfo) schemas;\\n\\n    mapping(address => mapping(bytes32 => uint256)) public userSubscriptions;\\n\\n    // The global schema registry.\\n    ISchemaRegistry private schemaRegistry;\\n\\n    ISchemaResolver schemaResolver;\\n\\n    ITablelandSubscriptionsIndexer tableland;\\n\\n    bool revocable;\\n\\n    address public splitterFactory;\\n\\n    constructor(\\n        ITAS tas,\\n        address _splitterFactory,\\n        ISchemaRegistry _schemaRegistry,\\n        ITablelandSubscriptionsIndexer _tableland\\n    )SchemaResolver(tas){\\n\\n        schemaResolver = ISchemaResolver(address(this));\\n\\n        schemaRegistry = _schemaRegistry;\\n\\n        splitterFactory = _splitterFactory;\\n\\n        tableland = _tableland;\\n\\n    }\\n\\n    \\n\\n    function registerSubscriptionSchema(\\n        address[] memory contentCreators,\\n        uint256[] memory creatorsShares,\\n        uint256 monthlySubscriptionPrice,\\n        string memory schemaName,\\n        string memory schemaDescription\\n    )external{\\n        // Register the schema and get its UID\\n        bytes32 schemaUID = registerSchema(schemaName, schemaDescription);\\n\\n        SchemaInfo storage Schema = schemas[schemaUID];\\n\\n        Schema.splitterContract = createSplitter(contentCreators,creatorsShares);\\n\\n        Schema.subscriptionPrice = monthlySubscriptionPrice;\\n\\n        for(uint256 i = 0; i < contentCreators.length; i++){\\n            Schema.contentCreators.add(contentCreators[i]);\\n        }\\n\\n        Schema.multisig = msg.sender;\\n\\n        tableland.SchemaInfoInserted(schemaUID,  monthlySubscriptionPrice, Schema.splitterContract);\\n\\n        tableland.SchemaAdminsInserted(schemaUID, contentCreators, creatorsShares);\\n\\n        tableland.SchemaRevenueRecordCreated(schemaUID);\\n\\n    }\\n\\n    function registerSchema(\\n        string memory schemaName,\\n        string memory schemaDescription\\n    )internal returns(bytes32 schemaUID){\\n        // Register the schema and get its UID\\n        schemaUID = schemaRegistry.register(\\n            schema,\\n            schemaName,\\n            schemaDescription,\\n            schemaResolver,\\n            revocable\\n        );\\n    }\\n\\n    /**\\n    * @dev Handles attestation by validating the attester and bond value.\\n    * @param attestation The attestation data.\\n    * @return Boolean indicating the success of the attestation.\\n    */\\n    function onAttest(\\n        Attestation calldata attestation,\\n        uint256 /* value */\\n    ) internal override view returns (bool) {\\n        address attester = attestation.attester;\\n        bytes32 schemaUID = attestation.schema;\\n        if (!schemas[schemaUID].contentCreators.contains(attester)) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Checks if an attestation can be revoked based on resolution status and time.\\n    * @return Boolean indicating whether the attestation can be revoked.\\n    */\\n    function onRevoke(\\n        Attestation calldata /*attestation*/,\\n        uint256 /* value */\\n    ) internal override pure returns (bool) {\\n        return false;\\n    }\\n\\n\\n    function createSplitter(address[] memory admins, uint256[] memory shares)internal returns(address splitterInstance){\\n        // Deploy a splitter contract using thirdWeb factory and implementation with the calculated data\\n        bytes memory result = Address.functionCall(\\n            splitterFactory,\\n            abi.encodeWithSignature(\\n                \\\"createSplitter(address[],uint256[])\\\",\\n                admins,\\n                shares\\n            )\\n        );\\n\\n        splitterInstance = abi.decode(result, (address));\\n    }\\n\\n    /**\\n     * @dev Mint tokens for encrypted attestations.\\n     * @param schemaUID The UID of the schema for which tokens are being minted.\\n     */\\n    function subscribe(bytes32 schemaUID, uint256 months) external payable {\\n        require(months > 0, \\\"min 1 month subscription\\\");\\n        require(\\n            schemas[schemaUID].subscriptionPrice * months == msg.value,\\n            \\\"Incorrect value\\\"\\n        );\\n        require(schemas[schemaUID].splitterContract != address(0), \\\"non existed\\\");\\n\\n        uint256 subscriptionEndDate = userSubscriptions[msg.sender][schemaUID];\\n        \\n        uint256 time = ONE_MONTH * months;\\n\\n        if(subscriptionEndDate == 0){\\n            time += block.timestamp;\\n            tableland.SchemaSubscriptionCreated(schemaUID, msg.sender, time);\\n            userSubscriptions[msg.sender][schemaUID] = time;\\n        }else if(subscriptionEndDate > block.timestamp){\\n            subscriptionEndDate += time;\\n            userSubscriptions[msg.sender][schemaUID] = subscriptionEndDate;\\n            tableland.SchemaSubscriptionUpdated(schemaUID, msg.sender, subscriptionEndDate);\\n        }else{\\n            time += block.timestamp;\\n            tableland.SchemaSubscriptionUpdated(schemaUID, msg.sender, time);\\n            userSubscriptions[msg.sender][schemaUID] = time;\\n        }\\n\\n        schemas[schemaUID].totalRevenue += msg.value;\\n\\n        // Send the funds to the splitter contract for distribution\\n        Address.sendValue(payable(schemas[schemaUID].splitterContract), msg.value);\\n        // Distribute funds to valid attestors\\n        Address.functionCall(schemas[schemaUID].splitterContract, abi.encodeWithSignature(\\\"distribute()\\\"));\\n\\n        tableland.SchemaRevenueUpdated(schemaUID, schemas[schemaUID].totalRevenue);\\n    }\\n\\n    /**\\n     * @notice Indicates whether the contract is designed to handle incoming payments.\\n     * @return True, indicating that the contract can accept payments.\\n     */\\n    function isPayable() public pure override returns (bool) {\\n        return true;\\n    }\\n\\n\\n    function hasAccess(address sender, bytes32 schemaUID) external view returns (uint256) {\\n        return (userSubscriptions[sender][schemaUID] > block.timestamp || schemas[schemaUID].contentCreators.contains(sender))?1:0;\\n    }\\n\\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n        converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n        converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x106269f881f2b42186eddcda207eb0daffb434dbc891d9808fec51f0abf765eb\",\"license\":\"MIT\"},\"contracts/resolver/examples/interfaces/ITablelandSubscriptionsIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface ITablelandSubscriptionsIndexer {\\n\\n    function SchemaInfoInserted(\\n        bytes32 schemaUID,\\n        uint256 monthlySubscriptionPrice,\\n        address splitterContract\\n    ) external;\\n\\n    function SchemaAdminsInserted(\\n        bytes32 schemaUID,\\n        address[] memory contentCreators,\\n        uint256[] memory creatorsShares\\n    )external;\\n\\n    function SchemaSubscriptionCreated(\\n        bytes32 schemaUID,\\n        address subscriber,\\n        uint256 subscriptionEndsAt\\n    )external;\\n\\n    function SchemaSubscriptionUpdated(\\n        bytes32 schemaUID,\\n        address subscriber,\\n        uint256 subscriptionEndsAt\\n    )external;\\n\\n    function SchemaRevenueRecordCreated(\\n        bytes32 schemaUID\\n    )external;\\n\\n    function SchemaRevenueUpdated(\\n        bytes32 schemaUID,\\n        uint256 totalClaimed\\n    )external;\\n}\",\"keccak256\":\"0x78652439de6c2340675e83dd27f0a79d550a957fea88a86a3bb13e785211062c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x62278d00600055610140604052600e6101009081526d1cdd1c9a5b99c81a9cdbdb90d25160921b61012052600190620000399082620001a0565b503480156200004757600080fd5b50604051620024e0380380620024e08339810160408190526200006a9162000285565b6000608081905260a052600160c052836001600160a01b038116620000a25760405163120d8e6b60e21b815260040160405180910390fd5b6001600160a01b0390811660e052600580546001600160a01b03199081163017909155600480549483169482169490941790935560078054948216948416949094179093556006805491909316911617905550620002ed565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012657607f821691505b6020821081036200014757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200019b57600081815260208120601f850160051c81016020861015620001765750805b601f850160051c820191505b81811015620001975782815560010162000182565b5050505b505050565b81516001600160401b03811115620001bc57620001bc620000fb565b620001d481620001cd845462000111565b846200014d565b602080601f8311600181146200020c5760008415620001f35750858301515b600019600386901b1c1916600185901b17855562000197565b600085815260208120601f198616915b828110156200023d578886015182559484019460019091019084016200021c565b50858210156200025c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03811681146200028257600080fd5b50565b600080600080608085870312156200029c57600080fd5b8451620002a9816200026c565b6020860151909450620002bc816200026c565b6040860151909350620002cf816200026c565b6060860151909250620002e2816200026c565b939692955090935050565b60805160a05160c05160e0516121b962000327600039600061129f0152600061085e015260006108350152600061080c01526121b96000f3fe6080604052600436106100cb5760003560e01c806391db0b7e11610074578063ce46e0461161004e578063ce46e04614610245578063e49617e114610259578063e60c35051461026c57600080fd5b806391db0b7e146101f25780639201de5514610205578063c6eb196b1461022557600080fd5b8063773a6c3b116100a5578063773a6c3b146101695780637d294e62146101af57806388e5b2d9146101cf57600080fd5b80630778f0ac146100d957806354fd4d50146100ec5780635608d9e51461011757600080fd5b366100d457005b005b600080fd5b6100d26100e7366004611822565b61027f565b3480156100f857600080fd5b50610101610805565b60405161010e91906118b2565b60405180910390f35b34801561012357600080fd5b506007546101449073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010e565b34801561017557600080fd5b506101a16101843660046118ea565b600360209081526000928352604080842090915290825290205481565b60405190815260200161010e565b3480156101bb57600080fd5b506101a16101ca3660046118ea565b6108a8565b6101e26101dd366004611962565b610913565b604051901515815260200161010e565b6101e2610200366004611962565b610a14565b34801561021157600080fd5b506101016102203660046119ce565b610b05565b34801561023157600080fd5b506100d2610240366004611b82565b610d2b565b34801561025157600080fd5b5060016101e2565b6101e2610267366004611c97565b610fcb565b6101e261027a366004611c97565b610fdc565b600081116102ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6d696e2031206d6f6e746820737562736372697074696f6e000000000000000060448201526064015b60405180910390fd5b600082815260026020526040902060030154349061030d908390611d02565b14610374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e636f72726563742076616c7565000000000000000000000000000000000060448201526064016102e5565b60008281526002602052604090206006015473ffffffffffffffffffffffffffffffffffffffff16610402576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f6e206578697374656400000000000000000000000000000000000000000060448201526064016102e5565b336000908152600360209081526040808320858452909152812054815490919061042d908490611d02565b9050816000036104f6576104414282611d19565b6006546040517f2e324b10000000000000000000000000000000000000000000000000000000008152600481018790523360248201526044810183905291925073ffffffffffffffffffffffffffffffffffffffff1690632e324b1090606401600060405180830381600087803b1580156104bb57600080fd5b505af11580156104cf573d6000803e3d6000fd5b505033600090815260036020908152604080832089845290915290208390555061067b9050565b428211156105c1576105088183611d19565b3360008181526003602090815260408083208984529091529081902083905560065490517fd2ea9ad00000000000000000000000000000000000000000000000000000000081526004810188905260248101929092526044820183905291935073ffffffffffffffffffffffffffffffffffffffff9091169063d2ea9ad090606401600060405180830381600087803b1580156105a457600080fd5b505af11580156105b8573d6000803e3d6000fd5b5050505061067b565b6105cb4282611d19565b6006546040517fd2ea9ad0000000000000000000000000000000000000000000000000000000008152600481018790523360248201526044810183905291925073ffffffffffffffffffffffffffffffffffffffff169063d2ea9ad090606401600060405180830381600087803b15801561064557600080fd5b505af1158015610659573d6000803e3d6000fd5b5050336000908152600360209081526040808320898452909152902083905550505b6000848152600260205260408120600501805434929061069c908490611d19565b90915550506000848152600260205260409020600601546106d39073ffffffffffffffffffffffffffffffffffffffff1634610ff0565b600084815260026020908152604091829020600601548251600481526024810190935290820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe4fc6b6d0000000000000000000000000000000000000000000000000000000017905261075f9173ffffffffffffffffffffffffffffffffffffffff9091169061114f565b50600654600085815260026020526040908190206005015490517f8d879e6d00000000000000000000000000000000000000000000000000000000815260048101879052602481019190915273ffffffffffffffffffffffffffffffffffffffff90911690638d879e6d90604401600060405180830381600087803b1580156107e757600080fd5b505af11580156107fb573d6000803e3d6000fd5b5050505050505050565b60606108307f000000000000000000000000000000000000000000000000000000000000000061119a565b6108597f000000000000000000000000000000000000000000000000000000000000000061119a565b6108827f000000000000000000000000000000000000000000000000000000000000000061119a565b60405160200161089493929190611d2c565b604051602081830303815290604052905090565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602090815260408083208484529091528120544210806108f9575060008281526002602052604090206108f99084611258565b610904576000610907565b60015b60ff1690505b92915050565b600061091d611287565b83828114610957576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b82811015610a0457600086868381811061097757610977611da2565b905060200201359050828111156109ba576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109e78989848181106109cf576109cf611da2565b90506020028101906109e19190611dd1565b50600090565b6109f8576000945050505050610a0c565b9091039060010161095b565b506001925050505b949350505050565b6000610a1e611287565b83828114610a58576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b82811015610a04576000868683818110610a7857610a78611da2565b90506020020135905082811115610abb576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ae8898984818110610ad057610ad0611da2565b9050602002810190610ae29190611dd1565b826112f8565b610af9576000945050505050610a0c565b90910390600101610a5c565b60606000610b1560206002611e0f565b60ff1667ffffffffffffffff811115610b3057610b306119e7565b6040519080825280601f01601f191660200182016040528015610b5a576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b6020811015610d0157818251868360208110610bb357610bb3611da2565b610bbf9291901a611e61565b81518110610bcf57610bcf611da2565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683610c02836002611d02565b81518110610c1257610c12611da2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818251868360208110610c5657610c56611da2565b610c629291901a611e75565b81518110610c7257610c72611da2565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683610ca5836002611d02565b610cb0906001611d19565b81518110610cc057610cc0611da2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610cf981611e89565b915050610b95565b5081604051602001610d139190611ec1565b60405160208183030381529060405292505050919050565b6000610d378383611349565b6000818152600260205260409020909150610d528787611410565b6006820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556003810185905560005b8751811015610dee57610ddb888281518110610dc157610dc1611da2565b6020026020010151836000016114d790919063ffffffff16565b5080610de681611e89565b915050610da3565b506002810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560068054908201546040517f6e385518000000000000000000000000000000000000000000000000000000008152600481018590526024810188905273ffffffffffffffffffffffffffffffffffffffff9182166044820152911690636e38551890606401600060405180830381600087803b158015610e9a57600080fd5b505af1158015610eae573d6000803e3d6000fd5b50506006546040517f7e6c78bd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250637e6c78bd9150610f0c9085908b908b90600401611f87565b600060405180830381600087803b158015610f2657600080fd5b505af1158015610f3a573d6000803e3d6000fd5b50506006546040517ff398db320000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff909116925063f398db329150602401600060405180830381600087803b158015610faa57600080fd5b505af1158015610fbe573d6000803e3d6000fd5b5050505050505050505050565b6000610fd5611287565b600061090d565b6000610fe6611287565b61090d82346112f8565b8047101561105a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102e5565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146110b4576040519150601f19603f3d011682016040523d82523d6000602084013e6110b9565b606091505b505090508061114a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102e5565b505050565b6060611193838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506114f9565b9392505050565b606060006111a783611612565b600101905060008167ffffffffffffffff8111156111c7576111c76119e7565b6040519080825280601f01601f1916602001820160405280156111f1576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846111fb57509392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001830160205260408120541515611193565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146112f6576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008061130c610100850160e08601611fbc565b6020808601356000818152600290925260409091209192509061132f9083611258565b61133e5760009250505061090d565b506001949350505050565b600480546005546006546040517f64ccc13700000000000000000000000000000000000000000000000000000000815260009473ffffffffffffffffffffffffffffffffffffffff948516946364ccc137946113cd946001948b948b94909316927401000000000000000000000000000000000000000090920460ff169101611fd9565b6020604051808303816000875af11580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611193919061210d565b60075460405160009182916114c19173ffffffffffffffffffffffffffffffffffffffff16906114469087908790602401612126565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7c25fe20000000000000000000000000000000000000000000000000000000017905261114f565b905080806020019051810190610a0c9190612154565b60006111938373ffffffffffffffffffffffffffffffffffffffff84166116f4565b60608247101561158b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102e5565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115b49190612171565b60006040518083038185875af1925050503d80600081146115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b606091505b509150915061160787838387611743565b979650505050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061165b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611687576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106116a557662386f26fc10000830492506010015b6305f5e10083106116bd576305f5e100830492506008015b61271083106116d157612710830492506004015b606483106116e3576064830492506002015b600a831061090d5760010192915050565b600081815260018301602052604081205461173b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561090d565b50600061090d565b606083156117d95782516000036117d25773ffffffffffffffffffffffffffffffffffffffff85163b6117d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102e5565b5081610a0c565b610a0c83838151156117ee5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e591906118b2565b6000806040838503121561183557600080fd5b50508035926020909101359150565b60005b8381101561185f578181015183820152602001611847565b50506000910152565b60008151808452611880816020860160208601611844565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111936020830184611868565b73ffffffffffffffffffffffffffffffffffffffff811681146118e757600080fd5b50565b600080604083850312156118fd57600080fd5b8235611908816118c5565b946020939093013593505050565b60008083601f84011261192857600080fd5b50813567ffffffffffffffff81111561194057600080fd5b6020830191508360208260051b850101111561195b57600080fd5b9250929050565b6000806000806040858703121561197857600080fd5b843567ffffffffffffffff8082111561199057600080fd5b61199c88838901611916565b909650945060208701359150808211156119b557600080fd5b506119c287828801611916565b95989497509550505050565b6000602082840312156119e057600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611a5d57611a5d6119e7565b604052919050565b600067ffffffffffffffff821115611a7f57611a7f6119e7565b5060051b60200190565b600082601f830112611a9a57600080fd5b81356020611aaf611aaa83611a65565b611a16565b82815260059290921b84018101918181019086841115611ace57600080fd5b8286015b84811015611ae95780358352918301918301611ad2565b509695505050505050565b600082601f830112611b0557600080fd5b813567ffffffffffffffff811115611b1f57611b1f6119e7565b611b5060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611a16565b818152846020838601011115611b6557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611b9a57600080fd5b853567ffffffffffffffff80821115611bb257600080fd5b818801915088601f830112611bc657600080fd5b81356020611bd6611aaa83611a65565b82815260059290921b8401810191818101908c841115611bf557600080fd5b948201945b83861015611c1c578535611c0d816118c5565b82529482019490820190611bfa565b99505089013592505080821115611c3257600080fd5b611c3e89838a01611a89565b9550604088013594506060880135915080821115611c5b57600080fd5b611c6789838a01611af4565b93506080880135915080821115611c7d57600080fd5b50611c8a88828901611af4565b9150509295509295909350565b600060208284031215611ca957600080fd5b813567ffffffffffffffff811115611cc057600080fd5b8201610140818503121561119357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761090d5761090d611cd3565b8082018082111561090d5761090d611cd3565b60008451611d3e818460208901611844565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551611d7a816001850160208a01611844565b60019201918201528351611d95816002840160208801611844565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112611e0557600080fd5b9190910192915050565b60ff8181168382160290811690818114611e2b57611e2b611cd3565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611e7057611e70611e32565b500490565b600082611e8457611e84611e32565b500690565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611eba57611eba611cd3565b5060010190565b7f3078000000000000000000000000000000000000000000000000000000000000815260008251611ef9816002850160208701611844565b9190910160020192915050565b600081518084526020808501945080840160005b83811015611f4c57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611f1a565b509495945050505050565b600081518084526020808501945080840160005b83811015611f4c57815187529582019590820190600101611f6b565b838152606060208201526000611fa06060830185611f06565b8281036040840152611fb28185611f57565b9695505050505050565b600060208284031215611fce57600080fd5b8135611193816118c5565b60a08152600080875481600182811c915080831680611ff957607f831692505b60208084108203612031577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b60a0880184905260c088018280156120505760018114612084576120af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008716825285151560051b820197506120af565b60008f81526020902060005b878110156120a957815484820152908601908401612090565b83019850505b50508786038189015250505050506120c78188611868565b905082810360408401526120db8187611868565b915050612100606083018573ffffffffffffffffffffffffffffffffffffffff169052565b8215156080830152611fb2565b60006020828403121561211f57600080fd5b5051919050565b6040815260006121396040830185611f06565b828103602084015261214b8185611f57565b95945050505050565b60006020828403121561216657600080fd5b8151611193816118c5565b60008251611e0581846020870161184456fea2646970667358221220685ae3efedfbbdfcce17e5ec0994a8a690cc5640d2be3540b44e73d1f85fa94164736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100cb5760003560e01c806391db0b7e11610074578063ce46e0461161004e578063ce46e04614610245578063e49617e114610259578063e60c35051461026c57600080fd5b806391db0b7e146101f25780639201de5514610205578063c6eb196b1461022557600080fd5b8063773a6c3b116100a5578063773a6c3b146101695780637d294e62146101af57806388e5b2d9146101cf57600080fd5b80630778f0ac146100d957806354fd4d50146100ec5780635608d9e51461011757600080fd5b366100d457005b005b600080fd5b6100d26100e7366004611822565b61027f565b3480156100f857600080fd5b50610101610805565b60405161010e91906118b2565b60405180910390f35b34801561012357600080fd5b506007546101449073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010e565b34801561017557600080fd5b506101a16101843660046118ea565b600360209081526000928352604080842090915290825290205481565b60405190815260200161010e565b3480156101bb57600080fd5b506101a16101ca3660046118ea565b6108a8565b6101e26101dd366004611962565b610913565b604051901515815260200161010e565b6101e2610200366004611962565b610a14565b34801561021157600080fd5b506101016102203660046119ce565b610b05565b34801561023157600080fd5b506100d2610240366004611b82565b610d2b565b34801561025157600080fd5b5060016101e2565b6101e2610267366004611c97565b610fcb565b6101e261027a366004611c97565b610fdc565b600081116102ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6d696e2031206d6f6e746820737562736372697074696f6e000000000000000060448201526064015b60405180910390fd5b600082815260026020526040902060030154349061030d908390611d02565b14610374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e636f72726563742076616c7565000000000000000000000000000000000060448201526064016102e5565b60008281526002602052604090206006015473ffffffffffffffffffffffffffffffffffffffff16610402576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f6e206578697374656400000000000000000000000000000000000000000060448201526064016102e5565b336000908152600360209081526040808320858452909152812054815490919061042d908490611d02565b9050816000036104f6576104414282611d19565b6006546040517f2e324b10000000000000000000000000000000000000000000000000000000008152600481018790523360248201526044810183905291925073ffffffffffffffffffffffffffffffffffffffff1690632e324b1090606401600060405180830381600087803b1580156104bb57600080fd5b505af11580156104cf573d6000803e3d6000fd5b505033600090815260036020908152604080832089845290915290208390555061067b9050565b428211156105c1576105088183611d19565b3360008181526003602090815260408083208984529091529081902083905560065490517fd2ea9ad00000000000000000000000000000000000000000000000000000000081526004810188905260248101929092526044820183905291935073ffffffffffffffffffffffffffffffffffffffff9091169063d2ea9ad090606401600060405180830381600087803b1580156105a457600080fd5b505af11580156105b8573d6000803e3d6000fd5b5050505061067b565b6105cb4282611d19565b6006546040517fd2ea9ad0000000000000000000000000000000000000000000000000000000008152600481018790523360248201526044810183905291925073ffffffffffffffffffffffffffffffffffffffff169063d2ea9ad090606401600060405180830381600087803b15801561064557600080fd5b505af1158015610659573d6000803e3d6000fd5b5050336000908152600360209081526040808320898452909152902083905550505b6000848152600260205260408120600501805434929061069c908490611d19565b90915550506000848152600260205260409020600601546106d39073ffffffffffffffffffffffffffffffffffffffff1634610ff0565b600084815260026020908152604091829020600601548251600481526024810190935290820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe4fc6b6d0000000000000000000000000000000000000000000000000000000017905261075f9173ffffffffffffffffffffffffffffffffffffffff9091169061114f565b50600654600085815260026020526040908190206005015490517f8d879e6d00000000000000000000000000000000000000000000000000000000815260048101879052602481019190915273ffffffffffffffffffffffffffffffffffffffff90911690638d879e6d90604401600060405180830381600087803b1580156107e757600080fd5b505af11580156107fb573d6000803e3d6000fd5b5050505050505050565b60606108307f000000000000000000000000000000000000000000000000000000000000000061119a565b6108597f000000000000000000000000000000000000000000000000000000000000000061119a565b6108827f000000000000000000000000000000000000000000000000000000000000000061119a565b60405160200161089493929190611d2c565b604051602081830303815290604052905090565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602090815260408083208484529091528120544210806108f9575060008281526002602052604090206108f99084611258565b610904576000610907565b60015b60ff1690505b92915050565b600061091d611287565b83828114610957576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b82811015610a0457600086868381811061097757610977611da2565b905060200201359050828111156109ba576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109e78989848181106109cf576109cf611da2565b90506020028101906109e19190611dd1565b50600090565b6109f8576000945050505050610a0c565b9091039060010161095b565b506001925050505b949350505050565b6000610a1e611287565b83828114610a58576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b82811015610a04576000868683818110610a7857610a78611da2565b90506020020135905082811115610abb576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ae8898984818110610ad057610ad0611da2565b9050602002810190610ae29190611dd1565b826112f8565b610af9576000945050505050610a0c565b90910390600101610a5c565b60606000610b1560206002611e0f565b60ff1667ffffffffffffffff811115610b3057610b306119e7565b6040519080825280601f01601f191660200182016040528015610b5a576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b6020811015610d0157818251868360208110610bb357610bb3611da2565b610bbf9291901a611e61565b81518110610bcf57610bcf611da2565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683610c02836002611d02565b81518110610c1257610c12611da2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818251868360208110610c5657610c56611da2565b610c629291901a611e75565b81518110610c7257610c72611da2565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683610ca5836002611d02565b610cb0906001611d19565b81518110610cc057610cc0611da2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610cf981611e89565b915050610b95565b5081604051602001610d139190611ec1565b60405160208183030381529060405292505050919050565b6000610d378383611349565b6000818152600260205260409020909150610d528787611410565b6006820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556003810185905560005b8751811015610dee57610ddb888281518110610dc157610dc1611da2565b6020026020010151836000016114d790919063ffffffff16565b5080610de681611e89565b915050610da3565b506002810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560068054908201546040517f6e385518000000000000000000000000000000000000000000000000000000008152600481018590526024810188905273ffffffffffffffffffffffffffffffffffffffff9182166044820152911690636e38551890606401600060405180830381600087803b158015610e9a57600080fd5b505af1158015610eae573d6000803e3d6000fd5b50506006546040517f7e6c78bd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250637e6c78bd9150610f0c9085908b908b90600401611f87565b600060405180830381600087803b158015610f2657600080fd5b505af1158015610f3a573d6000803e3d6000fd5b50506006546040517ff398db320000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff909116925063f398db329150602401600060405180830381600087803b158015610faa57600080fd5b505af1158015610fbe573d6000803e3d6000fd5b5050505050505050505050565b6000610fd5611287565b600061090d565b6000610fe6611287565b61090d82346112f8565b8047101561105a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102e5565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146110b4576040519150601f19603f3d011682016040523d82523d6000602084013e6110b9565b606091505b505090508061114a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102e5565b505050565b6060611193838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506114f9565b9392505050565b606060006111a783611612565b600101905060008167ffffffffffffffff8111156111c7576111c76119e7565b6040519080825280601f01601f1916602001820160405280156111f1576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846111fb57509392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001830160205260408120541515611193565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146112f6576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008061130c610100850160e08601611fbc565b6020808601356000818152600290925260409091209192509061132f9083611258565b61133e5760009250505061090d565b506001949350505050565b600480546005546006546040517f64ccc13700000000000000000000000000000000000000000000000000000000815260009473ffffffffffffffffffffffffffffffffffffffff948516946364ccc137946113cd946001948b948b94909316927401000000000000000000000000000000000000000090920460ff169101611fd9565b6020604051808303816000875af11580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611193919061210d565b60075460405160009182916114c19173ffffffffffffffffffffffffffffffffffffffff16906114469087908790602401612126565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7c25fe20000000000000000000000000000000000000000000000000000000017905261114f565b905080806020019051810190610a0c9190612154565b60006111938373ffffffffffffffffffffffffffffffffffffffff84166116f4565b60608247101561158b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102e5565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115b49190612171565b60006040518083038185875af1925050503d80600081146115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b606091505b509150915061160787838387611743565b979650505050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061165b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611687576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106116a557662386f26fc10000830492506010015b6305f5e10083106116bd576305f5e100830492506008015b61271083106116d157612710830492506004015b606483106116e3576064830492506002015b600a831061090d5760010192915050565b600081815260018301602052604081205461173b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561090d565b50600061090d565b606083156117d95782516000036117d25773ffffffffffffffffffffffffffffffffffffffff85163b6117d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102e5565b5081610a0c565b610a0c83838151156117ee5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e591906118b2565b6000806040838503121561183557600080fd5b50508035926020909101359150565b60005b8381101561185f578181015183820152602001611847565b50506000910152565b60008151808452611880816020860160208601611844565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111936020830184611868565b73ffffffffffffffffffffffffffffffffffffffff811681146118e757600080fd5b50565b600080604083850312156118fd57600080fd5b8235611908816118c5565b946020939093013593505050565b60008083601f84011261192857600080fd5b50813567ffffffffffffffff81111561194057600080fd5b6020830191508360208260051b850101111561195b57600080fd5b9250929050565b6000806000806040858703121561197857600080fd5b843567ffffffffffffffff8082111561199057600080fd5b61199c88838901611916565b909650945060208701359150808211156119b557600080fd5b506119c287828801611916565b95989497509550505050565b6000602082840312156119e057600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611a5d57611a5d6119e7565b604052919050565b600067ffffffffffffffff821115611a7f57611a7f6119e7565b5060051b60200190565b600082601f830112611a9a57600080fd5b81356020611aaf611aaa83611a65565b611a16565b82815260059290921b84018101918181019086841115611ace57600080fd5b8286015b84811015611ae95780358352918301918301611ad2565b509695505050505050565b600082601f830112611b0557600080fd5b813567ffffffffffffffff811115611b1f57611b1f6119e7565b611b5060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611a16565b818152846020838601011115611b6557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611b9a57600080fd5b853567ffffffffffffffff80821115611bb257600080fd5b818801915088601f830112611bc657600080fd5b81356020611bd6611aaa83611a65565b82815260059290921b8401810191818101908c841115611bf557600080fd5b948201945b83861015611c1c578535611c0d816118c5565b82529482019490820190611bfa565b99505089013592505080821115611c3257600080fd5b611c3e89838a01611a89565b9550604088013594506060880135915080821115611c5b57600080fd5b611c6789838a01611af4565b93506080880135915080821115611c7d57600080fd5b50611c8a88828901611af4565b9150509295509295909350565b600060208284031215611ca957600080fd5b813567ffffffffffffffff811115611cc057600080fd5b8201610140818503121561119357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761090d5761090d611cd3565b8082018082111561090d5761090d611cd3565b60008451611d3e818460208901611844565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551611d7a816001850160208a01611844565b60019201918201528351611d95816002840160208801611844565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112611e0557600080fd5b9190910192915050565b60ff8181168382160290811690818114611e2b57611e2b611cd3565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611e7057611e70611e32565b500490565b600082611e8457611e84611e32565b500690565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611eba57611eba611cd3565b5060010190565b7f3078000000000000000000000000000000000000000000000000000000000000815260008251611ef9816002850160208701611844565b9190910160020192915050565b600081518084526020808501945080840160005b83811015611f4c57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611f1a565b509495945050505050565b600081518084526020808501945080840160005b83811015611f4c57815187529582019590820190600101611f6b565b838152606060208201526000611fa06060830185611f06565b8281036040840152611fb28185611f57565b9695505050505050565b600060208284031215611fce57600080fd5b8135611193816118c5565b60a08152600080875481600182811c915080831680611ff957607f831692505b60208084108203612031577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b60a0880184905260c088018280156120505760018114612084576120af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008716825285151560051b820197506120af565b60008f81526020902060005b878110156120a957815484820152908601908401612090565b83019850505b50508786038189015250505050506120c78188611868565b905082810360408401526120db8187611868565b915050612100606083018573ffffffffffffffffffffffffffffffffffffffff169052565b8215156080830152611fb2565b60006020828403121561211f57600080fd5b5051919050565b6040815260006121396040830185611f06565b828103602084015261214b8185611f57565b95945050505050565b60006020828403121561216657600080fd5b8151611193816118c5565b60008251611e0581846020870161184456fea2646970667358221220685ae3efedfbbdfcce17e5ec0994a8a690cc5640d2be3540b44e73d1f85fa94164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "params": {
          "attestation": "The new attestation."
        },
        "returns": {
          "_0": "Whether the attestation is valid."
        }
      },
      "isPayable()": {
        "returns": {
          "_0": "True, indicating that the contract can accept payments."
        }
      },
      "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "params": {
          "attestations": "The new attestations.",
          "values": "Explicit ETH amounts which were sent with each attestation."
        },
        "returns": {
          "_0": "Whether all the attestations are valid."
        }
      },
      "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "params": {
          "attestations": "The existing attestations to be revoked.",
          "values": "Explicit ETH amounts which were sent with each revocation."
        },
        "returns": {
          "_0": "Whether the attestations can be revoked."
        }
      },
      "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "params": {
          "attestation": "The existing attestation to be revoked."
        },
        "returns": {
          "_0": "Whether the attestation can be revoked."
        }
      },
      "subscribe(bytes32,uint256)": {
        "details": "Mint tokens for encrypted attestations.",
        "params": {
          "schemaUID": "The UID of the schema for which tokens are being minted."
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "title": "ContentSubscriptionResolver",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "notice": "Processes an attestation and verifies whether it's valid."
      },
      "isPayable()": {
        "notice": "Indicates whether the contract is designed to handle incoming payments."
      },
      "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "notice": "Processes multiple attestations and verifies whether they are valid."
      },
      "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
      },
      "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "notice": "Processes an attestation revocation and verifies if it can be revoked."
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "A schema resolver subcription to content example",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4075,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "ONE_MONTH",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4092,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "schema",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 4097,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "schemas",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(SchemaInfo)4089_storage)"
      },
      {
        "astId": 4103,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "userSubscriptions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 4106,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "schemaRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISchemaRegistry)3352"
      },
      {
        "astId": 4109,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "schemaResolver",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISchemaResolver)3708"
      },
      {
        "astId": 4112,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "tableland",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ITablelandSubscriptionsIndexer)5411"
      },
      {
        "astId": 4114,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "revocable",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 4116,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "splitterFactory",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISchemaRegistry)3352": {
        "encoding": "inplace",
        "label": "contract ISchemaRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ISchemaResolver)3708": {
        "encoding": "inplace",
        "label": "contract ISchemaResolver",
        "numberOfBytes": "20"
      },
      "t_contract(ITablelandSubscriptionsIndexer)5411": {
        "encoding": "inplace",
        "label": "contract ITablelandSubscriptionsIndexer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(SchemaInfo)4089_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ContentSubscriptionResolver.SchemaInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SchemaInfo)4089_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2320_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2319,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2005_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SchemaInfo)4089_storage": {
        "encoding": "inplace",
        "label": "struct ContentSubscriptionResolver.SchemaInfo",
        "members": [
          {
            "astId": 4078,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "contentCreators",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2320_storage"
          },
          {
            "astId": 4080,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "multisig",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4082,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "subscriptionPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4084,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "subscriptionsPool",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4086,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "totalRevenue",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4088,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "splitterContract",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)2005_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2000,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2004,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}