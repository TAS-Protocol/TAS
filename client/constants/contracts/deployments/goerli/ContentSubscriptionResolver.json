{
  "address": "0x6D586fcDd18dA8F39783daa09551682dF2EB76Cc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITAS",
          "name": "tas",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_splitterFactory",
          "type": "address"
        },
        {
          "internalType": "contract ISchemaRegistry",
          "name": "_schemaRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTAS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPayable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "attest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        }
      ],
      "name": "hasAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPayable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "attestations",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "multiAttest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "attestations",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "multiRevoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "contentCreators",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "creatorsShares",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "monthlySubscriptionPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "schemaName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "schemaDescription",
          "type": "string"
        }
      ],
      "name": "registerSubscriptionSchema",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "revoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        }
      ],
      "name": "splitSubscriptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitterFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "months",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "userSubscriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x556b5fab6ebab5029a55d96712ae53c897b07fec8fe0d5d2bb77f1760d67c598",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0x6D586fcDd18dA8F39783daa09551682dF2EB76Cc",
    "transactionIndex": 3,
    "gasUsed": "3313533",
    "logsBloom": "0x00040000000000000000000000000000000000000000080040000000000000000000200000000100000000000000000000000000000000000000000000000000000000000000000000010008000000000000000000000000000000000008000000000000020000000000000040000800020000000000000000000010000400000000000001000000000000000000040000000000000000000000000000800000000000100000000000000000000000100000000200000000000000000002000000000002000000000000000001000000002000000000000000000000000020000000001000100000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0655c76eaae7e6a21989a402e65454e0f23c2a12e5db7fbdd174957bea3a0458",
    "transactionHash": "0x556b5fab6ebab5029a55d96712ae53c897b07fec8fe0d5d2bb77f1760d67c598",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 9647495,
        "transactionHash": "0x556b5fab6ebab5029a55d96712ae53c897b07fec8fe0d5d2bb77f1760d67c598",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d586fcdd18da8f39783daa09551682df2eb76cc",
          "0x0000000000000000000000000000000000000000000000000000000000000679"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x0655c76eaae7e6a21989a402e65454e0f23c2a12e5db7fbdd174957bea3a0458"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 9647495,
        "transactionHash": "0x556b5fab6ebab5029a55d96712ae53c897b07fec8fe0d5d2bb77f1760d67c598",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000006d586fcdd18da8f39783daa09551682df2eb76cc000000000000000000000000000000000000000000000000000000000000067900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000066435245415445205441424c452067726f75705f3528736368656d615549442074657874207072696d617279206b65792c206d6f6e74686c79537562736372697074696f6e507269636520746578742c2073706c6974746572436f6e74726163742074657874290000000000000000000000000000000000000000000000000000",
        "logIndex": 6,
        "blockHash": "0x0655c76eaae7e6a21989a402e65454e0f23c2a12e5db7fbdd174957bea3a0458"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 9647495,
        "transactionHash": "0x556b5fab6ebab5029a55d96712ae53c897b07fec8fe0d5d2bb77f1760d67c598",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d586fcdd18da8f39783daa09551682df2eb76cc",
          "0x000000000000000000000000000000000000000000000000000000000000067a"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x0655c76eaae7e6a21989a402e65454e0f23c2a12e5db7fbdd174957bea3a0458"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 9647495,
        "transactionHash": "0x556b5fab6ebab5029a55d96712ae53c897b07fec8fe0d5d2bb77f1760d67c598",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000006d586fcdd18da8f39783daa09551682df2eb76cc000000000000000000000000000000000000000000000000000000000000067a0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004e435245415445205441424c452063726561746f725f3528736368656d615549442074657874207072696d617279206b65792c20617474657374657220746578742c20736861726573207465787429000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0x0655c76eaae7e6a21989a402e65454e0f23c2a12e5db7fbdd174957bea3a0458"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 9647495,
        "transactionHash": "0x556b5fab6ebab5029a55d96712ae53c897b07fec8fe0d5d2bb77f1760d67c598",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d586fcdd18da8f39783daa09551682df2eb76cc",
          "0x000000000000000000000000000000000000000000000000000000000000067b"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x0655c76eaae7e6a21989a402e65454e0f23c2a12e5db7fbdd174957bea3a0458"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 9647495,
        "transactionHash": "0x556b5fab6ebab5029a55d96712ae53c897b07fec8fe0d5d2bb77f1760d67c598",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000006d586fcdd18da8f39783daa09551682df2eb76cc000000000000000000000000000000000000000000000000000000000000067b00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000055435245415445205441424c4520737562736372697074696f6e5f3528736368656d6155494420746578742c207375627363726962657220746578742c20737562736372697074696f6e456e647341742074657874290000000000000000000000",
        "logIndex": 10,
        "blockHash": "0x0655c76eaae7e6a21989a402e65454e0f23c2a12e5db7fbdd174957bea3a0458"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 9647495,
        "transactionHash": "0x556b5fab6ebab5029a55d96712ae53c897b07fec8fe0d5d2bb77f1760d67c598",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d586fcdd18da8f39783daa09551682df2eb76cc",
          "0x000000000000000000000000000000000000000000000000000000000000067c"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x0655c76eaae7e6a21989a402e65454e0f23c2a12e5db7fbdd174957bea3a0458"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 9647495,
        "transactionHash": "0x556b5fab6ebab5029a55d96712ae53c897b07fec8fe0d5d2bb77f1760d67c598",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000006d586fcdd18da8f39783daa09551682df2eb76cc000000000000000000000000000000000000000000000000000000000000067c0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000005a435245415445205441424c4520726576656e75655f3528736368656d615549442074657874207072696d617279206b65792c20746f74616c556e636c61696d656420746578742c20746f74616c436c61696d6564207465787429000000000000",
        "logIndex": 12,
        "blockHash": "0x0655c76eaae7e6a21989a402e65454e0f23c2a12e5db7fbdd174957bea3a0458"
      }
    ],
    "blockNumber": 9647495,
    "cumulativeGasUsed": "7691032",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5E0FFE0950231EfaD5972afce26f1a91F9B7a74b",
    "0x0EA67bE9F10DDfEC17ce67fC802ecE32cf5C4f29",
    "0x38Db6ff229c7d357ed34126fBd7F9200553eb245"
  ],
  "numDeployments": 1,
  "solcInputHash": "49ec6d5a7c331538ab42d44533de0f70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITAS\",\"name\":\"tas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_splitterFactory\",\"type\":\"address\"},{\"internalType\":\"contract ISchemaRegistry\",\"name\":\"_schemaRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contentCreators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"creatorsShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"monthlySubscriptionPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"schemaName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaDescription\",\"type\":\"string\"}],\"name\":\"registerSubscriptionSchema\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"name\":\"splitSubscriptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitterFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"months\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userSubscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"isPayable()\":{\"returns\":{\"_0\":\"True, indicating that the contract can accept payments.\"}},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}},\"splitSubscriptions(bytes32)\":{\"details\":\"Distributes minting funds among attesters using a splitter contract. This function calculates the distribution of funds based on attestation counts and shares, deploys a splitter contract, and sends the funds to it for distribution.\"},\"subscribe(bytes32,uint256)\":{\"details\":\"Mint tokens for encrypted attestations.\",\"params\":{\"schemaUID\":\"The UID of the schema for which tokens are being minted.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"ContentSubscriptionResolver\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation and verifies whether it's valid.\"},\"isPayable()\":{\"notice\":\"Indicates whether the contract is designed to handle incoming payments.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes multiple attestations and verifies whether they are valid.\"},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes revocation of multiple attestation and verifies they can be revoked.\"},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation revocation and verifies if it can be revoked.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"A schema resolver subcription to content example\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolver/examples/ContentSubscriptionResolver.sol\":\"ContentSubscriptionResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Goerli.\\n    address internal constant GOERLI =\\n        0xDA8EA22d092307874f30A1F277D1388dca0BA97a;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Goerli.\\n    address internal constant ARBITRUM_GOERLI =\\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Hyperspace.\\n    address internal constant FILECOIN_HYPERSPACE =\\n        0x0B9737ab4B3e5303CB67dB031b509697e31c02d3;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (ITablelandTables) {\\n        if (block.chainid == 1) {\\n            return ITablelandTables(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return ITablelandTables(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return ITablelandTables(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return ITablelandTables(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return ITablelandTables(MATIC);\\n        } else if (block.chainid == 314) {\\n            return ITablelandTables(FILECOIN);\\n        } else if (block.chainid == 5) {\\n            return ITablelandTables(GOERLI);\\n        } else if (block.chainid == 420) {\\n            return ITablelandTables(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421613) {\\n            return ITablelandTables(ARBITRUM_GOERLI);\\n        } else if (block.chainid == 80001) {\\n            return ITablelandTables(MATICMUM);\\n        } else if (block.chainid == 3141) {\\n            return ITablelandTables(FILECOIN_HYPERSPACE);\\n        } else if (block.chainid == 31337) {\\n            return ITablelandTables(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x245cfb7b5e4d9e4874146dac869e7a28a5c9caf2251fd9eeb3518d3e57f0ca01\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidTAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\",\"keccak256\":\"0x0d95a05a089cc0388e57e1baf03fd4882de7c6424311d50831f627a03752092e\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ISchemaRegistry {\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(        \\n        string calldata schema,\\n        string calldata schemaName,\\n        string memory schemaDescription,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\",\"keccak256\":\"0x321d2ec466d25d766edd119eb0aba54fdecfc1c8a402a8be7a4a86629b675d8b\",\"license\":\"MIT\"},\"contracts/ITAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title ITAS\\n/// @notice TAS - Tableland Attestation Service interface.\\ninterface ITAS {\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n}\",\"keccak256\":\"0xbc746a15c4be99028921309b514b0c28a6639d6e17bd241bc9135f94c0471198\",\"license\":\"MIT\"},\"contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\",\"keccak256\":\"0x3c960ee02543c88107d840df240bab23ac07d583ba7ff582c9b5cac1b8b73a7c\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\",\"keccak256\":\"0x1dec285f07614107174b652568474a55b6a2692631888731967fb5cc53d4f417\",\"license\":\"MIT\"},\"contracts/resolver/SchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { ITAS, Attestation } from \\\"../ITAS.sol\\\";\\nimport { AccessDenied, InvalidTAS, InvalidLength, uncheckedInc } from \\\"../Common.sol\\\";\\nimport { Semver } from \\\"../Semver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @title SchemaResolver\\n/// @notice The base schema resolver contract.\\nabstract contract SchemaResolver is ISchemaResolver, Semver {\\n    error InsufficientValue();\\n    error NotPayable();\\n\\n    // The global tas contract.\\n    ITAS internal immutable _tas;\\n\\n    /// @dev Creates a new resolver.\\n    /// @param tas The address of the global tas contract.\\n    constructor(ITAS tas) Semver(0, 0, 1) {\\n        if (address(tas) == address(0)) {\\n            revert InvalidTAS();\\n        }\\n\\n        _tas = tas;\\n    }\\n\\n    /// @dev Ensures that only the tas contract can make this call.\\n    modifier onlytas() {\\n        _onlytas();\\n\\n        _;\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function isPayable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev ETH callback.\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function attest(Attestation calldata attestation) external payable onlytas returns (bool) {\\n        return onAttest(attestation, msg.value);\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlytas returns (bool) {\\n        uint256 length = attestations.length;\\n        if (length != values.length) {\\n            revert InvalidLength();\\n        }\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Pltase note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the attestation to the underlying resolver and return false in case it isn't approved.\\n            if (!onAttest(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function revoke(Attestation calldata attestation) external payable onlytas returns (bool) {\\n        return onRevoke(attestation, msg.value);\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlytas returns (bool) {\\n        uint256 length = attestations.length;\\n        if (length != values.length) {\\n            revert InvalidLength();\\n        }\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Pltase note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the revocation to the underlying resolver and return false in case it isn't approved.\\n            if (!onRevoke(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice A resolver callback that should be implemented by child contracts.\\n    /// @param attestation The new attestation.\\n    /// @param value An explicit ETH amount that was sent to the resolver. Pltase note that this value is verified in\\n    ///     both attest() and multiAttest() callbacks tas-only callbacks and that in case of multi attestations, it'll\\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\\n    ///     attestations in the batch.\\n    /// @return Whether the attestation is valid.\\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @param value An explicit ETH amount that was sent to the resolver. Pltase note that this value is verified in\\n    ///     both revoke() and multiRevoke() callbacks tas-only callbacks and that in case of multi attestations, it'll\\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\\n    ///     attestations in the batch.\\n    /// @return Whether the attestation can be revoked.\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /// @dev Ensures that only the tas contract can make this call.\\n    function _onlytas() private view {\\n        if (msg.sender != address(_tas)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\",\"keccak256\":\"0x15b8bc50da941d4cd5ca986efc37e738331b6ddb3f86c0fe953247606fecad42\",\"license\":\"MIT\"},\"contracts/resolver/examples/ContentSubscriptionResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { TablelandDeployments, ITablelandTables } from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport { SQLHelpers } from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {ITAS, Attestation} from \\\"../../ITAS.sol\\\";\\n\\nimport {SchemaResolver} from \\\"../SchemaResolver.sol\\\";\\n\\nimport \\\"../../ISchemaRegistry.sol\\\";\\n\\n/**\\n * @title ContentSubscriptionResolver\\n * @notice A schema resolver subcription to content example\\n */\\ncontract ContentSubscriptionResolver is SchemaResolver {\\n    using Address for address payable;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    uint256 ONE_MONTH = 30 days;\\n\\n    struct SchemaInfo{\\n        EnumerableSet.AddressSet contentCreators;\\n        uint256 subscriptionPrice;\\n        uint256 subscriptionsPool;\\n        uint256 totalRevenue;\\n        address splitterContract;\\n    }\\n\\n    string schema = \\\"string jsonCID\\\";\\n\\n    mapping(bytes32 => SchemaInfo) schemas;\\n\\n    mapping(address => mapping(bytes32 => uint256)) public userSubscriptions;\\n\\n    // The global schema registry.\\n    ISchemaRegistry private immutable schemaRegistry;\\n\\n    ITablelandTables private tablelandContract;\\n    \\n    string[] createTableStatements; \\n\\n    string[] public tables;\\n\\n    uint256[] tableIDs;\\n\\n    uint256 tablesUpdates;\\n\\n    uint256 private tablesRowsCounter;\\n\\n    string private constant GROUP_TABLE_PREFIX = \\\"group\\\";\\n\\n    string private constant GROUP_SCHEMA = \\\"schemaUID text primary key, monthlySubscriptionPrice text, splitterContract text\\\";\\n\\n    string private constant CREATOR_TABLE_PREFIX = \\\"creator\\\";\\n\\n    string private constant CREATOR_SCHEMA = \\\"schemaUID text primary key, attester text, shares text\\\";\\n\\n    string private constant SUBSCRIPTION_TABLE_PREFIX = \\\"subscription\\\";\\n\\n    string private constant SUBSCRIPTION_SCHEMA = \\\"schemaUID text, subscriber text, subscriptionEndsAt text\\\";\\n\\n    string private constant GROUP_REVENUE_TABLE_PREFIX = \\\"revenue\\\";\\n\\n    string private constant GROUP_REVENUE_SCHEMA = \\\"schemaUID text primary key, totalUnclaimed text, totalClaimed text\\\";\\n\\n    address public splitterFactory;\\n\\n    constructor(\\n        ITAS tas,\\n        address _splitterFactory,\\n        ISchemaRegistry _schemaRegistry\\n    )SchemaResolver(tas){\\n\\n        schemaRegistry = _schemaRegistry;\\n\\n        splitterFactory = _splitterFactory;\\n\\n        tablelandContract = TablelandDeployments.get();        \\n\\n        createTableStatements.push(SQLHelpers.toCreateFromSchema(\\n            GROUP_SCHEMA,\\n            GROUP_TABLE_PREFIX\\n        ));\\n\\n        createTableStatements.push(SQLHelpers.toCreateFromSchema(\\n            CREATOR_SCHEMA,\\n            CREATOR_TABLE_PREFIX\\n        ));\\n\\n        createTableStatements.push(SQLHelpers.toCreateFromSchema(\\n            SUBSCRIPTION_SCHEMA,\\n            SUBSCRIPTION_TABLE_PREFIX\\n        ));\\n\\n        createTableStatements.push(SQLHelpers.toCreateFromSchema(\\n            GROUP_REVENUE_SCHEMA,\\n            GROUP_REVENUE_TABLE_PREFIX\\n        ));\\n\\n        tableIDs = tablelandContract.create(address(this), createTableStatements);\\n\\n        tables.push(SQLHelpers.toNameFromId(GROUP_TABLE_PREFIX, tableIDs[0]));\\n        tables.push(SQLHelpers.toNameFromId(CREATOR_TABLE_PREFIX, tableIDs[1]));\\n        tables.push(SQLHelpers.toNameFromId(SUBSCRIPTION_TABLE_PREFIX, tableIDs[2]));\\n        tables.push(SQLHelpers.toNameFromId(GROUP_REVENUE_TABLE_PREFIX, tableIDs[3]));\\n\\n    }\\n\\n    function SchemaInfoInserted(\\n        bytes32 schemaUID,\\n        address[] calldata contentCreators,\\n        uint256[] calldata creatorsShares,\\n        uint256 monthlySubscriptionPrice,\\n        address splitterContract\\n    ) internal {\\n        // Managing tableland rows limitation.\\n        if(tablesRowsCounter == 100000){\\n            RenewTables();\\n        }\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toInsert(\\n                GROUP_TABLE_PREFIX,\\n                tableIDs[0],\\n                \\\"schemaUID, monthlySubscriptionPrice, splitterContract\\\",\\n                string.concat(\\n                SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                \\\",\\\",\\n                SQLHelpers.quote((Strings.toString(monthlySubscriptionPrice))),\\n                \\\",\\\",\\n                SQLHelpers.quote((Strings.toHexString(splitterContract)))\\n                )\\n            )\\n        );\\n        tablesRowsCounter++;\\n        SchemaAdminsInserted(schemaUID, contentCreators, creatorsShares);\\n        SchemaRevenueRecordCreated(schemaUID);\\n    }\\n\\n    function SchemaAdminsInserted(\\n        bytes32 schemaUID,\\n        address[] calldata contentCreators,\\n        uint256[] calldata creatorsShares\\n    ) internal {\\n        for(uint i =0; i < contentCreators.length; i++){\\n            mutate(\\n                tableIDs[1],\\n                SQLHelpers.toInsert(\\n                    CREATOR_TABLE_PREFIX,\\n                    tableIDs[1],\\n                    \\\"schemaUID, attester, shares\\\",\\n                    string.concat(\\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(contentCreators[i])),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(creatorsShares[i]))\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function SchemaSubscriptionCreated(\\n        bytes32 schemaUID,\\n        address subscriber,\\n        uint256 subscriptionEndsAt\\n    ) internal {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toInsert(\\n                SUBSCRIPTION_TABLE_PREFIX,\\n                tableIDs[2],\\n                \\\"schemaUID, subscriber, subscriptionEndsAt\\\",\\n                string.concat(\\n                SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                \\\",\\\",\\n                SQLHelpers.quote(Strings.toHexString(subscriber)),\\n                \\\",\\\",\\n                SQLHelpers.quote(Strings.toString(subscriptionEndsAt))\\n                )\\n            )\\n        );\\n    }\\n\\n    function SchemaSubscriptionUpdated(\\n        bytes32 schemaUID,\\n        address subscriber,\\n        uint256 subscriptionEndsAt\\n    ) internal {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toUpdate(\\n                SUBSCRIPTION_TABLE_PREFIX,\\n                tableIDs[2],\\n                string.concat(\\\"subscriptionEndsAt=\\\",SQLHelpers.quote(Strings.toString(subscriptionEndsAt))),\\n                string.concat(\\\"subscriber=\\\",SQLHelpers.quote(Strings.toHexString(subscriber)),\\\"and schemaUID=\\\",SQLHelpers.quote(bytes32ToString(schemaUID)))\\n            )\\n        );\\n    }\\n\\n    function SchemaRevenueRecordCreated(\\n        bytes32 schemaUID\\n    ) internal {\\n        uint256 ZERO = 0;\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toInsert(\\n                SUBSCRIPTION_TABLE_PREFIX,\\n                tableIDs[3],\\n                \\\"schemaUID, totalUnclaimed, totalClaimed\\\",\\n                string.concat(\\n                SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                \\\",\\\",\\n                SQLHelpers.quote(Strings.toString(ZERO)),\\n                \\\",\\\",\\n                SQLHelpers.quote(Strings.toString(ZERO))\\n                )\\n            )\\n        );\\n    }\\n\\n    function SchemaRevenueUpdated(\\n        bytes32 schemaUID,\\n        uint256 totalUnclaimed,\\n        uint256 totalClaimed\\n    ) internal {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toUpdate(\\n                SUBSCRIPTION_TABLE_PREFIX,\\n                tableIDs[3],\\n                string.concat(\\\"totalUnclaimed=\\\",SQLHelpers.quote(Strings.toString(totalUnclaimed)),\\\" , totalClaimed=\\\",SQLHelpers.quote(Strings.toString(totalClaimed))),\\n                string.concat(\\\"schemaUID=\\\",SQLHelpers.quote(bytes32ToString(schemaUID)))\\n            )\\n        );\\n    }\\n\\n    function RenewTables()internal{\\n        \\n        tableIDs = tablelandContract.create(address(this), createTableStatements);\\n\\n        tables.push(SQLHelpers.toNameFromId(GROUP_TABLE_PREFIX, tableIDs[0]));\\n\\n        tables.push(SQLHelpers.toNameFromId(CREATOR_TABLE_PREFIX, tableIDs[1]));\\n\\n        tables.push(SQLHelpers.toNameFromId(SUBSCRIPTION_TABLE_PREFIX, tableIDs[2]));\\n\\n        tables.push(SQLHelpers.toNameFromId(GROUP_REVENUE_TABLE_PREFIX, tableIDs[3]));\\n\\n        tablesRowsCounter = 0; \\n\\n        tablesUpdates++;\\n    }\\n\\n    function registerSubscriptionSchema(\\n        address[] calldata contentCreators,\\n        uint256[] calldata creatorsShares,\\n        uint256 monthlySubscriptionPrice,\\n        string calldata schemaName,\\n        string calldata schemaDescription\\n    )external{\\n        // Register the schema and get its UID\\n        bytes32 schemaUID = schemaRegistry.register(\\n            schema,\\n            schemaName,\\n            schemaDescription,\\n            ISchemaResolver(address(this)),\\n            false\\n        );\\n        SchemaInfo storage Schema = schemas[schemaUID];\\n        Schema.splitterContract = createSplitter(contentCreators,creatorsShares);\\n        Schema.subscriptionPrice = monthlySubscriptionPrice;\\n        for(uint256 i = 0; i < contentCreators.length; i++){\\n            Schema.contentCreators.add(contentCreators[i]);\\n        }\\n\\n        SchemaInfoInserted(schemaUID, contentCreators, creatorsShares, monthlySubscriptionPrice, Schema.splitterContract);\\n    }\\n\\n    /**\\n     * @dev Mint tokens for encrypted attestations.\\n     * @param schemaUID The UID of the schema for which tokens are being minted.\\n     */\\n    function subscribe(bytes32 schemaUID, uint256 months) external payable {\\n        require(months > 0, \\\"min 1 month subscription\\\");\\n        require(\\n            schemas[schemaUID].subscriptionPrice * months == msg.value,\\n            \\\"Incorrect value\\\"\\n        );\\n        require(schemas[schemaUID].splitterContract != address(0), \\\"non existed\\\");\\n\\n        uint256 subscriptionEndDate = userSubscriptions[msg.sender][schemaUID];\\n        \\n        uint256 time = ONE_MONTH * months;\\n\\n        if(subscriptionEndDate == 0){\\n            time += block.timestamp;\\n            SchemaSubscriptionCreated(schemaUID, msg.sender, time);\\n            userSubscriptions[msg.sender][schemaUID] = time;\\n        }else if(subscriptionEndDate > block.timestamp){\\n            subscriptionEndDate += time;\\n            userSubscriptions[msg.sender][schemaUID] = subscriptionEndDate;\\n            SchemaSubscriptionUpdated(schemaUID, msg.sender, subscriptionEndDate);\\n        }else{\\n            time += block.timestamp;\\n            SchemaSubscriptionUpdated(schemaUID, msg.sender, time);\\n            userSubscriptions[msg.sender][schemaUID] = time;\\n        }\\n\\n        schemas[schemaUID].subscriptionsPool += msg.value;\\n\\n        SchemaRevenueUpdated(schemaUID, schemas[schemaUID].subscriptionsPool, schemas[schemaUID].totalRevenue);\\n    }\\n\\n    /**\\n    * @dev Handles attestation by validating the attester and bond value.\\n    * @param attestation The attestation data.\\n    * @return Boolean indicating the success of the attestation.\\n    */\\n    function onAttest(\\n        Attestation calldata attestation,\\n        uint256 /* value */\\n    ) internal override view returns (bool) {\\n        address attester = attestation.attester;\\n        bytes32 schemaUID = attestation.schema;\\n        if (!schemas[schemaUID].contentCreators.contains(attester)) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Checks if an attestation can be revoked based on resolution status and time.\\n    * @return Boolean indicating whether the attestation can be revoked.\\n    */\\n    function onRevoke(\\n        Attestation calldata /*attestation*/,\\n        uint256 /* value */\\n    ) internal override pure returns (bool) {\\n        return false;\\n    }\\n\\n    /** \\n    * @dev Distributes minting funds among attesters using a splitter contract.\\n    * This function calculates the distribution of funds based on attestation counts and shares,\\n    * deploys a splitter contract, and sends the funds to it for distribution.\\n    */\\n    function splitSubscriptions(bytes32 schemaUID) external {\\n\\n        // Send the funds to the splitter contract for distribution\\n        Address.sendValue(payable(schemas[schemaUID].splitterContract), schemas[schemaUID].subscriptionsPool);\\n        // Distribute funds to valid attestors\\n        Address.functionCall(schemas[schemaUID].splitterContract, abi.encodeWithSignature(\\\"distribute()\\\"));\\n\\n        schemas[schemaUID].totalRevenue += schemas[schemaUID].subscriptionsPool;\\n\\n        schemas[schemaUID].subscriptionsPool = 0;\\n\\n        SchemaRevenueUpdated(schemaUID, schemas[schemaUID].subscriptionsPool, schemas[schemaUID].totalRevenue);\\n    }\\n\\n\\n    function createSplitter(address[] memory admins, uint256[] memory shares)internal returns(address splitterInstance){\\n        // Deploy a splitter contract using thirdWeb factory and implementation with the calculated data\\n        bytes memory result = Address.functionCall(\\n            splitterFactory,\\n            abi.encodeWithSignature(\\n                \\\"createSplitter(address[],uint256[])\\\",\\n                admins,\\n                shares\\n            )\\n        );\\n\\n        splitterInstance = abi.decode(result, (address));\\n    }\\n\\n    /**\\n     * @notice Indicates whether the contract is designed to handle incoming payments.\\n     * @return True, indicating that the contract can accept payments.\\n     */\\n    function isPayable() public pure override returns (bool) {\\n        return true;\\n    }\\n\\n\\n    function hasAccess(address sender, bytes32 schemaUID) external view returns (bool) {\\n        return userSubscriptions[sender][schemaUID] > block.timestamp;\\n    }\\n\\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n        converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n        converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n\\n    /*\\n    * @dev Internal function to execute a mutation on a table.\\n    * @param {uint256} tableId - Table ID.\\n    * @param {string} statement - Mutation statement.\\n    */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        tablelandContract.mutate(address(this), tableId, statement);\\n    }\\n}\\n\",\"keccak256\":\"0x466cd1613f81de1a6ccda1d521aab6f55957b7fff6bf8d883debbafeffba6106\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x62278d00600055610160604052600e6101209081526d1cdd1c9a5b99c81a9cdbdb90d25160921b610140526001906200003990826200098e565b503480156200004757600080fd5b5060405162003895380380620038958339810160408190526200006a9162000a73565b6000608081905260a052600160c052826001600160a01b038116620000a25760405163120d8e6b60e21b815260040160405180910390fd5b6001600160a01b0390811660e05281811661010052600a80546001600160a01b031916918416919091179055620000d8620004d5565b600460006101000a8154816001600160a01b0302191690836001600160a01b031602179055506005620001406040518060800160405280605081526020016200380d60509139604080518082019091526005815264067726f75760dc1b602082015262000698565b815460018101835560009283526020909220909101906200016290826200098e565b506005620001a7604051806060016040528060368152602001620037d76036913960408051808201909152600781526631b932b0ba37b960c91b602082015262000698565b81546001810183556000928352602090922090910190620001c990826200098e565b506005620002136040518060600160405280603881526020016200385d6038913960408051808201909152600c81526b39bab139b1b934b83a34b7b760a11b602082015262000698565b815460018101835560009283526020909220909101906200023590826200098e565b5060056200027a6040518060800160405280604281526020016200379560429139604080518082019091526007815266726576656e756560c81b602082015262000698565b815460018101835560009283526020909220909101906200029c90826200098e565b50600480546040516361a23d0f60e01b81526001600160a01b03909116916361a23d0f91620002d19130916005910162000ac7565b6000604051808303816000875af1158015620002f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200031b919081019062000baf565b8051620003319160079160209091019062000882565b5060066200038460405180604001604052806005815260200164067726f75760dc1b81525060076000815481106200036d576200036d62000c78565b9060005260206000200154620006d260201b60201c565b81546001810183556000928352602090922090910190620003a690826200098e565b506006620003e46040518060400160405280600781526020016631b932b0ba37b960c91b81525060076001815481106200036d576200036d62000c78565b815460018101835560009283526020909220909101906200040690826200098e565b506006620004496040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b81525060076002815481106200036d576200036d62000c78565b815460018101835560009283526020909220909101906200046b90826200098e565b506006620004a960405180604001604052806007815260200166726576656e756560c81b81525060076003815481106200036d576200036d62000c78565b81546001810183556000928352602090922090910190620004cb90826200098e565b5050505062000d69565b600046600103620004f9575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a036200051b575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b1036200053e5750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba03620005615750731a22854c5b1642760a827f20137a67930ae108d290565b46608903620005835750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a03620005a657507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b46600503620005c8575073da8ea22d092307874f30a1f277d1388dca0ba97a90565b466101a403620005eb575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed036200060f575073033f69e8d119205089ab15d340f5b797732f646b90565b466201388103620006335750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b46610c4503620006565750730b9737ab4b3e5303cb67db031b509697e31c02d390565b46617a690362000679575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b60405163264e42cf60e01b815246600482015260240160405180910390fd5b606081620006a646620006ff565b84604051602001620006bb9392919062000cc0565b604051602081830303815290604052905092915050565b606082620006e046620006ff565b620006eb84620006ff565b604051602001620006bb9392919062000d26565b606060006200070e8362000798565b60010190506000816001600160401b03811115620007305762000730620008e9565b6040519080825280601f01601f1916602001820160405280156200075b576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200076557509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310620007e2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106200080f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200082e57662386f26fc10000830492506010015b6305f5e100831062000847576305f5e100830492506008015b61271083106200085c57612710830492506004015b606483106200086f576064830492506002015b600a83106200087c576001015b92915050565b828054828255906000526020600020908101928215620008c0579160200282015b82811115620008c0578251825591602001919060010190620008a3565b50620008ce929150620008d2565b5090565b5b80821115620008ce5760008155600101620008d3565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200091457607f821691505b6020821081036200093557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200098957600081815260208120601f850160051c81016020861015620009645750805b601f850160051c820191505b81811015620009855782815560010162000970565b5050505b505050565b81516001600160401b03811115620009aa57620009aa620008e9565b620009c281620009bb8454620008ff565b846200093b565b602080601f831160018114620009fa5760008415620009e15750858301515b600019600386901b1c1916600185901b17855562000985565b600085815260208120601f198616915b8281101562000a2b5788860151825594840194600190910190840162000a0a565b508582101562000a4a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038116811462000a7057600080fd5b50565b60008060006060848603121562000a8957600080fd5b835162000a968162000a5a565b602085015190935062000aa98162000a5a565b604085015190925062000abc8162000a5a565b809150509250925092565b60006040820160018060a01b0385168352602060408185015281855480845260608601915060059350606081851b8701016000888152848120815b8481101562000b9f57605f198a850301865282825462000b2281620008ff565b8087526001828116801562000b40576001811462000b5a5762000b87565b60ff198416898d01528215158d1b89018c01945062000b87565b8688528b8820885b8481101562000b7f5781548b82018f0152908301908d0162000b62565b8a018d019550505b50988a01989296505050919091019060010162000b02565b50919a9950505050505050505050565b6000602080838503121562000bc357600080fd5b82516001600160401b038082111562000bdb57600080fd5b818501915085601f83011262000bf057600080fd5b81518181111562000c055762000c05620008e9565b8060051b604051601f19603f8301168101818110858211171562000c2d5762000c2d620008e9565b60405291825284820192508381018501918883111562000c4c57600080fd5b938501935b8285101562000c6c5784518452938501939285019262000c51565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000815160005b8181101562000cb1576020818501810151868301520162000c95565b50600093019283525090919050565b6c021a922a0aa22902a20a126229609d1b8152600062000ce4600d83018662000c8e565b605f60f81b815262000cfa600182018662000c8e565b9050600560fb1b815262000d12600182018562000c8e565b602960f81b81526001019695505050505050565b600062000d34828662000c8e565b605f60f81b80825262000d4b600183018762000c8e565b908152905062000d5f600182018562000c8e565b9695505050505050565b60805160a05160c05160e051610100516129e762000dae6000396000610aaa01526000610f8d015260006105530152600061052a0152600061050101526129e76000f3fe6080604052600436106100e15760003560e01c806391db0b7e1161007f578063c6eb196b11610059578063c6eb196b14610261578063ce46e04614610281578063e49617e114610295578063e60c3505146102a857600080fd5b806391db0b7e1461020e5780639201de5514610221578063a2d338861461024157600080fd5b806371671bf2116100bb57806371671bf214610165578063773a6c3b146101855780637d294e62146101cb57806388e5b2d9146101fb57600080fd5b80630778f0ac146100ef57806354fd4d50146101025780635608d9e51461012d57600080fd5b366100ea57005b005b600080fd5b6100e86100fd366004611d28565b6102bb565b34801561010e57600080fd5b506101176104fa565b6040516101249190611d9a565b60405180910390f35b34801561013957600080fd5b50600a5461014d906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b34801561017157600080fd5b50610117610180366004611dad565b61059d565b34801561019157600080fd5b506101bd6101a0366004611ddb565b600360209081526000928352604080842090915290825290205481565b604051908152602001610124565b3480156101d757600080fd5b506101eb6101e6366004611ddb565b610649565b6040519015158152602001610124565b6101eb610209366004611e53565b610676565b6101eb61021c366004611e53565b610745565b34801561022d57600080fd5b5061011761023c366004611dad565b610804565b34801561024d57600080fd5b506100e861025c366004611dad565b6109bd565b34801561026d57600080fd5b506100e861027c366004611f01565b610a90565b34801561028d57600080fd5b5060016101eb565b6101eb6102a3366004611fd1565b610c61565b6101eb6102b6366004611fd1565b610c72565b600081116103105760405162461bcd60e51b815260206004820152601860248201527f6d696e2031206d6f6e746820737562736372697074696f6e000000000000000060448201526064015b60405180910390fd5b600082815260026020819052604090912001543490610330908390612023565b1461036f5760405162461bcd60e51b815260206004820152600f60248201526e496e636f72726563742076616c756560881b6044820152606401610307565b6000828152600260205260409020600501546001600160a01b03166103c45760405162461bcd60e51b815260206004820152600b60248201526a1b9bdb88195e1a5cdd195960aa1b6044820152606401610307565b33600090815260036020908152604080832085845290915281205481549091906103ef908490612023565b90508160000361043257610403428261203a565b9050610410843383610c86565b33600090815260036020908152604080832087845290915290208190556104aa565b4282111561047557610444818361203a565b336000818152600360209081526040808320898452909152902082905590925061047090859084610d61565b6104aa565b61047f428261203a565b905061048c843383610d61565b33600090815260036020908152604080832087845290915290208190555b600084815260026020526040812060030180543492906104cb90849061203a565b9091555050600084815260026020526040902060038101546004909101546104f4918691610e32565b50505050565b60606105257f0000000000000000000000000000000000000000000000000000000000000000610eef565b61054e7f0000000000000000000000000000000000000000000000000000000000000000610eef565b6105777f0000000000000000000000000000000000000000000000000000000000000000610eef565b6040516020016105899392919061204d565b604051602081830303815290604052905090565b600681815481106105ad57600080fd5b9060005260206000200160009150905080546105c8906120a7565b80601f01602080910402602001604051908101604052809291908181526020018280546105f4906120a7565b80156106415780601f1061061657610100808354040283529160200191610641565b820191906000526020600020905b81548152906001019060200180831161062457829003601f168201915b505050505081565b6001600160a01b038216600090815260036020908152604080832084845290915290205442105b92915050565b6000610680610f82565b838281146106a15760405163251f56a160e21b815260040160405180910390fd5b3460005b828110156107355760008686838181106106c1576106c16120e1565b905060200201359050828111156106eb5760405163044044a560e21b815260040160405180910390fd5b610718898984818110610700576107006120e1565b905060200281019061071291906120f7565b50600090565b61072957600094505050505061073d565b909103906001016106a5565b506001925050505b949350505050565b600061074f610f82565b838281146107705760405163251f56a160e21b815260040160405180910390fd5b3460005b82811015610735576000868683818110610790576107906120e1565b905060200201359050828111156107ba5760405163044044a560e21b815260040160405180910390fd5b6107e78989848181106107cf576107cf6120e1565b90506020028101906107e191906120f7565b82610fcd565b6107f857600094505050505061073d565b90910390600101610774565b6060600061081460206002612118565b60ff1667ffffffffffffffff81111561082f5761082f61213b565b6040519080825280601f01601f191660200182016040528015610859576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b6020811015610993578182518683602081106108a5576108a56120e1565b6108b19291901a612167565b815181106108c1576108c16120e1565b01602001516001600160f81b031916836108dc836002612023565b815181106108ec576108ec6120e1565b60200101906001600160f81b031916908160001a905350818251868360208110610918576109186120e1565b6109249291901a61217b565b81518110610934576109346120e1565b01602001516001600160f81b0319168361094f836002612023565b61095a90600161203a565b8151811061096a5761096a6120e1565b60200101906001600160f81b031916908160001a9053508061098b8161218f565b915050610887565b50816040516020016109a591906121a8565b60405160208183030381529060405292505050919050565b600081815260026020526040902060058101546003909101546109e9916001600160a01b03169061101e565b600081815260026020908152604091829020600501548251600481526024810190935290820180516001600160e01b031663e4fc6b6d60e01b179052610a3a916001600160a01b0390911690611137565b50600081815260026020526040812060038101546004909101805491929091610a6490849061203a565b909155505060008181526002602052604081206003810182905560040154610a8d918391610e32565b50565b6040516364ccc13760e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906364ccc13790610aec90600190899089908990899030908a90600401612278565b6020604051808303816000875af1158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f91906122d8565b90506000600260008381526020019081526020016000209050610bb58b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061118292505050565b6005820180546001600160a01b0319166001600160a01b03929092169190911790556002810187905560005b8a811015610c2d57610c1a8c8c83818110610bfe57610bfe6120e1565b9050602002016020810190610c1391906122f1565b83906111f0565b5080610c258161218f565b915050610be1565b50610c54828c8c8c8c8c8760050160009054906101000a90046001600160a01b0316611205565b5050505050505050505050565b6000610c6b610f82565b6000610670565b6000610c7c610f82565b6106708234610fcd565b610d5c6007600281548110610c9d57610c9d6120e1565b9060005260206000200154610d576040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506007600281548110610ce457610ce46120e1565b906000526020600020015460405180606001604052806029815260200161292d60299139610d19610d148a610804565b6112ec565b610d25610d148a611315565b610d31610d148a610eef565b604051602001610d439392919061230e565b60405160208183030381529060405261132b565b61136a565b505050565b610d5c6007600281548110610d7857610d786120e1565b9060005260206000200154610d576040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506007600281548110610dbf57610dbf6120e1565b9060005260206000200154610dd6610d1487610eef565b604051602001610de69190612340565b604051602081830303815290604052610e01610d1489611315565b610e0d610d148b610804565b604051602001610e1e92919061237b565b6040516020818303038152906040526113d3565b610d5c6007600381548110610e4957610e496120e1565b9060005260206000200154610d576040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506007600381548110610e9057610e906120e1565b9060005260206000200154610ea7610d1488610eef565b610eb3610d1488610eef565b604051602001610ec49291906123db565b604051602081830303815290604052610edf610d148a610804565b604051602001610e1e9190612441565b60606000610efc8361144e565b600101905060008167ffffffffffffffff811115610f1c57610f1c61213b565b6040519080825280601f01601f191660200182016040528015610f46576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610f5057509392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fcb57604051634ca8886760e01b815260040160405180910390fd5b565b600080610fe1610100850160e086016122f1565b602080860135600081815260029092526040909120919250906110049083611526565b61101357600092505050610670565b506001949350505050565b8047101561106e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610307565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146110bb576040519150601f19603f3d011682016040523d82523d6000602084013e6110c0565b606091505b5050905080610d5c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610307565b606061117b838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250611548565b9392505050565b600a5460405160009182916111da916001600160a01b0316906111ab9087908790602401612473565b60408051601f198184030181529190526020810180516001600160e01b0316637be12ff160e11b179052611137565b90508080602001905181019061073d91906124f7565b600061117b836001600160a01b038416611623565b600954620186a00361121957611219611672565b6112b86007600081548110611230576112306120e1565b9060005260206000200154610d5760405180604001604052806005815260200164067726f75760dc1b8152506007600081548110611270576112706120e1565b9060005260206000200154604051806060016040528060358152602001612956603591396112a0610d148e610804565b6112ac610d148a610eef565b610d31610d148a611315565b600980549060006112c88361218f565b91905055506112da8787878787611897565b6112e3876119b0565b50505050505050565b6060816040516020016112ff9190612514565b6040516020818303038152906040529050919050565b60606106706001600160a01b0383166014611a50565b606060006113398686611bec565b905080848460405160200161135093929190612542565b604051602081830303815290604052915050949350505050565b60048054604051631bbd786d60e11b81526001600160a01b039091169163377af0da9161139d91309187918791016125ce565b600060405180830381600087803b1580156113b757600080fd5b505af11580156113cb573d6000803e3d6000fd5b505050505050565b606060006113e18686611bec565b6040805160208101909152600081528451919250901561141e578360405160200161140c91906125fe565b60405160208183030381529060405290505b8185826040516020016114339392919061262d565b60405160208183030381529060405292505050949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061148d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106114b9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106114d757662386f26fc10000830492506010015b6305f5e10083106114ef576305f5e100830492506008015b612710831061150357612710830492506004015b60648310611515576064830492506002015b600a83106106705760010192915050565b6001600160a01b0381166000908152600183016020526040812054151561117b565b6060824710156115a95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610307565b600080866001600160a01b031685876040516115c59190612697565b60006040518083038185875af1925050503d8060008114611602576040519150601f19603f3d011682016040523d82523d6000602084013e611607565b606091505b509150915061161887838387611c2a565b979650505050505050565b600081815260018301602052604081205461166a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610670565b506000610670565b600480546040516361a23d0f60e01b81526001600160a01b03909116916361a23d0f916116a4913091600591016126a9565b6000604051808303816000875af11580156116c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116eb919081019061271f565b80516116ff91600791602090910190611cc8565b50600661174760405180604001604052806005815260200164067726f75760dc1b8152506007600081548110611737576117376120e1565b9060005260206000200154611bec565b815460018101835560009283526020909220909101906117679082612823565b5060066117a16040518060400160405280600781526020016631b932b0ba37b960c91b8152506007600181548110611737576117376120e1565b815460018101835560009283526020909220909101906117c19082612823565b5060066118006040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506007600281548110611737576117376120e1565b815460018101835560009283526020909220909101906118209082612823565b50600661185a60405180604001604052806007815260200166726576656e756560c81b8152506007600381548110611737576117376120e1565b8154600181018355600092835260209092209091019061187a9082612823565b506000600981905560088054916118908361218f565b9190505550565b60005b838110156113cb5761199e60076001815481106118b9576118b96120e1565b9060005260206000200154610d576040518060400160405280600781526020016631b932b0ba37b960c91b81525060076001815481106118fb576118fb6120e1565b90600052602060002001546040518060400160405280601b81526020017f736368656d615549442c2061747465737465722c207368617265730000000000815250611948610d148d610804565b61197a610d148d8d8b818110611960576119606120e1565b905060200201602081019061197591906122f1565b611315565b610d31610d148c8c8c818110611992576119926120e1565b90506020020135610eef565b806119a88161218f565b91505061189a565b6000611a4c60076003815481106119c9576119c96120e1565b9060005260206000200154610d576040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506007600381548110611a1057611a106120e1565b906000526020600020015460405180606001604052806027815260200161298b60279139611a40610d1489610804565b610d25610d1489610eef565b5050565b60606000611a5f836002612023565b611a6a90600261203a565b67ffffffffffffffff811115611a8257611a8261213b565b6040519080825280601f01601f191660200182016040528015611aac576020820181803683370190505b509050600360fc1b81600081518110611ac757611ac76120e1565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611af657611af66120e1565b60200101906001600160f81b031916908160001a9053506000611b1a846002612023565b611b2590600161203a565b90505b6001811115611b9d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b5957611b596120e1565b1a60f81b828281518110611b6f57611b6f6120e1565b60200101906001600160f81b031916908160001a90535060049490941c93611b96816128e3565b9050611b28565b50831561117b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610307565b606082611bf846610eef565b611c0184610eef565b604051602001611c13939291906128fa565b604051602081830303815290604052905092915050565b60608315611c99578251600003611c92576001600160a01b0385163b611c925760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610307565b508161073d565b61073d8383815115611cae5781518083602001fd5b8060405162461bcd60e51b81526004016103079190611d9a565b828054828255906000526020600020908101928215611d03579160200282015b82811115611d03578251825591602001919060010190611ce8565b50611d0f929150611d13565b5090565b5b80821115611d0f5760008155600101611d14565b60008060408385031215611d3b57600080fd5b50508035926020909101359150565b60005b83811015611d65578181015183820152602001611d4d565b50506000910152565b60008151808452611d86816020860160208601611d4a565b601f01601f19169290920160200192915050565b60208152600061117b6020830184611d6e565b600060208284031215611dbf57600080fd5b5035919050565b6001600160a01b0381168114610a8d57600080fd5b60008060408385031215611dee57600080fd5b8235611df981611dc6565b946020939093013593505050565b60008083601f840112611e1957600080fd5b50813567ffffffffffffffff811115611e3157600080fd5b6020830191508360208260051b8501011115611e4c57600080fd5b9250929050565b60008060008060408587031215611e6957600080fd5b843567ffffffffffffffff80821115611e8157600080fd5b611e8d88838901611e07565b90965094506020870135915080821115611ea657600080fd5b50611eb387828801611e07565b95989497509550505050565b60008083601f840112611ed157600080fd5b50813567ffffffffffffffff811115611ee957600080fd5b602083019150836020828501011115611e4c57600080fd5b600080600080600080600080600060a08a8c031215611f1f57600080fd5b893567ffffffffffffffff80821115611f3757600080fd5b611f438d838e01611e07565b909b50995060208c0135915080821115611f5c57600080fd5b611f688d838e01611e07565b909950975060408c0135965060608c0135915080821115611f8857600080fd5b611f948d838e01611ebf565b909650945060808c0135915080821115611fad57600080fd5b50611fba8c828d01611ebf565b915080935050809150509295985092959850929598565b600060208284031215611fe357600080fd5b813567ffffffffffffffff811115611ffa57600080fd5b8201610140818503121561117b57600080fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106705761067061200d565b808201808211156106705761067061200d565b6000845161205f818460208901611d4a565b8083019050601760f91b808252855161207f816001850160208a01611d4a565b6001920191820152835161209a816002840160208801611d4a565b0160020195945050505050565b600181811c908216806120bb57607f821691505b6020821081036120db57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000823561013e1983360301811261210e57600080fd5b9190910192915050565b60ff81811683821602908116908181146121345761213461200d565b5092915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261217657612176612151565b500490565b60008261218a5761218a612151565b500690565b6000600182016121a1576121a161200d565b5060010190565b61060f60f31b8152600082516121c5816002850160208701611d4a565b9190910160020192915050565b600081546121df816120a7565b8085526020600183811680156121fc576001811461221657612244565b60ff1985168884015283151560051b880183019550612244565b866000528260002060005b8581101561223c5781548a8201860152908301908401612221565b890184019650505b505050505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a08152600061228b60a083018a6121d2565b828103602084015261229e81898b61224f565b905082810360408401526122b381878961224f565b6001600160a01b03959095166060840152505090151560809091015295945050505050565b6000602082840312156122ea57600080fd5b5051919050565b60006020828403121561230357600080fd5b813561117b81611dc6565b60008451612320818460208901611d4a565b8083019050600b60fa1b808252855161207f816001850160208a01611d4a565b72737562736372697074696f6e456e647341743d60681b81526000825161236e816013850160208701611d4a565b9190910160130192915050565b6a737562736372696265723d60a81b8152600083516123a181600b850160208801611d4a565b6d616e6420736368656d615549443d60901b600b9184019182015283516123cf816019840160208801611d4a565b01601901949350505050565b6e746f74616c556e636c61696d65643d60881b81526000835161240581600f850160208801611d4a565b6f202c20746f74616c436c61696d65643d60801b600f91840191820152835161243581601f840160208801611d4a565b01601f01949350505050565b69736368656d615549443d60b01b81526000825161246681600a850160208701611d4a565b91909101600a0192915050565b604080825283519082018190526000906020906060840190828701845b828110156124b55781516001600160a01b031684529284019290840190600101612490565b5050508381038285015284518082528583019183019060005b818110156124ea578351835292840192918401916001016124ce565b5090979650505050505050565b60006020828403121561250957600080fd5b815161117b81611dc6565b6000602760f81b8083528351612531816001860160208801611d4a565b600193019283015250600201919050565b6b024a729a2a92a1024a72a27960a51b81526000845161256981600c850160208901611d4a565b600560fb1b600c91840191820152845161258a81600d840160208901611d4a565b67052ac8298aa8aa6560c31b600d929091019182015283516125b3816015840160208801611d4a565b602960f81b6015929091019182015260160195945050505050565b60018060a01b03841681528260208201526060604082015260006125f56060830184611d6e565b95945050505050565b660102ba422a922960cd1b815260008251612620816007850160208701611d4a565b9190910160070192915050565b6602aa82220aa22960cd1b81526000845161264f816007850160208901611d4a565b6401029a2aa160dd1b600791840191820152845161267481600c840160208901611d4a565b845191019061268a81600c840160208801611d4a565b01600c0195945050505050565b6000825161210e818460208701611d4a565b60006040820160018060a01b0385168352602060408185015281855480845260608601915060608160051b8701019350866000528260002060005b8281101561271157878603605f190184526126ff86836121d2565b955092840192600191820191016126e4565b509398975050505050505050565b6000602080838503121561273257600080fd5b825167ffffffffffffffff8082111561274a57600080fd5b818501915085601f83011261275e57600080fd5b8151818111156127705761277061213b565b8060051b604051601f19603f830116810181811085821117156127955761279561213b565b6040529182528482019250838101850191888311156127b357600080fd5b938501935b828510156127d1578451845293850193928501926127b8565b98975050505050505050565b601f821115610d5c57600081815260208120601f850160051c810160208610156128045750805b601f850160051c820191505b818110156113cb57828155600101612810565b815167ffffffffffffffff81111561283d5761283d61213b565b6128518161284b84546120a7565b846127dd565b602080601f831160018114612886576000841561286e5750858301515b600019600386901b1c1916600185901b1785556113cb565b600085815260208120601f198616915b828110156128b557888601518255948401946001909101908401612896565b50858210156128d35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000816128f2576128f261200d565b506000190190565b6000845161290c818460208901611d4a565b8083019050605f60f81b808252855161207f816001850160208a01611d4a56fe736368656d615549442c20737562736372696265722c20737562736372697074696f6e456e64734174736368656d615549442c206d6f6e74686c79537562736372697074696f6e50726963652c2073706c6974746572436f6e7472616374736368656d615549442c20746f74616c556e636c61696d65642c20746f74616c436c61696d6564a26469706673582212203085c03e5a14c881395c8070c57b9d6603192f6820a45eb8cf8caac2463665bb64736f6c63430008130033736368656d615549442074657874207072696d617279206b65792c20746f74616c556e636c61696d656420746578742c20746f74616c436c61696d65642074657874736368656d615549442074657874207072696d617279206b65792c20617474657374657220746578742c207368617265732074657874736368656d615549442074657874207072696d617279206b65792c206d6f6e74686c79537562736372697074696f6e507269636520746578742c2073706c6974746572436f6e74726163742074657874736368656d6155494420746578742c207375627363726962657220746578742c20737562736372697074696f6e456e647341742074657874",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c806391db0b7e1161007f578063c6eb196b11610059578063c6eb196b14610261578063ce46e04614610281578063e49617e114610295578063e60c3505146102a857600080fd5b806391db0b7e1461020e5780639201de5514610221578063a2d338861461024157600080fd5b806371671bf2116100bb57806371671bf214610165578063773a6c3b146101855780637d294e62146101cb57806388e5b2d9146101fb57600080fd5b80630778f0ac146100ef57806354fd4d50146101025780635608d9e51461012d57600080fd5b366100ea57005b005b600080fd5b6100e86100fd366004611d28565b6102bb565b34801561010e57600080fd5b506101176104fa565b6040516101249190611d9a565b60405180910390f35b34801561013957600080fd5b50600a5461014d906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b34801561017157600080fd5b50610117610180366004611dad565b61059d565b34801561019157600080fd5b506101bd6101a0366004611ddb565b600360209081526000928352604080842090915290825290205481565b604051908152602001610124565b3480156101d757600080fd5b506101eb6101e6366004611ddb565b610649565b6040519015158152602001610124565b6101eb610209366004611e53565b610676565b6101eb61021c366004611e53565b610745565b34801561022d57600080fd5b5061011761023c366004611dad565b610804565b34801561024d57600080fd5b506100e861025c366004611dad565b6109bd565b34801561026d57600080fd5b506100e861027c366004611f01565b610a90565b34801561028d57600080fd5b5060016101eb565b6101eb6102a3366004611fd1565b610c61565b6101eb6102b6366004611fd1565b610c72565b600081116103105760405162461bcd60e51b815260206004820152601860248201527f6d696e2031206d6f6e746820737562736372697074696f6e000000000000000060448201526064015b60405180910390fd5b600082815260026020819052604090912001543490610330908390612023565b1461036f5760405162461bcd60e51b815260206004820152600f60248201526e496e636f72726563742076616c756560881b6044820152606401610307565b6000828152600260205260409020600501546001600160a01b03166103c45760405162461bcd60e51b815260206004820152600b60248201526a1b9bdb88195e1a5cdd195960aa1b6044820152606401610307565b33600090815260036020908152604080832085845290915281205481549091906103ef908490612023565b90508160000361043257610403428261203a565b9050610410843383610c86565b33600090815260036020908152604080832087845290915290208190556104aa565b4282111561047557610444818361203a565b336000818152600360209081526040808320898452909152902082905590925061047090859084610d61565b6104aa565b61047f428261203a565b905061048c843383610d61565b33600090815260036020908152604080832087845290915290208190555b600084815260026020526040812060030180543492906104cb90849061203a565b9091555050600084815260026020526040902060038101546004909101546104f4918691610e32565b50505050565b60606105257f0000000000000000000000000000000000000000000000000000000000000000610eef565b61054e7f0000000000000000000000000000000000000000000000000000000000000000610eef565b6105777f0000000000000000000000000000000000000000000000000000000000000000610eef565b6040516020016105899392919061204d565b604051602081830303815290604052905090565b600681815481106105ad57600080fd5b9060005260206000200160009150905080546105c8906120a7565b80601f01602080910402602001604051908101604052809291908181526020018280546105f4906120a7565b80156106415780601f1061061657610100808354040283529160200191610641565b820191906000526020600020905b81548152906001019060200180831161062457829003601f168201915b505050505081565b6001600160a01b038216600090815260036020908152604080832084845290915290205442105b92915050565b6000610680610f82565b838281146106a15760405163251f56a160e21b815260040160405180910390fd5b3460005b828110156107355760008686838181106106c1576106c16120e1565b905060200201359050828111156106eb5760405163044044a560e21b815260040160405180910390fd5b610718898984818110610700576107006120e1565b905060200281019061071291906120f7565b50600090565b61072957600094505050505061073d565b909103906001016106a5565b506001925050505b949350505050565b600061074f610f82565b838281146107705760405163251f56a160e21b815260040160405180910390fd5b3460005b82811015610735576000868683818110610790576107906120e1565b905060200201359050828111156107ba5760405163044044a560e21b815260040160405180910390fd5b6107e78989848181106107cf576107cf6120e1565b90506020028101906107e191906120f7565b82610fcd565b6107f857600094505050505061073d565b90910390600101610774565b6060600061081460206002612118565b60ff1667ffffffffffffffff81111561082f5761082f61213b565b6040519080825280601f01601f191660200182016040528015610859576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b6020811015610993578182518683602081106108a5576108a56120e1565b6108b19291901a612167565b815181106108c1576108c16120e1565b01602001516001600160f81b031916836108dc836002612023565b815181106108ec576108ec6120e1565b60200101906001600160f81b031916908160001a905350818251868360208110610918576109186120e1565b6109249291901a61217b565b81518110610934576109346120e1565b01602001516001600160f81b0319168361094f836002612023565b61095a90600161203a565b8151811061096a5761096a6120e1565b60200101906001600160f81b031916908160001a9053508061098b8161218f565b915050610887565b50816040516020016109a591906121a8565b60405160208183030381529060405292505050919050565b600081815260026020526040902060058101546003909101546109e9916001600160a01b03169061101e565b600081815260026020908152604091829020600501548251600481526024810190935290820180516001600160e01b031663e4fc6b6d60e01b179052610a3a916001600160a01b0390911690611137565b50600081815260026020526040812060038101546004909101805491929091610a6490849061203a565b909155505060008181526002602052604081206003810182905560040154610a8d918391610e32565b50565b6040516364ccc13760e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906364ccc13790610aec90600190899089908990899030908a90600401612278565b6020604051808303816000875af1158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f91906122d8565b90506000600260008381526020019081526020016000209050610bb58b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061118292505050565b6005820180546001600160a01b0319166001600160a01b03929092169190911790556002810187905560005b8a811015610c2d57610c1a8c8c83818110610bfe57610bfe6120e1565b9050602002016020810190610c1391906122f1565b83906111f0565b5080610c258161218f565b915050610be1565b50610c54828c8c8c8c8c8760050160009054906101000a90046001600160a01b0316611205565b5050505050505050505050565b6000610c6b610f82565b6000610670565b6000610c7c610f82565b6106708234610fcd565b610d5c6007600281548110610c9d57610c9d6120e1565b9060005260206000200154610d576040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506007600281548110610ce457610ce46120e1565b906000526020600020015460405180606001604052806029815260200161292d60299139610d19610d148a610804565b6112ec565b610d25610d148a611315565b610d31610d148a610eef565b604051602001610d439392919061230e565b60405160208183030381529060405261132b565b61136a565b505050565b610d5c6007600281548110610d7857610d786120e1565b9060005260206000200154610d576040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506007600281548110610dbf57610dbf6120e1565b9060005260206000200154610dd6610d1487610eef565b604051602001610de69190612340565b604051602081830303815290604052610e01610d1489611315565b610e0d610d148b610804565b604051602001610e1e92919061237b565b6040516020818303038152906040526113d3565b610d5c6007600381548110610e4957610e496120e1565b9060005260206000200154610d576040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506007600381548110610e9057610e906120e1565b9060005260206000200154610ea7610d1488610eef565b610eb3610d1488610eef565b604051602001610ec49291906123db565b604051602081830303815290604052610edf610d148a610804565b604051602001610e1e9190612441565b60606000610efc8361144e565b600101905060008167ffffffffffffffff811115610f1c57610f1c61213b565b6040519080825280601f01601f191660200182016040528015610f46576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610f5057509392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fcb57604051634ca8886760e01b815260040160405180910390fd5b565b600080610fe1610100850160e086016122f1565b602080860135600081815260029092526040909120919250906110049083611526565b61101357600092505050610670565b506001949350505050565b8047101561106e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610307565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146110bb576040519150601f19603f3d011682016040523d82523d6000602084013e6110c0565b606091505b5050905080610d5c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610307565b606061117b838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250611548565b9392505050565b600a5460405160009182916111da916001600160a01b0316906111ab9087908790602401612473565b60408051601f198184030181529190526020810180516001600160e01b0316637be12ff160e11b179052611137565b90508080602001905181019061073d91906124f7565b600061117b836001600160a01b038416611623565b600954620186a00361121957611219611672565b6112b86007600081548110611230576112306120e1565b9060005260206000200154610d5760405180604001604052806005815260200164067726f75760dc1b8152506007600081548110611270576112706120e1565b9060005260206000200154604051806060016040528060358152602001612956603591396112a0610d148e610804565b6112ac610d148a610eef565b610d31610d148a611315565b600980549060006112c88361218f565b91905055506112da8787878787611897565b6112e3876119b0565b50505050505050565b6060816040516020016112ff9190612514565b6040516020818303038152906040529050919050565b60606106706001600160a01b0383166014611a50565b606060006113398686611bec565b905080848460405160200161135093929190612542565b604051602081830303815290604052915050949350505050565b60048054604051631bbd786d60e11b81526001600160a01b039091169163377af0da9161139d91309187918791016125ce565b600060405180830381600087803b1580156113b757600080fd5b505af11580156113cb573d6000803e3d6000fd5b505050505050565b606060006113e18686611bec565b6040805160208101909152600081528451919250901561141e578360405160200161140c91906125fe565b60405160208183030381529060405290505b8185826040516020016114339392919061262d565b60405160208183030381529060405292505050949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061148d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106114b9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106114d757662386f26fc10000830492506010015b6305f5e10083106114ef576305f5e100830492506008015b612710831061150357612710830492506004015b60648310611515576064830492506002015b600a83106106705760010192915050565b6001600160a01b0381166000908152600183016020526040812054151561117b565b6060824710156115a95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610307565b600080866001600160a01b031685876040516115c59190612697565b60006040518083038185875af1925050503d8060008114611602576040519150601f19603f3d011682016040523d82523d6000602084013e611607565b606091505b509150915061161887838387611c2a565b979650505050505050565b600081815260018301602052604081205461166a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610670565b506000610670565b600480546040516361a23d0f60e01b81526001600160a01b03909116916361a23d0f916116a4913091600591016126a9565b6000604051808303816000875af11580156116c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116eb919081019061271f565b80516116ff91600791602090910190611cc8565b50600661174760405180604001604052806005815260200164067726f75760dc1b8152506007600081548110611737576117376120e1565b9060005260206000200154611bec565b815460018101835560009283526020909220909101906117679082612823565b5060066117a16040518060400160405280600781526020016631b932b0ba37b960c91b8152506007600181548110611737576117376120e1565b815460018101835560009283526020909220909101906117c19082612823565b5060066118006040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506007600281548110611737576117376120e1565b815460018101835560009283526020909220909101906118209082612823565b50600661185a60405180604001604052806007815260200166726576656e756560c81b8152506007600381548110611737576117376120e1565b8154600181018355600092835260209092209091019061187a9082612823565b506000600981905560088054916118908361218f565b9190505550565b60005b838110156113cb5761199e60076001815481106118b9576118b96120e1565b9060005260206000200154610d576040518060400160405280600781526020016631b932b0ba37b960c91b81525060076001815481106118fb576118fb6120e1565b90600052602060002001546040518060400160405280601b81526020017f736368656d615549442c2061747465737465722c207368617265730000000000815250611948610d148d610804565b61197a610d148d8d8b818110611960576119606120e1565b905060200201602081019061197591906122f1565b611315565b610d31610d148c8c8c818110611992576119926120e1565b90506020020135610eef565b806119a88161218f565b91505061189a565b6000611a4c60076003815481106119c9576119c96120e1565b9060005260206000200154610d576040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506007600381548110611a1057611a106120e1565b906000526020600020015460405180606001604052806027815260200161298b60279139611a40610d1489610804565b610d25610d1489610eef565b5050565b60606000611a5f836002612023565b611a6a90600261203a565b67ffffffffffffffff811115611a8257611a8261213b565b6040519080825280601f01601f191660200182016040528015611aac576020820181803683370190505b509050600360fc1b81600081518110611ac757611ac76120e1565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611af657611af66120e1565b60200101906001600160f81b031916908160001a9053506000611b1a846002612023565b611b2590600161203a565b90505b6001811115611b9d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b5957611b596120e1565b1a60f81b828281518110611b6f57611b6f6120e1565b60200101906001600160f81b031916908160001a90535060049490941c93611b96816128e3565b9050611b28565b50831561117b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610307565b606082611bf846610eef565b611c0184610eef565b604051602001611c13939291906128fa565b604051602081830303815290604052905092915050565b60608315611c99578251600003611c92576001600160a01b0385163b611c925760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610307565b508161073d565b61073d8383815115611cae5781518083602001fd5b8060405162461bcd60e51b81526004016103079190611d9a565b828054828255906000526020600020908101928215611d03579160200282015b82811115611d03578251825591602001919060010190611ce8565b50611d0f929150611d13565b5090565b5b80821115611d0f5760008155600101611d14565b60008060408385031215611d3b57600080fd5b50508035926020909101359150565b60005b83811015611d65578181015183820152602001611d4d565b50506000910152565b60008151808452611d86816020860160208601611d4a565b601f01601f19169290920160200192915050565b60208152600061117b6020830184611d6e565b600060208284031215611dbf57600080fd5b5035919050565b6001600160a01b0381168114610a8d57600080fd5b60008060408385031215611dee57600080fd5b8235611df981611dc6565b946020939093013593505050565b60008083601f840112611e1957600080fd5b50813567ffffffffffffffff811115611e3157600080fd5b6020830191508360208260051b8501011115611e4c57600080fd5b9250929050565b60008060008060408587031215611e6957600080fd5b843567ffffffffffffffff80821115611e8157600080fd5b611e8d88838901611e07565b90965094506020870135915080821115611ea657600080fd5b50611eb387828801611e07565b95989497509550505050565b60008083601f840112611ed157600080fd5b50813567ffffffffffffffff811115611ee957600080fd5b602083019150836020828501011115611e4c57600080fd5b600080600080600080600080600060a08a8c031215611f1f57600080fd5b893567ffffffffffffffff80821115611f3757600080fd5b611f438d838e01611e07565b909b50995060208c0135915080821115611f5c57600080fd5b611f688d838e01611e07565b909950975060408c0135965060608c0135915080821115611f8857600080fd5b611f948d838e01611ebf565b909650945060808c0135915080821115611fad57600080fd5b50611fba8c828d01611ebf565b915080935050809150509295985092959850929598565b600060208284031215611fe357600080fd5b813567ffffffffffffffff811115611ffa57600080fd5b8201610140818503121561117b57600080fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106705761067061200d565b808201808211156106705761067061200d565b6000845161205f818460208901611d4a565b8083019050601760f91b808252855161207f816001850160208a01611d4a565b6001920191820152835161209a816002840160208801611d4a565b0160020195945050505050565b600181811c908216806120bb57607f821691505b6020821081036120db57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000823561013e1983360301811261210e57600080fd5b9190910192915050565b60ff81811683821602908116908181146121345761213461200d565b5092915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261217657612176612151565b500490565b60008261218a5761218a612151565b500690565b6000600182016121a1576121a161200d565b5060010190565b61060f60f31b8152600082516121c5816002850160208701611d4a565b9190910160020192915050565b600081546121df816120a7565b8085526020600183811680156121fc576001811461221657612244565b60ff1985168884015283151560051b880183019550612244565b866000528260002060005b8581101561223c5781548a8201860152908301908401612221565b890184019650505b505050505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a08152600061228b60a083018a6121d2565b828103602084015261229e81898b61224f565b905082810360408401526122b381878961224f565b6001600160a01b03959095166060840152505090151560809091015295945050505050565b6000602082840312156122ea57600080fd5b5051919050565b60006020828403121561230357600080fd5b813561117b81611dc6565b60008451612320818460208901611d4a565b8083019050600b60fa1b808252855161207f816001850160208a01611d4a565b72737562736372697074696f6e456e647341743d60681b81526000825161236e816013850160208701611d4a565b9190910160130192915050565b6a737562736372696265723d60a81b8152600083516123a181600b850160208801611d4a565b6d616e6420736368656d615549443d60901b600b9184019182015283516123cf816019840160208801611d4a565b01601901949350505050565b6e746f74616c556e636c61696d65643d60881b81526000835161240581600f850160208801611d4a565b6f202c20746f74616c436c61696d65643d60801b600f91840191820152835161243581601f840160208801611d4a565b01601f01949350505050565b69736368656d615549443d60b01b81526000825161246681600a850160208701611d4a565b91909101600a0192915050565b604080825283519082018190526000906020906060840190828701845b828110156124b55781516001600160a01b031684529284019290840190600101612490565b5050508381038285015284518082528583019183019060005b818110156124ea578351835292840192918401916001016124ce565b5090979650505050505050565b60006020828403121561250957600080fd5b815161117b81611dc6565b6000602760f81b8083528351612531816001860160208801611d4a565b600193019283015250600201919050565b6b024a729a2a92a1024a72a27960a51b81526000845161256981600c850160208901611d4a565b600560fb1b600c91840191820152845161258a81600d840160208901611d4a565b67052ac8298aa8aa6560c31b600d929091019182015283516125b3816015840160208801611d4a565b602960f81b6015929091019182015260160195945050505050565b60018060a01b03841681528260208201526060604082015260006125f56060830184611d6e565b95945050505050565b660102ba422a922960cd1b815260008251612620816007850160208701611d4a565b9190910160070192915050565b6602aa82220aa22960cd1b81526000845161264f816007850160208901611d4a565b6401029a2aa160dd1b600791840191820152845161267481600c840160208901611d4a565b845191019061268a81600c840160208801611d4a565b01600c0195945050505050565b6000825161210e818460208701611d4a565b60006040820160018060a01b0385168352602060408185015281855480845260608601915060608160051b8701019350866000528260002060005b8281101561271157878603605f190184526126ff86836121d2565b955092840192600191820191016126e4565b509398975050505050505050565b6000602080838503121561273257600080fd5b825167ffffffffffffffff8082111561274a57600080fd5b818501915085601f83011261275e57600080fd5b8151818111156127705761277061213b565b8060051b604051601f19603f830116810181811085821117156127955761279561213b565b6040529182528482019250838101850191888311156127b357600080fd5b938501935b828510156127d1578451845293850193928501926127b8565b98975050505050505050565b601f821115610d5c57600081815260208120601f850160051c810160208610156128045750805b601f850160051c820191505b818110156113cb57828155600101612810565b815167ffffffffffffffff81111561283d5761283d61213b565b6128518161284b84546120a7565b846127dd565b602080601f831160018114612886576000841561286e5750858301515b600019600386901b1c1916600185901b1785556113cb565b600085815260208120601f198616915b828110156128b557888601518255948401946001909101908401612896565b50858210156128d35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000816128f2576128f261200d565b506000190190565b6000845161290c818460208901611d4a565b8083019050605f60f81b808252855161207f816001850160208a01611d4a56fe736368656d615549442c20737562736372696265722c20737562736372697074696f6e456e64734174736368656d615549442c206d6f6e74686c79537562736372697074696f6e50726963652c2073706c6974746572436f6e7472616374736368656d615549442c20746f74616c556e636c61696d65642c20746f74616c436c61696d6564a26469706673582212203085c03e5a14c881395c8070c57b9d6603192f6820a45eb8cf8caac2463665bb64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "params": {
          "attestation": "The new attestation."
        },
        "returns": {
          "_0": "Whether the attestation is valid."
        }
      },
      "isPayable()": {
        "returns": {
          "_0": "True, indicating that the contract can accept payments."
        }
      },
      "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "params": {
          "attestations": "The new attestations.",
          "values": "Explicit ETH amounts which were sent with each attestation."
        },
        "returns": {
          "_0": "Whether all the attestations are valid."
        }
      },
      "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "params": {
          "attestations": "The existing attestations to be revoked.",
          "values": "Explicit ETH amounts which were sent with each revocation."
        },
        "returns": {
          "_0": "Whether the attestations can be revoked."
        }
      },
      "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "params": {
          "attestation": "The existing attestation to be revoked."
        },
        "returns": {
          "_0": "Whether the attestation can be revoked."
        }
      },
      "splitSubscriptions(bytes32)": {
        "details": "Distributes minting funds among attesters using a splitter contract. This function calculates the distribution of funds based on attestation counts and shares, deploys a splitter contract, and sends the funds to it for distribution."
      },
      "subscribe(bytes32,uint256)": {
        "details": "Mint tokens for encrypted attestations.",
        "params": {
          "schemaUID": "The UID of the schema for which tokens are being minted."
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "title": "ContentSubscriptionResolver",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "notice": "Processes an attestation and verifies whether it's valid."
      },
      "isPayable()": {
        "notice": "Indicates whether the contract is designed to handle incoming payments."
      },
      "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "notice": "Processes multiple attestations and verifies whether they are valid."
      },
      "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
      },
      "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "notice": "Processes an attestation revocation and verifies if it can be revoked."
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "A schema resolver subcription to content example",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9551,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "ONE_MONTH",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9566,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "schema",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 9571,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "schemas",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(SchemaInfo)9563_storage)"
      },
      {
        "astId": 9577,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "userSubscriptions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 9583,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "tablelandContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITablelandTables)4111"
      },
      {
        "astId": 9586,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 9589,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "tables",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 9592,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "tableIDs",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9594,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "tablesUpdates",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9596,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "tablesRowsCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 9622,
        "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
        "label": "splitterFactory",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITablelandTables)4111": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(SchemaInfo)9563_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ContentSubscriptionResolver.SchemaInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SchemaInfo)9563_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3666_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3665,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3351_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SchemaInfo)9563_storage": {
        "encoding": "inplace",
        "label": "struct ContentSubscriptionResolver.SchemaInfo",
        "members": [
          {
            "astId": 9554,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "contentCreators",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3666_storage"
          },
          {
            "astId": 9556,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "subscriptionPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9558,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "subscriptionsPool",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9560,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "totalRevenue",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9562,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "splitterContract",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Set)3351_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3346,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3350,
            "contract": "contracts/resolver/examples/ContentSubscriptionResolver.sol:ContentSubscriptionResolver",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}