{
  "address": "0x2d6F736382bb1272E2b289F260b7fBB7E96Aa624",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "AttestationInserted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "revoker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "revocationTime",
          "type": "uint256"
        }
      ],
      "name": "AttestationRevokedUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "revocable",
          "type": "bool"
        }
      ],
      "name": "RevocationInfoInserted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "revoker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "RevokedOffChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "Timestamped",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "bytesToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tablesUpdates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0x2d6F736382bb1272E2b289F260b7fBB7E96Aa624",
    "transactionIndex": 3,
    "gasUsed": "3382873",
    "logsBloom": "0x
    "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37",
    "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 40256789,
        "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
        "address": "0x2d6F736382bb1272E2b289F260b7fBB7E96Aa624",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40256789,
        "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d6f736382bb1272e2b289f260b7fbb7e96aa624",
          "0x0000000000000000000000000000000000000000000000000000000000001cfe"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40256789,
        "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000002d6f736382bb1272e2b289f260b7fbb7e96aa6240000000000000000000000000000000000000000000000000000000000001cfe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a8435245415445205441424c45206174746573746174696f6e5f3830303031287569642074657874207072696d617279206b65792c20736368656d6155494420746578742c206372656174696f6e54696d657374616d7020746578742c2065787069726174696f6e54696d6520746578742c2072656655494420746578742c20726563697069656e7420746578742c20617474657374657220746578742c2064617461207465787429000000000000000000000000000000000000000000000000",
        "logIndex": 16,
        "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40256789,
        "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d6f736382bb1272e2b289f260b7fbb7e96aa624",
          "0x0000000000000000000000000000000000000000000000000000000000001cff"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40256789,
        "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000002d6f736382bb1272e2b289f260b7fbb7e96aa6240000000000000000000000000000000000000000000000000000000000001cff00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000066435245415445205441424c45207265766f636174696f6e5f3830303031287569642074657874207072696d617279206b65792c207265766f636174696f6e54696d6520746578742c207265766f6b657220746578742c207265766f6361626c652074657874290000000000000000000000000000000000000000000000000000",
        "logIndex": 18,
        "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40256789,
        "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d6f736382bb1272e2b289f260b7fbb7e96aa624",
          "0x0000000000000000000000000000000000000000000000000000000000001d00"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40256789,
        "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000002d6f736382bb1272e2b289f260b7fbb7e96aa6240000000000000000000000000000000000000000000000000000000000001d0000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000043435245415445205441424c45206f6666436861696e5f74696d657374616d705f38303030312875696420746578742c2074696d657374616d70656441742074657874290000000000000000000000000000000000000000000000000000000000",
        "logIndex": 20,
        "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40256789,
        "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d6f736382bb1272e2b289f260b7fbb7e96aa624",
          "0x0000000000000000000000000000000000000000000000000000000000001d01"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40256789,
        "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000002d6f736382bb1272e2b289f260b7fbb7e96aa6240000000000000000000000000000000000000000000000000000000000001d010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004e435245415445205441424c45206f6666436861696e5f7265766f636174696f6e5f3830303031287265766f6b657220746578742c2075696420746578742c207265766f6b65644174207465787429000000000000000000000000000000000000",
        "logIndex": 22,
        "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40256789,
        "transactionHash": "0xe45ea6599ef4a90e7d988ceb341f2da81719b65635bba3f280faf9efb3652d7e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001fd944b50280f00000000000000000000000000000000000000000000000000297ffef94f98613000000000000000000000000000000000000000000003474077b8a1dc538e810000000000000000000000000000000000000000000000000027826aadff70523000000000000000000000000000000000000000000003474079b63627a3b6900",
        "logIndex": 23,
        "blockHash": "0x02bee9047879b985777ff7c5caee4f25fb5b9fe7b712c0d7ca71b2a7698f9d37"
      }
    ],
    "blockNumber": 40256789,
    "cumulativeGasUsed": "3666472",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d31e9c73c386cbc44453233e1ac13d42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"AttestationInserted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"revocationTime\",\"type\":\"uint256\"}],\"name\":\"AttestationRevokedUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"RevocationInfoInserted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RevokedOffChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Timestamped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"bytesToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tablesUpdates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TAS\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"The Tableland Attestation Service protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tablelandIndexers/TASIndexer.sol\":\"TASIndexer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Goerli.\\n    address internal constant GOERLI =\\n        0xDA8EA22d092307874f30A1F277D1388dca0BA97a;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Goerli.\\n    address internal constant ARBITRUM_GOERLI =\\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Hyperspace.\\n    address internal constant FILECOIN_HYPERSPACE =\\n        0x0B9737ab4B3e5303CB67dB031b509697e31c02d3;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (ITablelandTables) {\\n        if (block.chainid == 1) {\\n            return ITablelandTables(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return ITablelandTables(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return ITablelandTables(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return ITablelandTables(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return ITablelandTables(MATIC);\\n        } else if (block.chainid == 314) {\\n            return ITablelandTables(FILECOIN);\\n        } else if (block.chainid == 5) {\\n            return ITablelandTables(GOERLI);\\n        } else if (block.chainid == 420) {\\n            return ITablelandTables(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421613) {\\n            return ITablelandTables(ARBITRUM_GOERLI);\\n        } else if (block.chainid == 80001) {\\n            return ITablelandTables(MATICMUM);\\n        } else if (block.chainid == 3141) {\\n            return ITablelandTables(FILECOIN_HYPERSPACE);\\n        } else if (block.chainid == 31337) {\\n            return ITablelandTables(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x245cfb7b5e4d9e4874146dac869e7a28a5c9caf2251fd9eeb3518d3e57f0ca01\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidTAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\",\"keccak256\":\"0x0d95a05a089cc0388e57e1baf03fd4882de7c6424311d50831f627a03752092e\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\nstruct SchemaRegistrationInput {\\n    string schema;\\n    string schemaName;\\n    string schemaDescription;\\n    string[] categories;\\n    ISchemaResolver schemaResolver;\\n    bool revocable;\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ISchemaRegistry {\\n\\n\\n    function register(        \\n        SchemaRegistrationInput memory input\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\",\"keccak256\":\"0x8f45a9222dd958704d8bf3329dc639cb2275296a8b927d2b82c1fb2ff39f1bdf\",\"license\":\"MIT\"},\"contracts/ITAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title ITAS\\n/// @notice TAS - Tableland Attestation Service interface.\\ninterface ITAS {\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n}\",\"keccak256\":\"0xbc746a15c4be99028921309b514b0c28a6639d6e17bd241bc9135f94c0471198\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\",\"keccak256\":\"0x1dec285f07614107174b652568474a55b6a2692631888731967fb5cc53d4f417\",\"license\":\"MIT\"},\"contracts/tablelandIndexers/TASIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport { TablelandDeployments, ITablelandTables } from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport { SQLHelpers } from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IERC721Receiver } from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport {\\n    Attestation\\n} from \\\"../ITAS.sol\\\";\\n\\n/// @title TAS\\n/// @notice The Tableland Attestation Service protocol.\\ncontract TASIndexer is  IERC721Receiver, Ownable {\\n\\n    ITablelandTables private tablelandContract;\\n    \\n    string[] createTableStatements; \\n\\n    string[] public tables;\\n\\n    uint256[] tableIDs;\\n\\n    uint256 public tablesUpdates;\\n\\n    uint256 private tablesRowsCounter;\\n\\n    string private constant ATTESTATION_TABLE_PREFIX = \\\"attestation\\\";\\n\\n    string private constant ATTESTATION_SCHEMA = \\\"uid text primary key, schemaUID text, creationTimestamp text, expirationTime text, refUID text, recipient text, attester text, data text\\\";\\n\\n    string private constant REVOCATION_TABLE_PREFIX = \\\"revocation\\\";\\n\\n    string private constant REVOCATION_SCHEMA = \\\"uid text primary key, revocationTime text, revoker text, revocable text\\\";\\n\\n    string private constant TIMESTAMP_TABLE_PREFIX = \\\"offChain_timestamp\\\";\\n\\n    string private constant TIMESTAMP_SCHEMA = \\\"uid text, timestampedAt text\\\";\\n\\n    string private constant OFF_CHAIN_REVOCATIONS_TABLE_PREFIX = \\\"offChain_revocation\\\";\\n\\n    string private constant OFF_CHAIN_REVOCATIONS_SCHEMA = \\\"revoker text, uid text, revokedAt text\\\";\\n\\n\\n    constructor() {\\n        \\n        tablelandContract = TablelandDeployments.get();        \\n\\n        createTableStatements.push(SQLHelpers.toCreateFromSchema(\\n            ATTESTATION_SCHEMA,\\n            ATTESTATION_TABLE_PREFIX\\n        ));\\n\\n        createTableStatements.push(SQLHelpers.toCreateFromSchema(\\n            REVOCATION_SCHEMA,\\n            REVOCATION_TABLE_PREFIX\\n        ));\\n\\n        createTableStatements.push(SQLHelpers.toCreateFromSchema(\\n            TIMESTAMP_SCHEMA,\\n            TIMESTAMP_TABLE_PREFIX\\n        ));\\n\\n        createTableStatements.push(SQLHelpers.toCreateFromSchema(\\n            OFF_CHAIN_REVOCATIONS_SCHEMA,\\n            OFF_CHAIN_REVOCATIONS_TABLE_PREFIX\\n        ));\\n\\n        tableIDs = tablelandContract.create(address(this), createTableStatements);\\n\\n        tables.push(SQLHelpers.toNameFromId(ATTESTATION_TABLE_PREFIX, tableIDs[0]));\\n        tables.push(SQLHelpers.toNameFromId(REVOCATION_TABLE_PREFIX, tableIDs[1]));\\n        tables.push(SQLHelpers.toNameFromId(TIMESTAMP_TABLE_PREFIX, tableIDs[2]));\\n        tables.push(SQLHelpers.toNameFromId(OFF_CHAIN_REVOCATIONS_TABLE_PREFIX, tableIDs[3]));\\n    }\\n\\n    function AttestationInserted(\\n        Attestation memory attestation\\n    ) public onlyOwner {\\n        string memory data = bytesToString(attestation.data); \\n        require(strlen(data) <= 1024, \\\"Tableland limitation\\\");\\n        // Managing tableland rows limitation.\\n        if(tablesRowsCounter == 100000){\\n            RenewTables();\\n        }\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toInsert(\\n                ATTESTATION_TABLE_PREFIX,\\n                tableIDs[0],\\n                \\\"uid, schemaUID, creationTimestamp, expirationTime, refUID, recipient, attester, data\\\",\\n                string.concat(\\n                SQLHelpers.quote(bytes32ToString(attestation.uid)),\\n                \\\",\\\",\\n                SQLHelpers.quote(bytes32ToString(attestation.schema)),\\n                \\\",\\\",\\n                SQLHelpers.quote((Strings.toString(attestation.time))),\\n                \\\",\\\",\\n                SQLHelpers.quote((Strings.toString(attestation.expirationTime))),\\n                \\\",\\\",\\n                SQLHelpers.quote(bytes32ToString(attestation.refUID)),\\n                \\\",\\\",\\n                SQLHelpers.quote(Strings.toHexString(attestation.recipient)),\\n                \\\",\\\",\\n                SQLHelpers.quote(Strings.toHexString(attestation.attester)),\\n                \\\",\\\",\\n                SQLHelpers.quote(data)\\n                )\\n            )\\n        );\\n        tablesRowsCounter++;\\n        RevocationInfoInserted(attestation.uid, attestation.revocable);\\n    }\\n\\n    function RevocationInfoInserted(\\n        bytes32 uid,\\n        bool revocable\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toInsert(\\n                REVOCATION_TABLE_PREFIX,\\n                tableIDs[1],\\n                \\\"uid, revocationTime, revoker, revocable\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(uid)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(\\\"0\\\"),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(address(0))),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(revocable?\\\"true\\\":\\\"false\\\")\\n                )\\n            )\\n        );\\n    }\\n\\n\\n    function AttestationRevokedUpdate(\\n        bytes32 uid,\\n        address revoker,\\n        uint256 revocationTime\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toUpdate(\\n                REVOCATION_TABLE_PREFIX,\\n                tableIDs[1],\\n                string.concat(\\\"revoker=\\\",SQLHelpers.quote(Strings.toHexString(revoker)),\\\", revocationTime=\\\",SQLHelpers.quote(Strings.toString(revocationTime))),\\n                string.concat(\\\"uid=\\\",SQLHelpers.quote(bytes32ToString(uid)))\\n            )\\n        );\\n    }\\n\\n    function Timestamped(\\n        bytes32 uid,\\n        uint256 time\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toInsert(\\n                TIMESTAMP_TABLE_PREFIX,\\n                tableIDs[2],\\n                \\\"uid, timestampedAt\\\",\\n                string.concat(\\n                SQLHelpers.quote(bytes32ToString(uid)),\\n                \\\",\\\",\\n                SQLHelpers.quote(Strings.toString(time))\\n                )\\n            )\\n        );\\n    }\\n\\n    function RevokedOffChain(\\n        address revoker,\\n        bytes32 uid,\\n        uint256 time\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toInsert(\\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX,\\n                tableIDs[3],\\n                \\\"revoker, uid, revokedAt\\\",\\n                string.concat(\\n                SQLHelpers.quote(Strings.toHexString(revoker)),\\n                \\\",\\\",\\n                SQLHelpers.quote(bytes32ToString(uid)),\\n                \\\",\\\",\\n                SQLHelpers.quote(Strings.toString(time))\\n                )\\n            )\\n        );\\n    }\\n\\n    function RenewTables()internal{\\n\\n        tableIDs = tablelandContract.create(address(this), createTableStatements);\\n\\n        tables.push(SQLHelpers.toNameFromId(ATTESTATION_TABLE_PREFIX, tableIDs[0]));\\n\\n        tables.push(SQLHelpers.toNameFromId(REVOCATION_TABLE_PREFIX, tableIDs[1]));\\n\\n        tables.push(SQLHelpers.toNameFromId(TIMESTAMP_TABLE_PREFIX, tableIDs[2]));\\n\\n        tables.push(SQLHelpers.toNameFromId(OFF_CHAIN_REVOCATIONS_TABLE_PREFIX, tableIDs[3]));\\n\\n        tablesRowsCounter = 0; \\n\\n        tablesUpdates++;\\n    }\\n\\n    \\n\\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n        converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n        converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    function bytesToString(bytes memory data) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n        converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n        converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n\\n    /*\\n    * @dev Internal function to execute a mutation on a table.\\n    * @param {uint256} tableId - Table ID.\\n    * @param {string} statement - Mutation statement.\\n    */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        tablelandContract.mutate(address(this), tableId, statement);\\n    }\\n\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\",\"keccak256\":\"0x00d0b42a8b759f0a7bc2436c7e1224e886640c92b976be8411c5abc9c69194b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d336200047c565b62000027620004cc565b600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002620000956040518060c0016040528060888152602001620038416088913960408051808201909152600b81526a30ba3a32b9ba30ba34b7b760a91b60208201526200068f565b81546001810183556000928352602090922090910190620000b7908262000985565b506002620000ff604051806080016040528060478152602001620038c96047913960408051808201909152600a8152693932bb37b1b0ba34b7b760b11b60208201526200068f565b8154600181018355600092835260209092209091019062000121908262000985565b506002620001956040518060400160405280601c81526020017f75696420746578742c2074696d657374616d70656441742074657874000000008152506040518060400160405280601281526020017106f6666436861696e5f74696d657374616d760741b8152506200068f60201b60201c565b81546001810183556000928352602090922090910190620001b7908262000985565b506002620002086040518060600160405280602681526020016200381b6026913960408051808201909152601381527237b33321b430b4b72fb932bb37b1b0ba34b7b760691b60208201526200068f565b815460018101835560009283526020909220909101906200022a908262000985565b506001546040516361a23d0f60e01b81526001600160a01b03909116906361a23d0f906200026090309060029060040162000a51565b6000604051808303816000875af115801562000280573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002aa919081019062000b39565b8051620002c09160049160209091019062000879565b506003620003196040518060400160405280600b81526020016a30ba3a32b9ba30ba34b7b760a91b815250600460008154811062000302576200030262000c02565b9060005260206000200154620006c960201b60201c565b815460018101835560009283526020909220909101906200033b908262000985565b5060036200037c6040518060400160405280600a8152602001693932bb37b1b0ba34b7b760b11b815250600460018154811062000302576200030262000c02565b815460018101835560009283526020909220909101906200039e908262000985565b506003620003e76040518060400160405280601281526020017106f6666436861696e5f74696d657374616d760741b815250600460028154811062000302576200030262000c02565b8154600181018355600092835260209092209091019062000409908262000985565b506003620004536040518060400160405280601381526020017237b33321b430b4b72fb932bb37b1b0ba34b7b760691b815250600460038154811062000302576200030262000c02565b8154600181018355600092835260209092209091019062000475908262000985565b5062000cf3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600046600103620004f0575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a0362000512575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b103620005355750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba03620005585750731a22854c5b1642760a827f20137a67930ae108d290565b466089036200057a5750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a036200059d57507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b46600503620005bf575073da8ea22d092307874f30a1f277d1388dca0ba97a90565b466101a403620005e2575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed0362000606575073033f69e8d119205089ab15d340f5b797732f646b90565b4662013881036200062a5750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b46610c45036200064d5750730b9737ab4b3e5303cb67db031b509697e31c02d390565b46617a690362000670575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b60405163264e42cf60e01b815246600482015260240160405180910390fd5b6060816200069d46620006f6565b84604051602001620006b29392919062000c4a565b604051602081830303815290604052905092915050565b606082620006d746620006f6565b620006e284620006f6565b604051602001620006b29392919062000cb0565b6060600062000705836200078f565b60010190506000816001600160401b03811115620007275762000727620008e0565b6040519080825280601f01601f19166020018201604052801562000752576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200075c57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310620007d9577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831062000806576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200082557662386f26fc10000830492506010015b6305f5e10083106200083e576305f5e100830492506008015b61271083106200085357612710830492506004015b6064831062000866576064830492506002015b600a831062000873576001015b92915050565b828054828255906000526020600020908101928215620008b7579160200282015b82811115620008b75782518255916020019190600101906200089a565b50620008c5929150620008c9565b5090565b5b80821115620008c55760008155600101620008ca565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200090b57607f821691505b6020821081036200092c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200098057600081815260208120601f850160051c810160208610156200095b5750805b601f850160051c820191505b818110156200097c5782815560010162000967565b5050505b505050565b81516001600160401b03811115620009a157620009a1620008e0565b620009b981620009b28454620008f6565b8462000932565b602080601f831160018114620009f15760008415620009d85750858301515b600019600386901b1c1916600185901b1785556200097c565b600085815260208120601f198616915b8281101562000a225788860151825594840194600190910190840162000a01565b508582101562000a415787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006040820160018060a01b0385168352602060408185015281855480845260608601915060059350606081851b8701016000888152848120815b8481101562000b2957605f198a850301865282825462000aac81620008f6565b8087526001828116801562000aca576001811462000ae45762000b11565b60ff198416898d01528215158d1b89018c01945062000b11565b8688528b8820885b8481101562000b095781548b82018f0152908301908d0162000aec565b8a018d019550505b50988a01989296505050919091019060010162000a8c565b50919a9950505050505050505050565b6000602080838503121562000b4d57600080fd5b82516001600160401b038082111562000b6557600080fd5b818501915085601f83011262000b7a57600080fd5b81518181111562000b8f5762000b8f620008e0565b8060051b604051601f19603f8301168101818110858211171562000bb75762000bb7620008e0565b60405291825284820192508381018501918883111562000bd657600080fd5b938501935b8285101562000bf65784518452938501939285019262000bdb565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000815160005b8181101562000c3b576020818501810151868301520162000c1f565b50600093019283525090919050565b6c021a922a0aa22902a20a126229609d1b8152600062000c6e600d83018662000c18565b605f60f81b815262000c84600182018662000c18565b9050600560fb1b815262000c9c600182018562000c18565b602960f81b81526001019695505050505050565b600062000cbe828662000c18565b605f60f81b80825262000cd5600183018762000c18565b908152905062000ce9600182018562000c18565b9695505050505050565b612b188062000d036000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063a560756d11610066578063a560756d14610207578063ac2d13e71461021a578063d7d205451461022d578063f2fde38b1461024057600080fd5b80638da5cb5b146101b95780639201de55146101e157806395665235146101f457600080fd5b806371671bf2116100bd57806371671bf21461017c5780637a99dcd91461018f57806389cdc830146101a257600080fd5b8063150b7a02146100e457806339614e4f14610152578063715018a614610172575b600080fd5b61011c6100f2366004611a69565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b610165610160366004611c3a565b610253565b6040516101499190611ce5565b61017a610484565b005b61016561018a366004611cf8565b610498565b61017a61019d366004611d11565b610544565b6101ab60055481565b604051908152602001610149565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610149565b6101656101ef366004611cf8565b610655565b61017a610202366004611d44565b610851565b61017a610215366004611da1565b61093b565b61017a610228366004611e98565b610b45565b61017a61023b366004611ec4565b610cc8565b61017a61024e366004611ee6565b610da9565b60606000825160026102659190611f30565b67ffffffffffffffff81111561027d5761027d611b04565b6040519080825280601f01601f1916602001820160405280156102a7576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b845181101561045a5781825186838151811061030057610300611f47565b0160200151610312919060f81c611fa5565b8151811061032257610322611f47565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683610355836002611f30565b8151811061036557610365611f47565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508182518683815181106103a9576103a9611f47565b01602001516103bb919060f81c611fb9565b815181106103cb576103cb611f47565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016836103fe836002611f30565b610409906001611fcd565b8151811061041957610419611f47565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061045281611fe0565b9150506102e2565b508160405160200161046c9190612034565b60405160208183030381529060405292505050919050565b61048c610e60565b6104966000610ee1565b565b600381815481106104a857600080fd5b9060005260206000200160009150905080546104c390612079565b80601f01602080910402602001604051908101604052809291908181526020018280546104ef90612079565b801561053c5780601f106105115761010080835404028352916020019161053c565b820191906000526020600020905b81548152906001019060200180831161051f57829003601f168201915b505050505081565b61054c610e60565b610650600460038154811061056357610563611f47565b906000526020600020015461064b6040518060400160405280601381526020017f6f6666436861696e5f7265766f636174696f6e0000000000000000000000000081525060046003815481106105bb576105bb611f47565b90600052602060002001546040518060400160405280601781526020017f7265766f6b65722c207569642c207265766f6b6564417400000000000000000081525061060d6106088a610f56565b610f7f565b6106196106088a610655565b6106256106088a610fa8565b604051602001610637939291906120cc565b604051602081830303815290604052611066565b6110a5565b505050565b6060600061066560206002612142565b60ff1667ffffffffffffffff81111561068057610680611b04565b6040519080825280601f01601f1916602001820160405280156106aa576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b602081101561045a5781825186836020811061070357610703611f47565b61070f9291901a611fa5565b8151811061071f5761071f611f47565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683610752836002611f30565b8151811061076257610762611f47565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508182518683602081106107a6576107a6611f47565b6107b29291901a611fb9565b815181106107c2576107c2611f47565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016836107f5836002611f30565b610800906001611fcd565b8151811061081057610810611f47565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061084981611fe0565b9150506106e5565b610859610e60565b610650600460018154811061087057610870611f47565b906000526020600020015461064b6040518060400160405280600a81526020017f7265766f636174696f6e0000000000000000000000000000000000000000000081525060046001815481106108c8576108c8611f47565b90600052602060002001546108df61060888610f56565b6108eb61060888610fa8565b6040516020016108fc929190612165565b6040516020818303038152906040526109176106088a610655565b60405160200161092791906121e6565b604051602081830303815290604052611135565b610943610e60565b6000610953826101200151610253565b9050610400610961826111b0565b11156109ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5461626c656c616e64206c696d69746174696f6e00000000000000000000000060448201526064015b60405180910390fd5b600654620186a0036109e2576109e26113b7565b610b1960046000815481106109f9576109f9611f47565b906000526020600020015461064b6040518060400160405280600b81526020017f6174746573746174696f6e0000000000000000000000000000000000000000008152506004600081548110610a5157610a51611f47565b9060005260206000200154604051806080016040528060548152602001612a6860549139610a856106088960000151610655565b610a956106088a60200151610655565b610aaf6106088b6040015167ffffffffffffffff16610fa8565b610ac96106088c6060015167ffffffffffffffff16610fa8565b610ad96106088d60a00151610655565b610ae96106088e60c00151610f56565b610af96106088f60e00151610f56565b610b028e610f7f565b60405160200161063798979695949392919061222b565b60068054906000610b2983611fe0565b9190505550610b418260000151836101000151610b45565b5050565b610b4d610e60565b610b416004600181548110610b6457610b64611f47565b906000526020600020015461064b6040518060400160405280600a81526020017f7265766f636174696f6e000000000000000000000000000000000000000000008152506004600181548110610bbc57610bbc611f47565b9060005260206000200154604051806060016040528060278152602001612abc60279139610bec61060889610655565b610c2a6040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610f7f565b610c376106086000610f56565b610cb58a610c7a576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610f7f565b6040518060400160405280600481526020017f7472756500000000000000000000000000000000000000000000000000000000815250610f7f565b604051602001610637949392919061237b565b610cd0610e60565b610b416004600281548110610ce757610ce7611f47565b906000526020600020015461064b6040518060400160405280601281526020017f6f6666436861696e5f74696d657374616d7000000000000000000000000000008152506004600281548110610d3f57610d3f611f47565b90600052602060002001546040518060400160405280601281526020017f7569642c2074696d657374616d70656441740000000000000000000000000000815250610d8c61060889610655565b610d9861060889610fa8565b60405160200161063792919061240f565b610db1610e60565b73ffffffffffffffffffffffffffffffffffffffff8116610e54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109c5565b610e5d81610ee1565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109c5565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060610f7973ffffffffffffffffffffffffffffffffffffffff83166014611676565b92915050565b606081604051602001610f929190612467565b6040516020818303038152906040529050919050565b60606000610fb5836118c0565b600101905060008167ffffffffffffffff811115610fd557610fd5611b04565b6040519080825280601f01601f191660200182016040528015610fff576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461100957509392505050565b6060600061107486866119a2565b905080848460405160200161108b939291906124b1565b604051602081830303815290604052915050949350505050565b6001546040517f377af0da00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063377af0da906110ff9030908690869060040161259b565b600060405180830381600087803b15801561111957600080fd5b505af115801561112d573d6000803e3d6000fd5b505050505050565b6060600061114386866119a2565b60408051602081019091526000815284519192509015611180578360405160200161116e91906125d9565b60405160208183030381529060405290505b8185826040516020016111959392919061261e565b60405160208183030381529060405292505050949350505050565b8051600090819081905b808210156113ae5760008583815181106111d6576111d6611f47565b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f800000000000000000000000000000000000000000000000000000000000000081101561123957611232600184611fcd565b925061139b565b7fe0000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008216101561128e57611232600284611fcd565b7ff0000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156112e357611232600384611fcd565b7ff8000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008216101561133857611232600484611fcd565b7ffc000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008216101561138d57611232600584611fcd565b611398600684611fcd565b92505b50826113a681611fe0565b9350506111ba565b50909392505050565b6001546040517f61a23d0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906361a23d0f906114109030906002906004016126b6565b6000604051808303816000875af115801561142f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261147591908101906127de565b8051611489916004916020909101906119e0565b5060036114e96040518060400160405280600b81526020017f6174746573746174696f6e00000000000000000000000000000000000000000081525060046000815481106114d9576114d9611f47565b90600052602060002001546119a2565b8154600181018355600092835260209092209091019061150990826128ca565b5060036115596040518060400160405280600a81526020017f7265766f636174696f6e0000000000000000000000000000000000000000000081525060046001815481106114d9576114d9611f47565b8154600181018355600092835260209092209091019061157990826128ca565b5060036115c96040518060400160405280601281526020017f6f6666436861696e5f74696d657374616d70000000000000000000000000000081525060046002815481106114d9576114d9611f47565b815460018101835560009283526020909220909101906115e990826128ca565b5060036116396040518060400160405280601381526020017f6f6666436861696e5f7265766f636174696f6e0000000000000000000000000081525060046003815481106114d9576114d9611f47565b8154600181018355600092835260209092209091019061165990826128ca565b5060006006819055600580549161166f83611fe0565b9190505550565b60606000611685836002611f30565b611690906002611fcd565b67ffffffffffffffff8111156116a8576116a8611b04565b6040519080825280601f01601f1916602001820160405280156116d2576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061170957611709611f47565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061176c5761176c611f47565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006117a8846002611f30565b6117b3906001611fcd565b90505b6001811115611850577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106117f4576117f4611f47565b1a60f81b82828151811061180a5761180a611f47565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611849816129e4565b90506117b6565b5083156118b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109c5565b9392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611909577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611935576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061195357662386f26fc10000830492506010015b6305f5e100831061196b576305f5e100830492506008015b612710831061197f57612710830492506004015b60648310611991576064830492506002015b600a8310610f795760010192915050565b6060826119ae46610fa8565b6119b784610fa8565b6040516020016119c993929190612a19565b604051602081830303815290604052905092915050565b828054828255906000526020600020908101928215611a1b579160200282015b82811115611a1b578251825591602001919060010190611a00565b50611a27929150611a2b565b5090565b5b80821115611a275760008155600101611a2c565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a6457600080fd5b919050565b600080600080600060808688031215611a8157600080fd5b611a8a86611a40565b9450611a9860208701611a40565b935060408601359250606086013567ffffffffffffffff80821115611abc57600080fd5b818801915088601f830112611ad057600080fd5b813581811115611adf57600080fd5b896020828501011115611af157600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715611b5757611b57611b04565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611ba457611ba4611b04565b604052919050565b600082601f830112611bbd57600080fd5b813567ffffffffffffffff811115611bd757611bd7611b04565b611c0860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611b5d565b818152846020838601011115611c1d57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611c4c57600080fd5b813567ffffffffffffffff811115611c6357600080fd5b611c6f84828501611bac565b949350505050565b60005b83811015611c92578181015183820152602001611c7a565b50506000910152565b60008151808452611cb3816020860160208601611c77565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006118b96020830184611c9b565b600060208284031215611d0a57600080fd5b5035919050565b600080600060608486031215611d2657600080fd5b611d2f84611a40565b95602085013595506040909401359392505050565b600080600060608486031215611d5957600080fd5b83359250611d6960208501611a40565b9150604084013590509250925092565b803567ffffffffffffffff81168114611a6457600080fd5b80358015158114611a6457600080fd5b600060208284031215611db357600080fd5b813567ffffffffffffffff80821115611dcb57600080fd5b908301906101408286031215611de057600080fd5b611de8611b33565b8235815260208301356020820152611e0260408401611d79565b6040820152611e1360608401611d79565b6060820152611e2460808401611d79565b608082015260a083013560a0820152611e3f60c08401611a40565b60c0820152611e5060e08401611a40565b60e0820152610100611e63818501611d91565b908201526101208381013583811115611e7b57600080fd5b611e8788828701611bac565b918301919091525095945050505050565b60008060408385031215611eab57600080fd5b82359150611ebb60208401611d91565b90509250929050565b60008060408385031215611ed757600080fd5b50508035926020909101359150565b600060208284031215611ef857600080fd5b6118b982611a40565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610f7957610f79611f01565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611fb457611fb4611f76565b500490565b600082611fc857611fc8611f76565b500690565b80820180821115610f7957610f79611f01565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361201157612011611f01565b5060010190565b6000815161202a818560208601611c77565b9290920192915050565b7f307800000000000000000000000000000000000000000000000000000000000081526000825161206c816002850160208701611c77565b9190910160020192915050565b600181811c9082168061208d57607f821691505b6020821081036120c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600084516120de818460208901611c77565b80830190507f2c00000000000000000000000000000000000000000000000000000000000000808252855161211a816001850160208a01611c77565b60019201918201528351612135816002840160208801611c77565b0160020195945050505050565b60ff818116838216029081169081811461215e5761215e611f01565b5092915050565b7f7265766f6b65723d00000000000000000000000000000000000000000000000081526000835161219d816008850160208801611c77565b7f2c207265766f636174696f6e54696d653d00000000000000000000000000000060089184019182015283516121da816019840160208801611c77565b01601901949350505050565b7f7569643d0000000000000000000000000000000000000000000000000000000081526000825161221e816004850160208701611c77565b9190910160040192915050565b6000895161223d818460208e01611c77565b80830190507f2c000000000000000000000000000000000000000000000000000000000000008082528a51612279816001850160208f01611c77565b600192019182018190528951612296816002850160208e01611c77565b6002920191820181905288516122b3816003850160208d01611c77565b600392019182015286516122ce816004840160208b01611c77565b016122fb600482017f2c000000000000000000000000000000000000000000000000000000000000009052565b6123086005820187612018565b7f2c000000000000000000000000000000000000000000000000000000000000008152905061233a6001820186612018565b7f2c000000000000000000000000000000000000000000000000000000000000008152905061236c6001820185612018565b9b9a5050505050505050505050565b6000855161238d818460208a01611c77565b80830190507f2c0000000000000000000000000000000000000000000000000000000000000080825286516123c9816001850160208b01611c77565b6001920191820181905285516123e6816002850160208a01611c77565b60029201918201528351612401816003840160208801611c77565b016003019695505050505050565b60008351612421818460208801611c77565b7f2c00000000000000000000000000000000000000000000000000000000000000908301908152835161245b816001840160208801611c77565b01600101949350505050565b60007f270000000000000000000000000000000000000000000000000000000000000080835283516124a0816001860160208801611c77565b600193019283015250600201919050565b7f494e5345525420494e544f2000000000000000000000000000000000000000008152600084516124e981600c850160208901611c77565b7f2800000000000000000000000000000000000000000000000000000000000000600c91840191820152845161252681600d840160208901611c77565b7f2956414c55455328000000000000000000000000000000000000000000000000600d92909101918201528351612564816015840160208801611c77565b7f29000000000000000000000000000000000000000000000000000000000000006015929091019182015260160195945050505050565b73ffffffffffffffffffffffffffffffffffffffff841681528260208201526060604082015260006125d06060830184611c9b565b95945050505050565b7f2057484552452000000000000000000000000000000000000000000000000000815260008251612611816007850160208701611c77565b9190910160070192915050565b7f5550444154452000000000000000000000000000000000000000000000000000815260008451612656816007850160208901611c77565b7f2053455420000000000000000000000000000000000000000000000000000000600791840191820152845161269381600c840160208901611c77565b84519101906126a981600c840160208801611c77565b01600c0195945050505050565b60006040820173ffffffffffffffffffffffffffffffffffffffff85168352602060408185015281855480845260608601915060059350606081851b8701016000888152848120815b848110156127ce577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a850301865282825461273a81612079565b80875260018281168015612755576001811461278c576127b7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168c8a01528b8315158e1b8a010194506127b7565b8688528b8820885b848110156127af5781548b82018f0152908301908d01612794565b8a018d019550505b50988a0198929650505091909101906001016126ff565b50919a9950505050505050505050565b600060208083850312156127f157600080fd5b825167ffffffffffffffff8082111561280957600080fd5b818501915085601f83011261281d57600080fd5b81518181111561282f5761282f611b04565b8060051b9150612840848301611b5d565b818152918301840191848101908884111561285a57600080fd5b938501935b838510156128785784518252938501939085019061285f565b98975050505050505050565b601f82111561065057600081815260208120601f850160051c810160208610156128ab5750805b601f850160051c820191505b8181101561112d578281556001016128b7565b815167ffffffffffffffff8111156128e4576128e4611b04565b6128f8816128f28454612079565b84612884565b602080601f83116001811461294b57600084156129155750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561112d565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561299857888601518255948401946001909101908401612979565b50858210156129d457878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000816129f3576129f3611f01565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008451612a2b818460208901611c77565b80830190507f5f00000000000000000000000000000000000000000000000000000000000000808252855161211a816001850160208a01611c7756fe7569642c20736368656d615549442c206372656174696f6e54696d657374616d702c2065787069726174696f6e54696d652c207265665549442c20726563697069656e742c2061747465737465722c20646174617569642c207265766f636174696f6e54696d652c207265766f6b65722c207265766f6361626c65a2646970667358221220de3be17e2e9ceae8cabdb5a9eaad7b2f161f0e3165fd00901faa4d8e2d3d2fb464736f6c634300081300337265766f6b657220746578742c2075696420746578742c207265766f6b6564417420746578747569642074657874207072696d617279206b65792c20736368656d6155494420746578742c206372656174696f6e54696d657374616d7020746578742c2065787069726174696f6e54696d6520746578742c2072656655494420746578742c20726563697069656e7420746578742c20617474657374657220746578742c206461746120746578747569642074657874207072696d617279206b65792c207265766f636174696f6e54696d6520746578742c207265766f6b657220746578742c207265766f6361626c652074657874",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "TAS",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "notice": "The Tableland Attestation Service protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11559,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "tablelandContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITablelandTables)4963"
      },
      {
        "astId": 11562,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 11565,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "tables",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 11568,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "tableIDs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11570,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "tablesUpdates",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11572,
        "contract": "contracts/tablelandIndexers/TASIndexer.sol:TASIndexer",
        "label": "tablesRowsCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ITablelandTables)4963": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}