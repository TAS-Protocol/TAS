{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@tableland/evm/contracts/interfaces/ITablelandTables.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\nimport {TablelandPolicy} from \"../TablelandPolicy.sol\";\n\n/**\n * @dev Interface of a TablelandTables compliant contract.\n */\ninterface ITablelandTables {\n    /**\n     * The caller is not authorized.\n     */\n    error Unauthorized();\n\n    /**\n     * RunSQL was called with a query length greater than maximum allowed.\n     */\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\n\n    /**\n     * @dev Emitted when `owner` creates a new table.\n     *\n     * owner - the to-be owner of the table\n     * tableId - the table id of the new table\n     * statement - the SQL statement used to create the table\n     */\n    event CreateTable(address owner, uint256 tableId, string statement);\n\n    /**\n     * @dev Emitted when a table is transferred from `from` to `to`.\n     *\n     * Not emmitted when a table is created.\n     * Also emitted after a table has been burned.\n     *\n     * from - the address that transfered the table\n     * to - the address that received the table\n     * tableId - the table id that was transferred\n     */\n    event TransferTable(address from, address to, uint256 tableId);\n\n    /**\n     * @dev Emitted when `caller` runs a SQL statement.\n     *\n     * caller - the address that is running the SQL statement\n     * isOwner - whether or not the caller is the table owner\n     * tableId - the id of the target table\n     * statement - the SQL statement to run\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\n     */\n    event RunSQL(\n        address caller,\n        bool isOwner,\n        uint256 tableId,\n        string statement,\n        TablelandPolicy policy\n    );\n\n    /**\n     * @dev Emitted when a table's controller is set.\n     *\n     * tableId - the id of the target table\n     * controller - the address of the controller (EOA or contract)\n     */\n    event SetController(uint256 tableId, address controller);\n\n    /**\n     * @dev Struct containing parameters needed to run a mutating sql statement\n     *\n     * tableId - the id of the target table\n     * statement - the SQL statement to run\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n     *\n     */\n    struct Statement {\n        uint256 tableId;\n        string statement;\n    }\n\n    /**\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\n     *\n     * owner - the to-be owner of the new table\n     * statement - the SQL statement used to create the table\n     *           - the statement type must be CREATE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     */\n    function create(\n        address owner,\n        string memory statement\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\n     *\n     * owner - the to-be owner of the new table\n     * statements - the SQL statements used to create the tables\n     *            - each statement type must be CREATE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     */\n    function create(\n        address owner,\n        string[] calldata statements\n    ) external payable returns (uint256[] memory);\n\n    /**\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\n     *\n     * caller - the address that is running the SQL statement\n     * tableId - the id of the target table\n     * statement - the SQL statement to run\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller`\n     * - `tableId` must exist and be the table being mutated\n     * - `caller` must be authorized by the table controller\n     * - `statement` must be less than or equal to 35000 bytes\n     */\n    function mutate(\n        address caller,\n        uint256 tableId,\n        string calldata statement\n    ) external payable;\n\n    /**\n     * @dev Runs an array of mutating SQL statements for `caller`\n     *\n     * caller - the address that is running the SQL statement\n     * statements - an array of structs containing the id of the target table and coresponding statement\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller`\n     * - `tableId` must be the table being muated in each struct's statement\n     * - `caller` must be authorized by the table controller if the statement is mutating\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\n     */\n    function mutate(\n        address caller,\n        ITablelandTables.Statement[] calldata statements\n    ) external payable;\n\n    /**\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\n     *\n     * When a table is created, it's controller is set to the zero address, which means that the\n     * contract will not enforce write access control. In this situation, validators will not accept\n     * transactions from non-owners unless explicitly granted access with \"GRANT\" SQL statements.\n     *\n     * When a controller address is set for a table, validators assume write access control is\n     * handled at the contract level, and will accept all transactions.\n     *\n     * You can unset a controller address for a table by setting it back to the zero address.\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\n     *\n     * caller - the address that is setting the controller\n     * tableId - the id of the target table\n     * controller - the address of the controller (EOA or contract)\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller` and owner of `tableId`\n     * - `tableId` must exist\n     * - `tableId` controller must not be locked\n     */\n    function setController(\n        address caller,\n        uint256 tableId,\n        address controller\n    ) external;\n\n    /**\n     * @dev Returns the controller for a table.\n     *\n     * tableId - the id of the target table\n     */\n    function getController(uint256 tableId) external returns (address);\n\n    /**\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\n     *\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\n     *\n     * caller - the address that is locking the controller\n     * tableId - the id of the target table\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller` and owner of `tableId`\n     * - `tableId` must exist\n     * - `tableId` controller must not be locked\n     */\n    function lockController(address caller, uint256 tableId) external;\n\n    /**\n     * @dev Sets the contract base URI.\n     *\n     * baseURI - the new base URI\n     *\n     * Requirements:\n     *\n     * - `msg.sender` must be contract owner\n     */\n    function setBaseURI(string memory baseURI) external;\n\n    /**\n     * @dev Pauses the contract.\n     *\n     * Requirements:\n     *\n     * - `msg.sender` must be contract owner\n     * - contract must be unpaused\n     */\n    function pause() external;\n\n    /**\n     * @dev Unpauses the contract.\n     *\n     * Requirements:\n     *\n     * - `msg.sender` must be contract owner\n     * - contract must be paused\n     */\n    function unpause() external;\n}\n"
    },
    "@tableland/evm/contracts/TablelandPolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\n/**\n * @dev Object defining how a table can be accessed.\n */\nstruct TablelandPolicy {\n    // Whether or not the table should allow SQL INSERT statements.\n    bool allowInsert;\n    // Whether or not the table should allow SQL UPDATE statements.\n    bool allowUpdate;\n    // Whether or not the table should allow SQL DELETE statements.\n    bool allowDelete;\n    // A conditional clause used with SQL UPDATE and DELETE statements.\n    // For example, a value of \"foo > 0\" will concatenate all SQL UPDATE\n    // and/or DELETE statements with \"WHERE foo > 0\".\n    // This can be useful for limiting how a table can be modified.\n    // Use {Policies-joinClauses} to include more than one condition.\n    string whereClause;\n    // A conditional clause used with SQL INSERT statements.\n    // For example, a value of \"foo > 0\" will concatenate all SQL INSERT\n    // statements with a check on the incoming data, i.e., \"CHECK (foo > 0)\".\n    // This can be useful for limiting how table data ban be added.\n    // Use {Policies-joinClauses} to include more than one condition.\n    string withCheck;\n    // A list of SQL column names that can be updated.\n    string[] updatableColumns;\n}\n"
    },
    "@tableland/evm/contracts/utils/SQLHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @dev Library of helpers for generating SQL statements from common parameters.\n */\nlibrary SQLHelpers {\n    /**\n     * @dev Generates a properly formatted table name from a prefix and table id.\n     *\n     * prefix - the user generated table prefix as a string\n     * tableId - the Tableland generated tableId as a uint256\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toNameFromId(\n        string memory prefix,\n        uint256 tableId\n    ) internal view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    prefix,\n                    \"_\",\n                    Strings.toString(block.chainid),\n                    \"_\",\n                    Strings.toString(tableId)\n                )\n            );\n    }\n\n    /**\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\n     *\n     * schema - a comma seperated string indicating the desired prefix. Example: \"int id, text name\"\n     * prefix - the user generated table prefix as a string\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toCreateFromSchema(\n        string memory schema,\n        string memory prefix\n    ) internal view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"CREATE TABLE \",\n                    prefix,\n                    \"_\",\n                    Strings.toString(block.chainid),\n                    \"(\",\n                    schema,\n                    \")\"\n                )\n            );\n    }\n\n    /**\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\n     *\n     * prefix - the user generated table prefix as a string.\n     * tableId - the Tableland generated tableId as a uint256.\n     * columns - a string encoded ordered list of columns that will be updated. Example: \"name, age\".\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \"'jerry', 24\". Values order must match column order.\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toInsert(\n        string memory prefix,\n        uint256 tableId,\n        string memory columns,\n        string memory values\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        return\n            string(\n                abi.encodePacked(\n                    \"INSERT INTO \",\n                    name,\n                    \"(\",\n                    columns,\n                    \")VALUES(\",\n                    values,\n                    \")\"\n                )\n            );\n    }\n\n    /**\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\n     *\n     * prefix - the user generated table prefix as a string.\n     * tableId - the Tableland generated tableId as a uint256.\n     * columns - a string encoded ordered list of columns that will be updated. Example: \"name, age\".\n     * values - an array where each item is a string encoded ordered list of values.\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toBatchInsert(\n        string memory prefix,\n        uint256 tableId,\n        string memory columns,\n        string[] memory values\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        string memory insert = string(\n            abi.encodePacked(\"INSERT INTO \", name, \"(\", columns, \")VALUES\")\n        );\n        for (uint256 i = 0; i < values.length; i++) {\n            if (i == 0) {\n                insert = string(abi.encodePacked(insert, \"(\", values[i], \")\"));\n            } else {\n                insert = string(abi.encodePacked(insert, \",(\", values[i], \")\"));\n            }\n        }\n        return insert;\n    }\n\n    /**\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\n     *\n     * prefix - the user generated table prefix as a string\n     * tableId - the Tableland generated tableId as a uint256\n     * setters - a string encoded set of updates. Example: \"name='tom', age=26\"\n     * filters - a string encoded list of filters or \"\" for no filters. Example: \"id<2 and name!='jerry'\"\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toUpdate(\n        string memory prefix,\n        uint256 tableId,\n        string memory setters,\n        string memory filters\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        string memory filter = \"\";\n        if (bytes(filters).length > 0) {\n            filter = string(abi.encodePacked(\" WHERE \", filters));\n        }\n        return\n            string(abi.encodePacked(\"UPDATE \", name, \" SET \", setters, filter));\n    }\n\n    /**\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\n     *\n     * prefix - the user generated table prefix as a string.\n     * tableId - the Tableland generated tableId as a uint256.\n     * filters - a string encoded list of filters. Example: \"id<2 and name!='jerry'\".\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toDelete(\n        string memory prefix,\n        uint256 tableId,\n        string memory filters\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        return\n            string(abi.encodePacked(\"DELETE FROM \", name, \" WHERE \", filters));\n    }\n\n    /**\n     * @dev Add single quotes around a string value\n     *\n     * input - any input value.\n     *\n     */\n    function quote(string memory input) internal pure returns (string memory) {\n        return string(abi.encodePacked(\"'\", input, \"'\"));\n    }\n}\n"
    },
    "@tableland/evm/contracts/utils/TablelandDeployments.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\nimport {ITablelandTables} from \"../interfaces/ITablelandTables.sol\";\n\n/**\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\n */\nlibrary TablelandDeployments {\n    /**\n     * Current chain does not have a TablelandTables deployment.\n     */\n    error ChainNotSupported(uint256 chainid);\n\n    // TablelandTables address on Ethereum.\n    address internal constant MAINNET =\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\n    // TablelandTables address on Ethereum.\n    address internal constant HOMESTEAD = MAINNET;\n    // TablelandTables address on Optimism.\n    address internal constant OPTIMISM =\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\n    // TablelandTables address on Arbitrum One.\n    address internal constant ARBITRUM =\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\n    // TablelandTables address on Arbitrum Nova.\n    address internal constant ARBITRUM_NOVA =\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\n    // TablelandTables address on Polygon.\n    address internal constant MATIC =\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\n    // TablelandTables address on Filecoin.\n    address internal constant FILECOIN =\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\n\n    // TablelandTables address on Ethereum Sepolia.\n    address internal constant SEPOLIA =\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\n    // TablelandTables address on Optimism Goerli.\n    address internal constant OPTIMISM_GOERLI =\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\n    // TablelandTables address on Arbitrum Goerli.\n    address internal constant ARBITRUM_GOERLI =\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\n    // TablelandTables address on Polygon Mumbai.\n    address internal constant MATICMUM =\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\n    // TablelandTables address on Filecoin Calibration.\n    address internal constant FILECOIN_CALIBRATION =\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\n\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\n    address internal constant LOCAL_TABLELAND =\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\n\n    /**\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\n     *\n     * The selection order is meant to reduce gas on more expensive chains.\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function get() internal view returns (ITablelandTables) {\n        if (block.chainid == 1) {\n            return ITablelandTables(MAINNET);\n        } else if (block.chainid == 10) {\n            return ITablelandTables(OPTIMISM);\n        } else if (block.chainid == 42161) {\n            return ITablelandTables(ARBITRUM);\n        } else if (block.chainid == 42170) {\n            return ITablelandTables(ARBITRUM_NOVA);\n        } else if (block.chainid == 137) {\n            return ITablelandTables(MATIC);\n        } else if (block.chainid == 314) {\n            return ITablelandTables(FILECOIN);\n        } else if (block.chainid == 11155111) {\n            return ITablelandTables(SEPOLIA);\n        } else if (block.chainid == 420) {\n            return ITablelandTables(OPTIMISM_GOERLI);\n        } else if (block.chainid == 421613) {\n            return ITablelandTables(ARBITRUM_GOERLI);\n        } else if (block.chainid == 80001) {\n            return ITablelandTables(MATICMUM);\n        } else if (block.chainid == 314159) {\n            return ITablelandTables(FILECOIN_CALIBRATION);\n        } else if (block.chainid == 31337) {\n            return ITablelandTables(LOCAL_TABLELAND);\n        } else {\n            revert ChainNotSupported(block.chainid);\n        }\n    }\n}\n"
    },
    "contracts/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror DeadlineExpired();\nerror InvalidTAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/// @notice A struct representing ECDSA signature data.\nstruct Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/// @notice A struct representing a single attestation.\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n    string dataBase64;\n}\n\n/// @notice A helper function to work with unchecked iterators in loops.\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\n    unchecked {\n        j = i + 1;\n    }\n}\n"
    },
    "contracts/ISchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {ISchemaResolver} from \"./resolver/ISchemaResolver.sol\";\n\n/// @notice A struct representing a record for a submitted schema.\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\nstruct SchemaRegistrationInput {\n    string schema;\n    string schemaName;\n    string schemaDescription;\n    string[] categories;\n    ISchemaResolver schemaResolver;\n    bool revocable;\n}\n\n/// @title ISchemaRegistry\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\ninterface ISchemaRegistry {\n    function register(\n        SchemaRegistrationInput memory input\n    ) external returns (bytes32);\n\n    /// @notice Returns an existing schema by UID\n    /// @param uid The UID of the schema to retrieve.\n    /// @return The schema data members.\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"
    },
    "contracts/ITAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {ISchemaRegistry} from \"./ISchemaRegistry.sol\";\nimport {Attestation, Signature} from \"./Common.sol\";\n\n/// @notice A struct representing the arguments of the attestation request.\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    string dataBase64;\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the attestation request.\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the full delegated attestation request.\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    Signature signature; // The ECDSA signature data.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi attestation request.\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the arguments of the revocation request.\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the revocation request.\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the arguments of the full delegated revocation request.\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    Signature signature; // The ECDSA signature data.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi revocation request.\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @title ITAS\n/// @notice TAS - Tableland Attestation Service interface.\ninterface ITAS {\n    /// @notice Returns the address of the global schema registry.\n    /// @return The address of the global schema registry.\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /// @notice Attests to a specific schema.\n    /// @param request The arguments of the attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attest({\n    ///         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n    ///         data: {\n    ///             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    ///             data: \"0xF00D\",\n    ///             value: 0\n    ///         }\n    ///     })\n    function attest(\n        AttestationRequest calldata request\n    ) external payable returns (bytes32);\n\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attestByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\n    ///         deadline: 1673891048\n    ///     })\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /// @notice Attests to multiple schemas.\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttest([{\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n    ///             data: '0x12345678',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiAttest(\n        MultiAttestationRequest[] calldata multiRequests\n    ) external payable returns (bytes32[] memory);\n\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttestByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         {\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /// @notice Revokes an existing attestation to a specific schema.\n    /// @param request The arguments of the revocation request.\n    ///\n    /// Example:\n    ///     revoke({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n    ///             value: 0\n    ///         }\n    ///     })\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated revocation request.\n    ///\n    /// Example:\n    ///     revokeByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 27,\n    ///             r: '0xb593...7142',\n    ///             s: '0x0f5b...2cce'\n    ///         },\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     })\n    function revokeByDelegation(\n        DelegatedRevocationRequest calldata delegatedRequest\n    ) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas.\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevoke([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiRevoke(\n        MultiRevocationRequest[] calldata multiRequests\n    ) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevokeByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /// @notice Timestamps the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /// @notice Timestamps the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /// @notice Revokes the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /// @notice Revokes the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function multiRevokeOffchain(\n        bytes32[] calldata data\n    ) external returns (uint64);\n\n    /// @notice Returns an existing attestation by UID.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return The attestation data members.\n    function getAttestation(\n        bytes32 uid\n    ) external view returns (Attestation memory);\n\n    /// @notice Checks whether an attestation exists.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return Whether an attestation exists.\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n}\n"
    },
    "contracts/resolver/ISchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Attestation} from \"../Common.sol\";\n\n/// @title ISchemaResolver\n/// @notice The interface of an optional schema resolver.\ninterface ISchemaResolver {\n    /// @notice Checks if the resolver can be sent ETH.\n    /// @return Whether the resolver supports ETH transfers.\n    function isPayable() external pure returns (bool);\n\n    /// @notice Processes an attestation and verifies whether it's valid.\n    /// @param attestation The new attestation.\n    /// @return Whether the attestation is valid.\n    function attest(\n        Attestation calldata attestation\n    ) external payable returns (bool);\n\n    /// @notice Processes multiple attestations and verifies whether they are valid.\n    /// @param attestations The new attestations.\n    /// @param values Explicit ETH amounts which were sent with each attestation.\n    /// @return Whether all the attestations are valid.\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\n    /// @param attestation The existing attestation to be revoked.\n    /// @return Whether the attestation can be revoked.\n    function revoke(\n        Attestation calldata attestation\n    ) external payable returns (bool);\n\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\n    /// @param attestations The existing attestations to be revoked.\n    /// @param values Explicit ETH amounts which were sent with each revocation.\n    /// @return Whether the attestations can be revoked.\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"
    },
    "contracts/tablelandIndexers/TASIndexer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {TablelandDeployments, ITablelandTables} from \"@tableland/evm/contracts/utils/TablelandDeployments.sol\";\n\nimport {SQLHelpers} from \"@tableland/evm/contracts/utils/SQLHelpers.sol\";\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\nimport {Attestation} from \"../ITAS.sol\";\n\n/// @title TAS\n/// @notice The Tableland Attestation Service protocol.\ncontract TASIndexer is IERC721Receiver, Ownable {\n    ITablelandTables private tablelandContract;\n\n    string[] createTableStatements;\n\n    string[] public tables;\n\n    uint256[] tableIDs;\n\n    uint256 public tablesUpdates;\n\n    uint256 private tablesRowsCounter;\n\n    string private constant ATTESTATION_TABLE_PREFIX = \"attestation\";\n\n    string private constant ATTESTATION_SCHEMA =\n        \"uid text primary key, schemaUID text, creationTimestamp text, expirationTime text, refUID text, recipient text, attester text, data text\";\n\n    string private constant REVOCATION_TABLE_PREFIX = \"revocation\";\n\n    string private constant REVOCATION_SCHEMA =\n        \"uid text primary key, revocationTime text, revoker text, revocable text\";\n\n    string private constant TIMESTAMP_TABLE_PREFIX = \"offChain_timestamp\";\n\n    string private constant TIMESTAMP_SCHEMA = \"uid text, timestampedAt text\";\n\n    string private constant OFF_CHAIN_REVOCATIONS_TABLE_PREFIX =\n        \"offChain_revocation\";\n\n    string private constant OFF_CHAIN_REVOCATIONS_SCHEMA =\n        \"revoker text, uid text, revokedAt text\";\n\n    constructor() {\n        tablelandContract = TablelandDeployments.get();\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                ATTESTATION_SCHEMA,\n                ATTESTATION_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                REVOCATION_SCHEMA,\n                REVOCATION_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                TIMESTAMP_SCHEMA,\n                TIMESTAMP_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                OFF_CHAIN_REVOCATIONS_SCHEMA,\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX\n            )\n        );\n\n        tableIDs = tablelandContract.create(\n            address(this),\n            createTableStatements\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(ATTESTATION_TABLE_PREFIX, tableIDs[0])\n        );\n        tables.push(\n            SQLHelpers.toNameFromId(REVOCATION_TABLE_PREFIX, tableIDs[1])\n        );\n        tables.push(\n            SQLHelpers.toNameFromId(TIMESTAMP_TABLE_PREFIX, tableIDs[2])\n        );\n        tables.push(\n            SQLHelpers.toNameFromId(\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX,\n                tableIDs[3]\n            )\n        );\n    }\n\n    function AttestationInserted(\n        Attestation memory attestation\n    ) public onlyOwner {\n        require(strlen(attestation.dataBase64) <= 1024, \"Tableland limitation\");\n        // Managing tableland rows limitation.\n        if (tablesRowsCounter == 100000) {\n            RenewTables();\n        }\n        mutate(\n            tableIDs[0],\n            SQLHelpers.toInsert(\n                ATTESTATION_TABLE_PREFIX,\n                tableIDs[0],\n                \"uid, schemaUID, creationTimestamp, expirationTime, refUID, recipient, attester, data\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(attestation.uid)),\n                    \",\",\n                    SQLHelpers.quote(bytes32ToString(attestation.schema)),\n                    \",\",\n                    SQLHelpers.quote((Strings.toString(attestation.time))),\n                    \",\",\n                    SQLHelpers.quote(\n                        (Strings.toString(attestation.expirationTime))\n                    ),\n                    \",\",\n                    SQLHelpers.quote(bytes32ToString(attestation.refUID)),\n                    \",\",\n                    SQLHelpers.quote(\n                        Strings.toHexString(attestation.recipient)\n                    ),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(attestation.attester)),\n                    \",\",\n                    SQLHelpers.quote(attestation.dataBase64)\n                )\n            )\n        );\n        tablesRowsCounter++;\n        RevocationInfoInserted(attestation.uid, attestation.revocable);\n    }\n\n    function RevocationInfoInserted(\n        bytes32 uid,\n        bool revocable\n    ) public onlyOwner {\n        mutate(\n            tableIDs[1],\n            SQLHelpers.toInsert(\n                REVOCATION_TABLE_PREFIX,\n                tableIDs[1],\n                \"uid, revocationTime, revoker, revocable\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(uid)),\n                    \",\",\n                    SQLHelpers.quote(\"0\"),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(address(0))),\n                    \",\",\n                    SQLHelpers.quote(revocable ? \"true\" : \"false\")\n                )\n            )\n        );\n    }\n\n    function AttestationRevokedUpdate(\n        bytes32 uid,\n        address revoker,\n        uint256 revocationTime\n    ) public onlyOwner {\n        mutate(\n            tableIDs[1],\n            SQLHelpers.toUpdate(\n                REVOCATION_TABLE_PREFIX,\n                tableIDs[1],\n                string.concat(\n                    \"revoker=\",\n                    SQLHelpers.quote(Strings.toHexString(revoker)),\n                    \", revocationTime=\",\n                    SQLHelpers.quote(Strings.toString(revocationTime))\n                ),\n                string.concat(\"uid=\", SQLHelpers.quote(bytes32ToString(uid)))\n            )\n        );\n    }\n\n    function Timestamped(bytes32 uid, uint256 time) public onlyOwner {\n        mutate(\n            tableIDs[2],\n            SQLHelpers.toInsert(\n                TIMESTAMP_TABLE_PREFIX,\n                tableIDs[2],\n                \"uid, timestampedAt\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(uid)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toString(time))\n                )\n            )\n        );\n    }\n\n    function RevokedOffChain(\n        address revoker,\n        bytes32 uid,\n        uint256 time\n    ) public onlyOwner {\n        mutate(\n            tableIDs[3],\n            SQLHelpers.toInsert(\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX,\n                tableIDs[3],\n                \"revoker, uid, revokedAt\",\n                string.concat(\n                    SQLHelpers.quote(Strings.toHexString(revoker)),\n                    \",\",\n                    SQLHelpers.quote(bytes32ToString(uid)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toString(time))\n                )\n            )\n        );\n    }\n\n    function RenewTables() internal {\n        tableIDs = tablelandContract.create(\n            address(this),\n            createTableStatements\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(ATTESTATION_TABLE_PREFIX, tableIDs[0])\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(REVOCATION_TABLE_PREFIX, tableIDs[1])\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(TIMESTAMP_TABLE_PREFIX, tableIDs[2])\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(\n                OFF_CHAIN_REVOCATIONS_TABLE_PREFIX,\n                tableIDs[3]\n            )\n        );\n\n        tablesRowsCounter = 0;\n\n        tablesUpdates++;\n    }\n\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(data.length * 2);\n\n        bytes memory _base = \"0123456789abcdef\";\n\n        for (uint256 i = 0; i < data.length; i++) {\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\n        }\n\n        return string(abi.encodePacked(\"0x\", converted));\n    }\n\n    /**\n     * @dev Returns the length of a given string\n     *\n     * @param s The string to measure the length of\n     * @return The length of the input string\n     */\n    function strlen(string memory s) internal pure returns (uint256) {\n        uint256 len;\n        uint256 i = 0;\n        uint256 bytelength = bytes(s).length;\n        for (len = 0; i < bytelength; len++) {\n            bytes1 b = bytes(s)[i];\n            if (b < 0x80) {\n                i += 1;\n            } else if (b < 0xE0) {\n                i += 2;\n            } else if (b < 0xF0) {\n                i += 3;\n            } else if (b < 0xF8) {\n                i += 4;\n            } else if (b < 0xFC) {\n                i += 5;\n            } else {\n                i += 6;\n            }\n        }\n        return len;\n    }\n\n    /*\n     * @dev Internal function to execute a mutation on a table.\n     * @param {uint256} tableId - Table ID.\n     * @param {string} statement - Mutation statement.\n     */\n    function mutate(uint256 tableId, string memory statement) internal {\n        tablelandContract.mutate(address(this), tableId, statement);\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": false
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}