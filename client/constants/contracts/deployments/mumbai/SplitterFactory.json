{
  "address": "0xbD1679Cbc71a27e1B68CCaB283218ab18eA0E602",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementationAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementationAddress",
          "type": "address"
        }
      ],
      "name": "changeImplementations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "createSplitter",
      "outputs": [
        {
          "internalType": "address",
          "name": "splitterClone",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc027b06f7d45e7cf8ab3e673cc7f895c49e4a121080bdfb7a0f30223b279e6c0",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0xbD1679Cbc71a27e1B68CCaB283218ab18eA0E602",
    "transactionIndex": 9,
    "gasUsed": "572068",
    "logsBloom": "0x
    "blockHash": "0x84fe789d380909dcf55d92727031c74aa6b14247cfab68ec0dbea98fabf61048",
    "transactionHash": "0xc027b06f7d45e7cf8ab3e673cc7f895c49e4a121080bdfb7a0f30223b279e6c0",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 40141739,
        "transactionHash": "0xc027b06f7d45e7cf8ab3e673cc7f895c49e4a121080bdfb7a0f30223b279e6c0",
        "address": "0xbD1679Cbc71a27e1B68CCaB283218ab18eA0E602",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0x84fe789d380909dcf55d92727031c74aa6b14247cfab68ec0dbea98fabf61048"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40141739,
        "transactionHash": "0xc027b06f7d45e7cf8ab3e673cc7f895c49e4a121080bdfb7a0f30223b279e6c0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000004503e6ce0d66c00000000000000000000000000000000000000000000000006f3fd4ee394bd0e0000000000000000000000000000000000000000000001c1d401ceeb10705d9c00000000000000000000000000000000000000000000000006efad1076b3e6a20000000000000000000000000000000000000000000001c1d4061f297d513408",
        "logIndex": 54,
        "blockHash": "0x84fe789d380909dcf55d92727031c74aa6b14247cfab68ec0dbea98fabf61048"
      }
    ],
    "blockNumber": 40141739,
    "cumulativeGasUsed": "2544712",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x260569B16d454D793AbA239E35A8e561892B457B"
  ],
  "numDeployments": 1,
  "solcInputHash": "cd19f94aa2ec7d4942f920993b8750f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementationAddress\",\"type\":\"address\"}],\"name\":\"changeImplementations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"createSplitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"splitterClone\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/splitter/SplitterFactory.sol\":\"SplitterFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/splitter/SplitterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SplitterFactory is Ownable {\\n    address public implementationAddress;\\n    // Constructor\\n    constructor(address _implementationAddress) {\\n        implementationAddress = _implementationAddress;\\n    }\\n\\n    // Function to create a new OptimisticResolver contract and associate it with a schema\\n    function createSplitter(\\n        address[] memory payees,\\n        uint256[] memory shares\\n    ) external returns(address splitterClone) {\\n    // Create new resolver contract\\n        splitterClone = Clones.clone(implementationAddress);\\n\\n        (bool success, ) = splitterClone.call(\\n            abi.encodeWithSignature(\\n                \\\"initialize(address[],uint256[])\\\",\\n                payees,\\n                shares\\n            )\\n        );\\n        require(success, \\\"error deploying\\\");\\n    }\\n\\n    \\n    function changeImplementations(address _implementationAddress)public onlyOwner{\\n        implementationAddress = _implementationAddress;\\n    }\\n}\",\"keccak256\":\"0xd5a89935b56cce44b0cc0124421f123a75daf0316a8745db6aa8f6a28dd92ed9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161097738038061097783398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b61088b806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b97a231911610050578063b97a2319146100d7578063f2fde38b146100f7578063f7c25fe21461010a57600080fd5b8063179dd61614610077578063715018a61461008c5780638da5cb5b14610094575b600080fd5b61008a6100853660046105a6565b61011d565b005b61008a61016c565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6001546100ae9073ffffffffffffffffffffffffffffffffffffffff1681565b61008a6101053660046105a6565b610180565b6100ae6101183660046106d5565b61023c565b6101256103c4565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101746103c4565b61017e6000610445565b565b6101886103c4565b73ffffffffffffffffffffffffffffffffffffffff8116610230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61023981610445565b50565b6001546000906102619073ffffffffffffffffffffffffffffffffffffffff166104ba565b905060008173ffffffffffffffffffffffffffffffffffffffff16848460405160240161028f929190610795565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7fbbe46f00000000000000000000000000000000000000000000000000000000179052516103109190610826565b6000604051808303816000865af19150503d806000811461034d576040519150601f19603f3d011682016040523d82523d6000602084013e610352565b606091505b50509050806103bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6572726f72206465706c6f79696e6700000000000000000000000000000000006044820152606401610227565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461017e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610227565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff811661057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610227565b919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461057d57600080fd5b6000602082840312156105b857600080fd5b6105c182610582565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561063e5761063e6105c8565b604052919050565b600067ffffffffffffffff821115610660576106606105c8565b5060051b60200190565b600082601f83011261067b57600080fd5b8135602061069061068b83610646565b6105f7565b82815260059290921b840181019181810190868411156106af57600080fd5b8286015b848110156106ca57803583529183019183016106b3565b509695505050505050565b600080604083850312156106e857600080fd5b823567ffffffffffffffff8082111561070057600080fd5b818501915085601f83011261071457600080fd5b8135602061072461068b83610646565b82815260059290921b8401810191818101908984111561074357600080fd5b948201945b838610156107685761075986610582565b82529482019490820190610748565b9650508601359250508082111561077e57600080fd5b5061078b8582860161066a565b9150509250929050565b604080825283519082018190526000906020906060840190828701845b828110156107e457815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016107b2565b5050508381038285015284518082528583019183019060005b81811015610819578351835292840192918401916001016107fd565b5090979650505050505050565b6000825160005b81811015610847576020818601810151858301520161082d565b50600092019182525091905056fea264697066735822122060487657e9eab5667309e7e9a38fc1908fdbf919651c0e386ad8424a910d5a3164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063b97a231911610050578063b97a2319146100d7578063f2fde38b146100f7578063f7c25fe21461010a57600080fd5b8063179dd61614610077578063715018a61461008c5780638da5cb5b14610094575b600080fd5b61008a6100853660046105a6565b61011d565b005b61008a61016c565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6001546100ae9073ffffffffffffffffffffffffffffffffffffffff1681565b61008a6101053660046105a6565b610180565b6100ae6101183660046106d5565b61023c565b6101256103c4565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101746103c4565b61017e6000610445565b565b6101886103c4565b73ffffffffffffffffffffffffffffffffffffffff8116610230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61023981610445565b50565b6001546000906102619073ffffffffffffffffffffffffffffffffffffffff166104ba565b905060008173ffffffffffffffffffffffffffffffffffffffff16848460405160240161028f929190610795565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7fbbe46f00000000000000000000000000000000000000000000000000000000179052516103109190610826565b6000604051808303816000865af19150503d806000811461034d576040519150601f19603f3d011682016040523d82523d6000602084013e610352565b606091505b50509050806103bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6572726f72206465706c6f79696e6700000000000000000000000000000000006044820152606401610227565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461017e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610227565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff811661057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610227565b919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461057d57600080fd5b6000602082840312156105b857600080fd5b6105c182610582565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561063e5761063e6105c8565b604052919050565b600067ffffffffffffffff821115610660576106606105c8565b5060051b60200190565b600082601f83011261067b57600080fd5b8135602061069061068b83610646565b6105f7565b82815260059290921b840181019181810190868411156106af57600080fd5b8286015b848110156106ca57803583529183019183016106b3565b509695505050505050565b600080604083850312156106e857600080fd5b823567ffffffffffffffff8082111561070057600080fd5b818501915085601f83011261071457600080fd5b8135602061072461068b83610646565b82815260059290921b8401810191818101908984111561074357600080fd5b948201945b838610156107685761075986610582565b82529482019490820190610748565b9650508601359250508082111561077e57600080fd5b5061078b8582860161066a565b9150509250929050565b604080825283519082018190526000906020906060840190828701845b828110156107e457815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016107b2565b5050508381038285015284518082528583019183019060005b81811015610819578351835292840192918401916001016107fd565b5090979650505050505050565b6000825160005b81811015610847576020818601810151858301520161082d565b50600092019182525091905056fea264697066735822122060487657e9eab5667309e7e9a38fc1908fdbf919651c0e386ad8424a910d5a3164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/splitter/SplitterFactory.sol:SplitterFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12430,
        "contract": "contracts/splitter/SplitterFactory.sol:SplitterFactory",
        "label": "implementationAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}