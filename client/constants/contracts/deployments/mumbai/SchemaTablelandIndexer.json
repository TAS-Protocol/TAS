{
  "address": "0xf1461cc5D4332024E401d9d753F9A13F49651507",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "schemaName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "schemaDescription",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "categories",
              "type": "string[]"
            },
            {
              "internalType": "contract ISchemaResolver",
              "name": "schemaResolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            }
          ],
          "internalType": "struct SchemaRegistrationInput",
          "name": "input",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        }
      ],
      "name": "SchemaRegistered",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa65d797886203e29e6347d9f81714c20f9760b33de7f560093a712143f38a58a",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0xf1461cc5D4332024E401d9d753F9A13F49651507",
    "transactionIndex": 6,
    "gasUsed": "2269498",
    "logsBloom": "0x000000000000000000000000000000000000000000000000808000000008000040000000000400000000000000000000000080080000000000000000000000000080000000000000000100080000008004010000010000000001000000000000000000010200000004000000000008000000000000000000800080100005004000000000000000200000000000000000000000000000900000000000000000002800000020000001000000000000000000000000000000000000000000000040000000020000800000010000010000000000000000000000001000000000a0000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xcaf5b8f054d9947e3982dee764c1e60b2a9b8de01566bd27eade861541d3c225",
    "transactionHash": "0xa65d797886203e29e6347d9f81714c20f9760b33de7f560093a712143f38a58a",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 40279003,
        "transactionHash": "0xa65d797886203e29e6347d9f81714c20f9760b33de7f560093a712143f38a58a",
        "address": "0xf1461cc5D4332024E401d9d753F9A13F49651507",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0xcaf5b8f054d9947e3982dee764c1e60b2a9b8de01566bd27eade861541d3c225"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 40279003,
        "transactionHash": "0xa65d797886203e29e6347d9f81714c20f9760b33de7f560093a712143f38a58a",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1461cc5d4332024e401d9d753f9a13f49651507",
          "0x0000000000000000000000000000000000000000000000000000000000001d09"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0xcaf5b8f054d9947e3982dee764c1e60b2a9b8de01566bd27eade861541d3c225"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 40279003,
        "transactionHash": "0xa65d797886203e29e6347d9f81714c20f9760b33de7f560093a712143f38a58a",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000f1461cc5d4332024e401d9d753f9a13f496515070000000000000000000000000000000000000000000000000000000000001d09000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4435245415445205441424c4520736368656d615f383030303128736368656d615549442074657874207072696d617279206b65792c20736368656d6120746578742c207265736f6c76657220746578742c207265766f6361626c6520746578742c206e616d6520746578742c206465736372697074696f6e20746578742c2063726561746f7220746578742c206372656174696f6e54696d657374616d7020746578742900000000000000000000000000000000000000000000000000000000",
        "logIndex": 26,
        "blockHash": "0xcaf5b8f054d9947e3982dee764c1e60b2a9b8de01566bd27eade861541d3c225"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 40279003,
        "transactionHash": "0xa65d797886203e29e6347d9f81714c20f9760b33de7f560093a712143f38a58a",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1461cc5d4332024e401d9d753f9a13f49651507",
          "0x0000000000000000000000000000000000000000000000000000000000001d0a"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0xcaf5b8f054d9947e3982dee764c1e60b2a9b8de01566bd27eade861541d3c225"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 40279003,
        "transactionHash": "0xa65d797886203e29e6347d9f81714c20f9760b33de7f560093a712143f38a58a",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000f1461cc5d4332024e401d9d753f9a13f496515070000000000000000000000000000000000000000000000000000000000001d0a00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000043435245415445205441424c4520736368656d615f63617465676f726965735f383030303128736368656d6155494420746578742c2063617465676f72792074657874290000000000000000000000000000000000000000000000000000000000",
        "logIndex": 28,
        "blockHash": "0xcaf5b8f054d9947e3982dee764c1e60b2a9b8de01566bd27eade861541d3c225"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 40279003,
        "transactionHash": "0xa65d797886203e29e6347d9f81714c20f9760b33de7f560093a712143f38a58a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7",
          "0x0000000000000000000000004cefb7df2ff89a05ddd0176de11e01ef0cf7ed84"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000131be8903b916000000000000000000000000000000000000000000000000001f33c2de7cde0850000000000000000000000000000000000000000000000084cf246ff7d8bb1ed00000000000000000000000000000000000000000000000001e0204557924f250000000000000000000000000000000000000000000000084d0562e80dc7434d",
        "logIndex": 29,
        "blockHash": "0xcaf5b8f054d9947e3982dee764c1e60b2a9b8de01566bd27eade861541d3c225"
      }
    ],
    "blockNumber": 40279003,
    "cumulativeGasUsed": "2722426",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5b391c93e8d625bb77c5c72d1262a1f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaDescription\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"categories\",\"type\":\"string[]\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"schemaResolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct SchemaRegistrationInput\",\"name\":\"input\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"name\":\"SchemaRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Creates a new SchemaRegistry instance.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"SchemaTablelandIndexer\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tablelandIndexers/SchemaTablelandIndexer.sol\":\"SchemaTablelandIndexer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Goerli.\\n    address internal constant GOERLI =\\n        0xDA8EA22d092307874f30A1F277D1388dca0BA97a;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Goerli.\\n    address internal constant ARBITRUM_GOERLI =\\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Hyperspace.\\n    address internal constant FILECOIN_HYPERSPACE =\\n        0x0B9737ab4B3e5303CB67dB031b509697e31c02d3;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (ITablelandTables) {\\n        if (block.chainid == 1) {\\n            return ITablelandTables(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return ITablelandTables(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return ITablelandTables(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return ITablelandTables(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return ITablelandTables(MATIC);\\n        } else if (block.chainid == 314) {\\n            return ITablelandTables(FILECOIN);\\n        } else if (block.chainid == 5) {\\n            return ITablelandTables(GOERLI);\\n        } else if (block.chainid == 420) {\\n            return ITablelandTables(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421613) {\\n            return ITablelandTables(ARBITRUM_GOERLI);\\n        } else if (block.chainid == 80001) {\\n            return ITablelandTables(MATICMUM);\\n        } else if (block.chainid == 3141) {\\n            return ITablelandTables(FILECOIN_HYPERSPACE);\\n        } else if (block.chainid == 31337) {\\n            return ITablelandTables(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x245cfb7b5e4d9e4874146dac869e7a28a5c9caf2251fd9eeb3518d3e57f0ca01\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidTAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\",\"keccak256\":\"0x0d95a05a089cc0388e57e1baf03fd4882de7c6424311d50831f627a03752092e\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\nstruct SchemaRegistrationInput {\\n    string schema;\\n    string schemaName;\\n    string schemaDescription;\\n    string[] categories;\\n    ISchemaResolver schemaResolver;\\n    bool revocable;\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ISchemaRegistry {\\n\\n\\n    function register(        \\n        SchemaRegistrationInput memory input\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\",\"keccak256\":\"0x8f45a9222dd958704d8bf3329dc639cb2275296a8b927d2b82c1fb2ff39f1bdf\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\",\"keccak256\":\"0x1dec285f07614107174b652568474a55b6a2692631888731967fb5cc53d4f417\",\"license\":\"MIT\"},\"contracts/tablelandIndexers/SchemaTablelandIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport { SchemaRegistrationInput } from \\\"../ISchemaRegistry.sol\\\";\\n\\nimport { TablelandDeployments, ITablelandTables } from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport { SQLHelpers } from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title SchemaTablelandIndexer\\ncontract SchemaTablelandIndexer is Ownable {\\n\\n    ITablelandTables private tablelandContract;\\n\\n    string[] createTableStatements;\\n\\n    string[] public tables;\\n\\n    uint256 tablesUpdates;\\n\\n    uint256 tableRowsCounter;\\n\\n    uint256[] tableIDs;\\n\\n    string private constant SCHEMA_TABLE_PREFIX = \\\"schema\\\";\\n\\n    string private constant SCHEMA_SCHEMA = \\\"schemaUID text primary key, schema text, resolver text, revocable text, name text, description text, creator text, creationTimestamp text\\\";\\n\\n    string private constant SCHEMA_CATEGORIES_TABLE_PREFIX = \\\"schema_categories\\\";\\n\\n    string private constant SCHEMA_CATEGORIES_SCHEMA = \\\"schemaUID text, category text\\\";\\n\\n    /// @dev Creates a new SchemaRegistry instance.\\n    constructor() {\\n\\n        tablelandContract = TablelandDeployments.get();\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(SCHEMA_SCHEMA, SCHEMA_TABLE_PREFIX)\\n        );\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(SCHEMA_CATEGORIES_SCHEMA, SCHEMA_CATEGORIES_TABLE_PREFIX)\\n        );\\n\\n\\n        tableIDs = tablelandContract.create(\\n            address(this),\\n            createTableStatements\\n        );\\n\\n        tables.push(SQLHelpers.toNameFromId(SCHEMA_TABLE_PREFIX, tableIDs[0]));\\n        tables.push(SQLHelpers.toNameFromId(SCHEMA_CATEGORIES_TABLE_PREFIX, tableIDs[1]));\\n\\n    }\\n\\n\\n    function SchemaRegistered(\\n        SchemaRegistrationInput memory input,\\n        bytes32 schemaUID\\n    ) public onlyOwner {\\n        uint256 size = input.categories.length;\\n        if(tableRowsCounter + size > 100000){\\n            RenewTables();\\n        }\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toInsert(\\n                SCHEMA_TABLE_PREFIX,\\n                tableIDs[0],\\n                \\\"schemaUID, schema, resolver, revocable, name, description, creator, creationTimestamp\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(input.schema),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(address(input.schemaResolver))),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(input.revocable ? \\\"true\\\" : \\\"false\\\"),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(input.schemaName),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(input.schemaDescription),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(tx.origin)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(block.timestamp))\\n                )\\n            )\\n        );\\n        for(uint i = 0; i < input.categories.length; i++){\\n            mutate(\\n            tableIDs[1],\\n            SQLHelpers.toInsert(\\n                SCHEMA_CATEGORIES_TABLE_PREFIX,\\n                tableIDs[1],\\n                \\\"schemaUID, category\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(input.categories[i])\\n                )\\n            )\\n        );\\n        }\\n        tableRowsCounter += size;\\n    }\\n\\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    function RenewTables()internal{\\n        tableIDs = tablelandContract.create(address(this), createTableStatements);\\n\\n        tables.push(SQLHelpers.toNameFromId(SCHEMA_TABLE_PREFIX, tableIDs[0]));\\n        tables.push(SQLHelpers.toNameFromId(SCHEMA_CATEGORIES_TABLE_PREFIX, tableIDs[1]));\\n\\n        tableRowsCounter = 0; \\n        tablesUpdates++;\\n    }\\n\\n    /*\\n     * @dev Internal function to execute a mutation on a table.\\n     * @param {uint256} tableId - Table ID.\\n     * @param {string} statement - Mutation statement.\\n     */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        tablelandContract.mutate(address(this), tableId, statement);\\n    }\\n}\",\"keccak256\":\"0x31d01df430f488ac75c1bbd4a0eb363bfed68d74b990545f56c0d1267e85934d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d33620002c4565b6200002762000314565b600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002620000906040518060c0016040528060898152602001620028bb60899139604080518082019091526006815265736368656d6160d01b6020820152620004d7565b81546001810183556000928352602090922090910190620000b29082620007cd565b506002620001256040518060400160405280601d81526020017f736368656d6155494420746578742c2063617465676f7279207465787400000081525060405180604001604052806011815260200170736368656d615f63617465676f7269657360781b815250620004d760201b60201c565b81546001810183556000928352602090922090910190620001479082620007cd565b506001546040516361a23d0f60e01b81526001600160a01b03909116906361a23d0f906200017d90309060029060040162000899565b6000604051808303816000875af11580156200019d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001c7919081019062000981565b8051620001dd91600691602090910190620006c1565b5060036200023160405180604001604052806006815260200165736368656d6160d01b81525060066000815481106200021a576200021a62000a4a565b90600052602060002001546200051160201b60201c565b81546001810183556000928352602090922090910190620002539082620007cd565b5060036200029b60405180604001604052806011815260200170736368656d615f63617465676f7269657360781b81525060066001815481106200021a576200021a62000a4a565b81546001810183556000928352602090922090910190620002bd9082620007cd565b5062000b3b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60004660010362000338575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a036200035a575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b1036200037d5750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba03620003a05750731a22854c5b1642760a827f20137a67930ae108d290565b46608903620003c25750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a03620003e557507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4660050362000407575073da8ea22d092307874f30a1f277d1388dca0ba97a90565b466101a4036200042a575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed036200044e575073033f69e8d119205089ab15d340f5b797732f646b90565b466201388103620004725750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b46610c4503620004955750730b9737ab4b3e5303cb67db031b509697e31c02d390565b46617a6903620004b8575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b60405163264e42cf60e01b815246600482015260240160405180910390fd5b606081620004e5466200053e565b84604051602001620004fa9392919062000a92565b604051602081830303815290604052905092915050565b6060826200051f466200053e565b6200052a846200053e565b604051602001620004fa9392919062000af8565b606060006200054d83620005d7565b60010190506000816001600160401b038111156200056f576200056f62000728565b6040519080825280601f01601f1916602001820160405280156200059a576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084620005a457509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831062000621577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106200064e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200066d57662386f26fc10000830492506010015b6305f5e100831062000686576305f5e100830492506008015b61271083106200069b57612710830492506004015b60648310620006ae576064830492506002015b600a8310620006bb576001015b92915050565b828054828255906000526020600020908101928215620006ff579160200282015b82811115620006ff578251825591602001919060010190620006e2565b506200070d92915062000711565b5090565b5b808211156200070d576000815560010162000712565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200075357607f821691505b6020821081036200077457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620007c857600081815260208120601f850160051c81016020861015620007a35750805b601f850160051c820191505b81811015620007c457828155600101620007af565b5050505b505050565b81516001600160401b03811115620007e957620007e962000728565b6200080181620007fa84546200073e565b846200077a565b602080601f831160018114620008395760008415620008205750858301515b600019600386901b1c1916600185901b178555620007c4565b600085815260208120601f198616915b828110156200086a5788860151825594840194600190910190840162000849565b5085821015620008895787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006040820160018060a01b0385168352602060408185015281855480845260608601915060059350606081851b8701016000888152848120815b848110156200097157605f198a8503018652828254620008f4816200073e565b808752600182811680156200091257600181146200092c5762000959565b60ff198416898d01528215158d1b89018c01945062000959565b8688528b8820885b84811015620009515781548b82018f0152908301908d0162000934565b8a018d019550505b50988a019892965050509190910190600101620008d4565b50919a9950505050505050505050565b600060208083850312156200099557600080fd5b82516001600160401b0380821115620009ad57600080fd5b818501915085601f830112620009c257600080fd5b815181811115620009d757620009d762000728565b8060051b604051601f19603f83011681018181108582111715620009ff57620009ff62000728565b60405291825284820192508381018501918883111562000a1e57600080fd5b938501935b8285101562000a3e5784518452938501939285019262000a23565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000815160005b8181101562000a83576020818501810151868301520162000a67565b50600093019283525090919050565b6c021a922a0aa22902a20a126229609d1b8152600062000ab6600d83018662000a60565b605f60f81b815262000acc600182018662000a60565b9050600560fb1b815262000ae4600182018562000a60565b602960f81b81526001019695505050505050565b600062000b06828662000a60565b605f60f81b80825262000b1d600183018762000a60565b908152905062000b31600182018562000a60565b9695505050505050565b611d708062000b4b6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100bd5780639201de55146100e5578063f2fde38b146100f857600080fd5b80636c42ce2514610077578063715018a61461008c57806371671bf214610094575b600080fd5b61008a61008536600461125a565b61010b565b005b61008a61040f565b6100a76100a236600461135d565b610423565b6040516100b491906113e4565b60405180910390f35b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b4565b6100a76100f336600461135d565b6104cf565b61008a6101063660046113f7565b6106f5565b6101136107b1565b606082015151600554620186a09061012c908390611443565b111561013a5761013a610832565b6102dd600660008154811061015157610151611456565b90600052602060002001546102d86040518060400160405280600681526020017f736368656d61000000000000000000000000000000000000000000000000000081525060066000815481106101a9576101a9611456565b9060005260206000200154604051806080016040528060558152602001611ce6605591396101de6101d9896104cf565b610a11565b89516101e990610a11565b6101f96101d98c60800151610a3a565b61027b8c60a00151610240576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610a11565b6040518060400160405280600481526020017f7472756500000000000000000000000000000000000000000000000000000000815250610a11565b6102888d60200151610a11565b6102958e60400151610a11565b6102a16101d932610a3a565b6102ad6101d942610a63565b6040516020016102c49897969594939291906114a1565b604051602081830303815290604052610b21565b610b60565b60005b8360600151518110156103f2576103e0600660018154811061030457610304611456565b90600052602060002001546102d86040518060400160405280601181526020017f736368656d615f63617465676f72696573000000000000000000000000000000815250600660018154811061035c5761035c611456565b90600052602060002001546040518060400160405280601381526020017f736368656d615549442c2063617465676f7279000000000000000000000000008152506103a96101d98a6104cf565b6103cf8b6060015189815181106103c2576103c2611456565b6020026020010151610a11565b6040516020016102c49291906115f1565b806103ea81611649565b9150506102e0565b5080600560008282546104059190611443565b9091555050505050565b6104176107b1565b6104216000610bf0565b565b6003818154811061043357600080fd5b90600052602060002001600091509050805461044e90611681565b80601f016020809104026020016040519081016040528092919081815260200182805461047a90611681565b80156104c75780601f1061049c576101008083540402835291602001916104c7565b820191906000526020600020905b8154815290600101906020018083116104aa57829003601f168201915b505050505081565b606060006104df602060026116d4565b60ff1667ffffffffffffffff8111156104fa576104fa61102f565b6040519080825280601f01601f191660200182016040528015610524576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b60208110156106cb5781825186836020811061057d5761057d611456565b6105899291901a611726565b8151811061059957610599611456565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016836105cc83600261173a565b815181106105dc576105dc611456565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081825186836020811061062057610620611456565b61062c9291901a611751565b8151811061063c5761063c611456565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168361066f83600261173a565b61067a906001611443565b8151811061068a5761068a611456565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806106c381611649565b91505061055f565b50816040516020016106dd9190611765565b60405160208183030381529060405292505050919050565b6106fd6107b1565b73ffffffffffffffffffffffffffffffffffffffff81166107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107ae81610bf0565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161079c565b6001546040517f61a23d0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906361a23d0f9061088b9030906002906004016117aa565b6000604051808303816000875af11580156108aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108f091908101906118d2565b805161090491600691602090910190610fcf565b5060036109646040518060400160405280600681526020017f736368656d610000000000000000000000000000000000000000000000000000815250600660008154811061095457610954611456565b9060005260206000200154610c65565b8154600181018355600092835260209092209091019061098490826119ae565b5060036109d46040518060400160405280601181526020017f736368656d615f63617465676f72696573000000000000000000000000000000815250600660018154811061095457610954611456565b815460018101835560009283526020909220909101906109f490826119ae565b50600060058190556004805491610a0a83611649565b9190505550565b606081604051602001610a249190611ac8565b6040516020818303038152906040529050919050565b6060610a5d73ffffffffffffffffffffffffffffffffffffffff83166014610ca3565b92915050565b60606000610a7083610eed565b600101905060008167ffffffffffffffff811115610a9057610a9061102f565b6040519080825280601f01601f191660200182016040528015610aba576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610ac457509392505050565b60606000610b2f8686610c65565b9050808484604051602001610b4693929190611b12565b604051602081830303815290604052915050949350505050565b6001546040517f377af0da00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063377af0da90610bba90309086908690600401611bfc565b600060405180830381600087803b158015610bd457600080fd5b505af1158015610be8573d6000803e3d6000fd5b505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606082610c7146610a63565b610c7a84610a63565b604051602001610c8c93929190611c3a565b604051602081830303815290604052905092915050565b60606000610cb283600261173a565b610cbd906002611443565b67ffffffffffffffff811115610cd557610cd561102f565b6040519080825280601f01601f191660200182016040528015610cff576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610d3657610d36611456565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610d9957610d99611456565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610dd584600261173a565b610de0906001611443565b90505b6001811115610e7d577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610e2157610e21611456565b1a60f81b828281518110610e3757610e37611456565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93610e7681611cb0565b9050610de3565b508315610ee6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161079c565b9392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610f36577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610f62576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610f8057662386f26fc10000830492506010015b6305f5e1008310610f98576305f5e100830492506008015b6127108310610fac57612710830492506004015b60648310610fbe576064830492506002015b600a8310610a5d5760010192915050565b82805482825590600052602060002090810192821561100a579160200282015b8281111561100a578251825591602001919060010190610fef565b5061101692915061101a565b5090565b5b80821115611016576000815560010161101b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156110815761108161102f565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156110ce576110ce61102f565b604052919050565b600082601f8301126110e757600080fd5b813567ffffffffffffffff8111156111015761110161102f565b61113260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611087565b81815284602083860101111561114757600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561117e5761117e61102f565b5060051b60200190565b600082601f83011261119957600080fd5b813560206111ae6111a983611164565b611087565b82815260059290921b840181019181810190868411156111cd57600080fd5b8286015b8481101561120d57803567ffffffffffffffff8111156111f15760008081fd5b6111ff8986838b01016110d6565b8452509183019183016111d1565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146107ae57600080fd5b803561124581611218565b919050565b8035801515811461124557600080fd5b6000806040838503121561126d57600080fd5b823567ffffffffffffffff8082111561128557600080fd5b9084019060c0828703121561129957600080fd5b6112a161105e565b8235828111156112b057600080fd5b6112bc888286016110d6565b8252506020830135828111156112d157600080fd5b6112dd888286016110d6565b6020830152506040830135828111156112f557600080fd5b611301888286016110d6565b60408301525060608301358281111561131957600080fd5b61132588828601611188565b6060830152506113376080840161123a565b608082015261134860a0840161124a565b60a08201529660209590950135955050505050565b60006020828403121561136f57600080fd5b5035919050565b60005b83811015611391578181015183820152602001611379565b50506000910152565b600081518084526113b2816020860160208601611376565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610ee6602083018461139a565b60006020828403121561140957600080fd5b8135610ee681611218565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610a5d57610a5d611414565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151611497818560208601611376565b9290920192915050565b600089516114b3818460208e01611376565b80830190507f2c000000000000000000000000000000000000000000000000000000000000008082528a516114ef816001850160208f01611376565b60019201918201819052895161150c816002850160208e01611376565b600292019182018190528851611529816003850160208d01611376565b60039201918201528651611544816004840160208b01611376565b01611571600482017f2c000000000000000000000000000000000000000000000000000000000000009052565b61157e6005820187611485565b7f2c00000000000000000000000000000000000000000000000000000000000000815290506115b06001820186611485565b7f2c00000000000000000000000000000000000000000000000000000000000000815290506115e26001820185611485565b9b9a5050505050505050505050565b60008351611603818460208801611376565b7f2c00000000000000000000000000000000000000000000000000000000000000908301908152835161163d816001840160208801611376565b01600101949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361167a5761167a611414565b5060010190565b600181811c9082168061169557607f821691505b6020821081036116ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60ff81811683821602908116908181146116f0576116f0611414565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611735576117356116f7565b500490565b8082028115828204841417610a5d57610a5d611414565b600082611760576117606116f7565b500690565b7f307800000000000000000000000000000000000000000000000000000000000081526000825161179d816002850160208701611376565b9190910160020192915050565b60006040820173ffffffffffffffffffffffffffffffffffffffff85168352602060408185015281855480845260608601915060059350606081851b8701016000888152848120815b848110156118c2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a850301865282825461182e81611681565b808752600182811680156118495760018114611880576118ab565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168c8a01528b8315158e1b8a010194506118ab565b8688528b8820885b848110156118a35781548b82018f0152908301908d01611888565b8a018d019550505b50988a0198929650505091909101906001016117f3565b50919a9950505050505050505050565b600060208083850312156118e557600080fd5b825167ffffffffffffffff8111156118fc57600080fd5b8301601f8101851361190d57600080fd5b805161191b6111a982611164565b81815260059190911b8201830190838101908783111561193a57600080fd5b928401925b828410156119585783518252928401929084019061193f565b979650505050505050565b601f8211156119a957600081815260208120601f850160051c8101602086101561198a5750805b601f850160051c820191505b81811015610be857828155600101611996565b505050565b815167ffffffffffffffff8111156119c8576119c861102f565b6119dc816119d68454611681565b84611963565b602080601f831160018114611a2f57600084156119f95750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610be8565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611a7c57888601518255948401946001909101908401611a5d565b5085821015611ab857878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60007f27000000000000000000000000000000000000000000000000000000000000008083528351611b01816001860160208801611376565b600193019283015250600201919050565b7f494e5345525420494e544f200000000000000000000000000000000000000000815260008451611b4a81600c850160208901611376565b7f2800000000000000000000000000000000000000000000000000000000000000600c918401918201528451611b8781600d840160208901611376565b7f2956414c55455328000000000000000000000000000000000000000000000000600d92909101918201528351611bc5816015840160208801611376565b7f29000000000000000000000000000000000000000000000000000000000000006015929091019182015260160195945050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152826020820152606060408201526000611c31606083018461139a565b95945050505050565b60008451611c4c818460208901611376565b80830190507f5f000000000000000000000000000000000000000000000000000000000000008082528551611c88816001850160208a01611376565b60019201918201528351611ca3816002840160208801611376565b0160020195945050505050565b600081611cbf57611cbf611414565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fe736368656d615549442c20736368656d612c207265736f6c7665722c207265766f6361626c652c206e616d652c206465736372697074696f6e2c2063726561746f722c206372656174696f6e54696d657374616d70a26469706673582212206889fb2b7a380e44349c6161ac97b76b5685bdadf53fdc61d3fd6d6e41f9a84964736f6c63430008130033736368656d615549442074657874207072696d617279206b65792c20736368656d6120746578742c207265736f6c76657220746578742c207265766f6361626c6520746578742c206e616d6520746578742c206465736372697074696f6e20746578742c2063726561746f7220746578742c206372656174696f6e54696d657374616d702074657874",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100bd5780639201de55146100e5578063f2fde38b146100f857600080fd5b80636c42ce2514610077578063715018a61461008c57806371671bf214610094575b600080fd5b61008a61008536600461125a565b61010b565b005b61008a61040f565b6100a76100a236600461135d565b610423565b6040516100b491906113e4565b60405180910390f35b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b4565b6100a76100f336600461135d565b6104cf565b61008a6101063660046113f7565b6106f5565b6101136107b1565b606082015151600554620186a09061012c908390611443565b111561013a5761013a610832565b6102dd600660008154811061015157610151611456565b90600052602060002001546102d86040518060400160405280600681526020017f736368656d61000000000000000000000000000000000000000000000000000081525060066000815481106101a9576101a9611456565b9060005260206000200154604051806080016040528060558152602001611ce6605591396101de6101d9896104cf565b610a11565b89516101e990610a11565b6101f96101d98c60800151610a3a565b61027b8c60a00151610240576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610a11565b6040518060400160405280600481526020017f7472756500000000000000000000000000000000000000000000000000000000815250610a11565b6102888d60200151610a11565b6102958e60400151610a11565b6102a16101d932610a3a565b6102ad6101d942610a63565b6040516020016102c49897969594939291906114a1565b604051602081830303815290604052610b21565b610b60565b60005b8360600151518110156103f2576103e0600660018154811061030457610304611456565b90600052602060002001546102d86040518060400160405280601181526020017f736368656d615f63617465676f72696573000000000000000000000000000000815250600660018154811061035c5761035c611456565b90600052602060002001546040518060400160405280601381526020017f736368656d615549442c2063617465676f7279000000000000000000000000008152506103a96101d98a6104cf565b6103cf8b6060015189815181106103c2576103c2611456565b6020026020010151610a11565b6040516020016102c49291906115f1565b806103ea81611649565b9150506102e0565b5080600560008282546104059190611443565b9091555050505050565b6104176107b1565b6104216000610bf0565b565b6003818154811061043357600080fd5b90600052602060002001600091509050805461044e90611681565b80601f016020809104026020016040519081016040528092919081815260200182805461047a90611681565b80156104c75780601f1061049c576101008083540402835291602001916104c7565b820191906000526020600020905b8154815290600101906020018083116104aa57829003601f168201915b505050505081565b606060006104df602060026116d4565b60ff1667ffffffffffffffff8111156104fa576104fa61102f565b6040519080825280601f01601f191660200182016040528015610524576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b60208110156106cb5781825186836020811061057d5761057d611456565b6105899291901a611726565b8151811061059957610599611456565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016836105cc83600261173a565b815181106105dc576105dc611456565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081825186836020811061062057610620611456565b61062c9291901a611751565b8151811061063c5761063c611456565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168361066f83600261173a565b61067a906001611443565b8151811061068a5761068a611456565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806106c381611649565b91505061055f565b50816040516020016106dd9190611765565b60405160208183030381529060405292505050919050565b6106fd6107b1565b73ffffffffffffffffffffffffffffffffffffffff81166107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107ae81610bf0565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161079c565b6001546040517f61a23d0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906361a23d0f9061088b9030906002906004016117aa565b6000604051808303816000875af11580156108aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108f091908101906118d2565b805161090491600691602090910190610fcf565b5060036109646040518060400160405280600681526020017f736368656d610000000000000000000000000000000000000000000000000000815250600660008154811061095457610954611456565b9060005260206000200154610c65565b8154600181018355600092835260209092209091019061098490826119ae565b5060036109d46040518060400160405280601181526020017f736368656d615f63617465676f72696573000000000000000000000000000000815250600660018154811061095457610954611456565b815460018101835560009283526020909220909101906109f490826119ae565b50600060058190556004805491610a0a83611649565b9190505550565b606081604051602001610a249190611ac8565b6040516020818303038152906040529050919050565b6060610a5d73ffffffffffffffffffffffffffffffffffffffff83166014610ca3565b92915050565b60606000610a7083610eed565b600101905060008167ffffffffffffffff811115610a9057610a9061102f565b6040519080825280601f01601f191660200182016040528015610aba576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610ac457509392505050565b60606000610b2f8686610c65565b9050808484604051602001610b4693929190611b12565b604051602081830303815290604052915050949350505050565b6001546040517f377af0da00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063377af0da90610bba90309086908690600401611bfc565b600060405180830381600087803b158015610bd457600080fd5b505af1158015610be8573d6000803e3d6000fd5b505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606082610c7146610a63565b610c7a84610a63565b604051602001610c8c93929190611c3a565b604051602081830303815290604052905092915050565b60606000610cb283600261173a565b610cbd906002611443565b67ffffffffffffffff811115610cd557610cd561102f565b6040519080825280601f01601f191660200182016040528015610cff576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610d3657610d36611456565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610d9957610d99611456565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610dd584600261173a565b610de0906001611443565b90505b6001811115610e7d577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610e2157610e21611456565b1a60f81b828281518110610e3757610e37611456565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93610e7681611cb0565b9050610de3565b508315610ee6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161079c565b9392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610f36577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610f62576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610f8057662386f26fc10000830492506010015b6305f5e1008310610f98576305f5e100830492506008015b6127108310610fac57612710830492506004015b60648310610fbe576064830492506002015b600a8310610a5d5760010192915050565b82805482825590600052602060002090810192821561100a579160200282015b8281111561100a578251825591602001919060010190610fef565b5061101692915061101a565b5090565b5b80821115611016576000815560010161101b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156110815761108161102f565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156110ce576110ce61102f565b604052919050565b600082601f8301126110e757600080fd5b813567ffffffffffffffff8111156111015761110161102f565b61113260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611087565b81815284602083860101111561114757600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561117e5761117e61102f565b5060051b60200190565b600082601f83011261119957600080fd5b813560206111ae6111a983611164565b611087565b82815260059290921b840181019181810190868411156111cd57600080fd5b8286015b8481101561120d57803567ffffffffffffffff8111156111f15760008081fd5b6111ff8986838b01016110d6565b8452509183019183016111d1565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146107ae57600080fd5b803561124581611218565b919050565b8035801515811461124557600080fd5b6000806040838503121561126d57600080fd5b823567ffffffffffffffff8082111561128557600080fd5b9084019060c0828703121561129957600080fd5b6112a161105e565b8235828111156112b057600080fd5b6112bc888286016110d6565b8252506020830135828111156112d157600080fd5b6112dd888286016110d6565b6020830152506040830135828111156112f557600080fd5b611301888286016110d6565b60408301525060608301358281111561131957600080fd5b61132588828601611188565b6060830152506113376080840161123a565b608082015261134860a0840161124a565b60a08201529660209590950135955050505050565b60006020828403121561136f57600080fd5b5035919050565b60005b83811015611391578181015183820152602001611379565b50506000910152565b600081518084526113b2816020860160208601611376565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610ee6602083018461139a565b60006020828403121561140957600080fd5b8135610ee681611218565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610a5d57610a5d611414565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151611497818560208601611376565b9290920192915050565b600089516114b3818460208e01611376565b80830190507f2c000000000000000000000000000000000000000000000000000000000000008082528a516114ef816001850160208f01611376565b60019201918201819052895161150c816002850160208e01611376565b600292019182018190528851611529816003850160208d01611376565b60039201918201528651611544816004840160208b01611376565b01611571600482017f2c000000000000000000000000000000000000000000000000000000000000009052565b61157e6005820187611485565b7f2c00000000000000000000000000000000000000000000000000000000000000815290506115b06001820186611485565b7f2c00000000000000000000000000000000000000000000000000000000000000815290506115e26001820185611485565b9b9a5050505050505050505050565b60008351611603818460208801611376565b7f2c00000000000000000000000000000000000000000000000000000000000000908301908152835161163d816001840160208801611376565b01600101949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361167a5761167a611414565b5060010190565b600181811c9082168061169557607f821691505b6020821081036116ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60ff81811683821602908116908181146116f0576116f0611414565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611735576117356116f7565b500490565b8082028115828204841417610a5d57610a5d611414565b600082611760576117606116f7565b500690565b7f307800000000000000000000000000000000000000000000000000000000000081526000825161179d816002850160208701611376565b9190910160020192915050565b60006040820173ffffffffffffffffffffffffffffffffffffffff85168352602060408185015281855480845260608601915060059350606081851b8701016000888152848120815b848110156118c2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a850301865282825461182e81611681565b808752600182811680156118495760018114611880576118ab565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168c8a01528b8315158e1b8a010194506118ab565b8688528b8820885b848110156118a35781548b82018f0152908301908d01611888565b8a018d019550505b50988a0198929650505091909101906001016117f3565b50919a9950505050505050505050565b600060208083850312156118e557600080fd5b825167ffffffffffffffff8111156118fc57600080fd5b8301601f8101851361190d57600080fd5b805161191b6111a982611164565b81815260059190911b8201830190838101908783111561193a57600080fd5b928401925b828410156119585783518252928401929084019061193f565b979650505050505050565b601f8211156119a957600081815260208120601f850160051c8101602086101561198a5750805b601f850160051c820191505b81811015610be857828155600101611996565b505050565b815167ffffffffffffffff8111156119c8576119c861102f565b6119dc816119d68454611681565b84611963565b602080601f831160018114611a2f57600084156119f95750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610be8565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611a7c57888601518255948401946001909101908401611a5d565b5085821015611ab857878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60007f27000000000000000000000000000000000000000000000000000000000000008083528351611b01816001860160208801611376565b600193019283015250600201919050565b7f494e5345525420494e544f200000000000000000000000000000000000000000815260008451611b4a81600c850160208901611376565b7f2800000000000000000000000000000000000000000000000000000000000000600c918401918201528451611b8781600d840160208901611376565b7f2956414c55455328000000000000000000000000000000000000000000000000600d92909101918201528351611bc5816015840160208801611376565b7f29000000000000000000000000000000000000000000000000000000000000006015929091019182015260160195945050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152826020820152606060408201526000611c31606083018461139a565b95945050505050565b60008451611c4c818460208901611376565b80830190507f5f000000000000000000000000000000000000000000000000000000000000008082528551611c88816001850160208a01611376565b60019201918201528351611ca3816002840160208801611376565b0160020195945050505050565b600081611cbf57611cbf611414565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fe736368656d615549442c20736368656d612c207265736f6c7665722c207265766f6361626c652c206e616d652c206465736372697074696f6e2c2063726561746f722c206372656174696f6e54696d657374616d70a26469706673582212206889fb2b7a380e44349c6161ac97b76b5685bdadf53fdc61d3fd6d6e41f9a84964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Creates a new SchemaRegistry instance."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "SchemaTablelandIndexer",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11139,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "tablelandContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITablelandTables)4963"
      },
      {
        "astId": 11142,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 11145,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "tables",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 11147,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "tablesUpdates",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 11149,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "tableRowsCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11152,
        "contract": "contracts/tablelandIndexers/SchemaTablelandIndexer.sol:SchemaTablelandIndexer",
        "label": "tableIDs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ITablelandTables)4963": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}