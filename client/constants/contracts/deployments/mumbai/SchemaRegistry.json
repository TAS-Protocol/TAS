{
  "address": "0xB953c11b2cad6D915c70C317A5983d1Eeab89cF0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISchemaTablelandIndexer",
          "name": "_tableland",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "getSchema",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "contract ISchemaResolver",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            }
          ],
          "internalType": "struct SchemaRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "schemaName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "schemaDescription",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "categories",
              "type": "string[]"
            },
            {
              "internalType": "contract ISchemaResolver",
              "name": "schemaResolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            }
          ],
          "internalType": "struct SchemaRegistrationInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3113d91851b6056cce0a317c86f461ed0fc967eb1aedf867f964ff241d376a82",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0x376DA6755310cF8BC04D1A710d9aebfc65B3C5F3",
    "transactionIndex": 1,
    "gasUsed": "847174",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000020000004000000002000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080008000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000080000001000000000000000000000000000000100000000000000000000000000080000000000000000000000000000000000000000000100000",
    "blockHash": "0x069da4d5b45b024871560c582be8869b0e2805e03ed921e1e99c256e478f0457",
    "transactionHash": "0x3113d91851b6056cce0a317c86f461ed0fc967eb1aedf867f964ff241d376a82",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 40554667,
        "transactionHash": "0x3113d91851b6056cce0a317c86f461ed0fc967eb1aedf867f964ff241d376a82",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000068047d3d277a400000000000000000000000000000000000000000000000003ee558fd9369fa900000000000000000000000000000000000000000000021e85e63400d971676400000000000000000000000000000000000000000000000003e7d5480564280500000000000000000000000000000000000000000000021e85ecb448ad43df08",
        "logIndex": 2,
        "blockHash": "0x069da4d5b45b024871560c582be8869b0e2805e03ed921e1e99c256e478f0457"
      }
    ],
    "blockNumber": 40554667,
    "cumulativeGasUsed": "868174",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x86cfb99bcc2D6De00E8a95b88a7557c0C221Fa54"
  ],
  "numDeployments": 1,
  "solcInputHash": "1663970b7101576bbd241d48e0243975",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISchemaTablelandIndexer\",\"name\":\"_tableland\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"internalType\":\"struct SchemaRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaDescription\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"categories\",\"type\":\"string[]\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"schemaResolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct SchemaRegistrationInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Creates a new SchemaRegistry instance.\"},\"getSchema(bytes32)\":{\"params\":{\"uid\":\"The UID of the schema to retrieve.\"},\"returns\":{\"_0\":\"The schema data members.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"SchemaRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getSchema(bytes32)\":{\"notice\":\"Returns an existing schema by UID\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"The global schema registry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SchemaRegistry.sol\":\"SchemaRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidTAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n    string dataBase64;\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x3a8284675c5fe312aeabffb195dfa388645f8fc6c84a5238e007694a8954fec7\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\nstruct SchemaRegistrationInput {\\n    string schema;\\n    string schemaName;\\n    string schemaDescription;\\n    string[] categories;\\n    ISchemaResolver schemaResolver;\\n    bool revocable;\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    function register(\\n        SchemaRegistrationInput memory input\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xde2a2b64e934247a6631bd82bfdaddb64afb80f6212e5247e968d9b0723b3a3c\",\"license\":\"MIT\"},\"contracts/SchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {ISchemaResolver} from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\nimport {EMPTY_UID} from \\\"./Common.sol\\\";\\n\\nimport {Semver} from \\\"./Semver.sol\\\";\\n\\nimport {ISchemaRegistry, SchemaRecord, SchemaRegistrationInput} from \\\"./ISchemaRegistry.sol\\\";\\n\\nimport {ISchemaTablelandIndexer} from \\\"./interfaces/ISchemaTablelandIndexer.sol\\\";\\n\\n/// @title SchemaRegistry\\n/// @notice The global schema registry.\\ncontract SchemaRegistry is ISchemaRegistry, Semver {\\n    ISchemaTablelandIndexer tableland;\\n\\n    error AlreadyExists();\\n\\n    // The global mapping between schema records and their IDs.\\n    mapping(bytes32 uid => SchemaRecord schemaRecord) private _registry;\\n\\n    /// @dev Creates a new SchemaRegistry instance.\\n    constructor(ISchemaTablelandIndexer _tableland) Semver(0, 0, 1) {\\n        tableland = _tableland;\\n    }\\n\\n    function register(\\n        SchemaRegistrationInput memory input\\n    ) external returns (bytes32) {\\n        SchemaRecord memory schemaRecord = SchemaRecord({\\n            uid: EMPTY_UID,\\n            schema: input.schema,\\n            resolver: input.schemaResolver,\\n            revocable: input.revocable\\n        });\\n\\n        bytes32 uid = _getUID(schemaRecord);\\n        if (_registry[uid].uid != EMPTY_UID) {\\n            revert AlreadyExists();\\n        }\\n\\n        schemaRecord.uid = uid;\\n        _registry[uid] = schemaRecord;\\n\\n        tableland.SchemaRegistered(input, schemaRecord.uid);\\n\\n        return uid;\\n    }\\n\\n    /// @inheritdoc ISchemaRegistry\\n    function getSchema(\\n        bytes32 uid\\n    ) external view returns (SchemaRecord memory) {\\n        return _registry[uid];\\n    }\\n\\n    /// @dev Calculates a UID for a given schema.\\n    /// @param schemaRecord The input schema.\\n    /// @return schema UID.\\n    function _getUID(\\n        SchemaRecord memory schemaRecord\\n    ) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    schemaRecord.schema,\\n                    schemaRecord.resolver,\\n                    schemaRecord.revocable,\\n                    block.timestamp\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x677cd919f6677959abe2982b2f372362628a27abe1e0c14f4b0e667cd7a978be\",\"license\":\"MIT\"},\"contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x51a65a7dfe211b1b014d26523d0bd6680e7e85de5e5a66b13df2a167dd2702fb\",\"license\":\"MIT\"},\"contracts/interfaces/ISchemaTablelandIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport {ISchemaRegistry, SchemaRegistrationInput} from \\\"../ISchemaRegistry.sol\\\";\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Tableland Attestation Service protocol.\\ninterface ISchemaTablelandIndexer {\\n    function SchemaRegistered(\\n        SchemaRegistrationInput memory input,\\n        bytes32 schemaUID\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb9fa2e2ccf59651245ff2617588d81bf6b2436a63d70abb43b45ba653cf20592\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x41ca4d09299123200e38fae5b4f6767d0385271609b791cefac391641585c142\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051610ee2380380610ee283398101604081905261002f916100a3565b6000608081905260a0819052600160c05280546001600160a01b0319166001600160a01b03929092169190911790556100cc565b60006001600160a01b0382165b92915050565b600061007082610063565b61008a81610076565b811461009557600080fd5b50565b805161007081610081565b6000602082840312156100b8576100b8600080fd5b60006100c48484610098565b949350505050565b60805160a05160c051610dea6100f8600039600060fd0152600060d40152600060ab0152610dea6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806361a4434c14610064578063a2ea7c6e14610084575b600080fd5b61004e6100a4565b60405161005b919061059d565b60405180910390f35b6100776100723660046108c6565b610147565b60405161005b9190610909565b610097610092366004610928565b61028d565b60405161005b91906109ee565b60606100cf7f0000000000000000000000000000000000000000000000000000000000000000610398565b6100f87f0000000000000000000000000000000000000000000000000000000000000000610398565b6101217f0000000000000000000000000000000000000000000000000000000000000000610398565b60405160200161013393929190610a21565b604051602081830303815290604052905090565b60408051608080820183526000808352908401516001600160a01b0316602083015260a084015115159282019290925282516060820152816101888261042c565b600081815260016020526040902054909150156101b85760405163119b4fd360e11b815260040160405180910390fd5b80825260008181526001602081815260409283902085518155908501519181018054938601511515600160a01b026001600160a81b03199094166001600160a01b03909316929092179290921790556060830151839190600282019061021e9082610b3c565b50506000548351604051636c42ce2560e01b81526001600160a01b039092169250636c42ce2591610253918891600401610d00565b600060405180830381600087803b15801561026d57600080fd5b505af1158015610281573d6000803e3d6000fd5b50929695505050505050565b6040805160808101825260008082526020820181905291810191909152606080820152600082815260016020818152604092839020835160808101855281548152928101546001600160a01b03811692840192909252600160a01b90910460ff1615159282019290925260028201805491929160608401919061030f90610a6f565b80601f016020809104026020016040519081016040528092919081815260200182805461033b90610a6f565b80156103885780601f1061035d57610100808354040283529160200191610388565b820191906000526020600020905b81548152906001019060200180831161036b57829003601f168201915b5050505050815250509050919050565b606060006103a58361046e565b600101905060008167ffffffffffffffff8111156103c5576103c56105b5565b6040519080825280601f01601f1916602001820160405280156103ef576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846103f9575b509392505050565b6000816060015182602001518360400151426040516020016104519493929190610d70565b604051602081830303815290604052805190602001209050919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106104ad5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106104d9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106104f757662386f26fc10000830492506010015b6305f5e100831061050f576305f5e100830492506008015b612710831061052357612710830492506004015b60648310610535576064830492506002015b600a8310610541576001015b92915050565b60005b8381101561056257818101518382015260200161054a565b50506000910152565b6000610575825190565b80845260208401935061058c818560208601610547565b601f01601f19169290920192915050565b602080825281016105ae818461056b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156105f1576105f16105b5565b6040525050565b600061060360405190565b905061060f82826105cb565b919050565b600067ffffffffffffffff82111561062e5761062e6105b5565b601f19601f83011660200192915050565b82818337506000910152565b600061065e61065984610614565b6105f8565b90508281526020810184848401111561067957610679600080fd5b61042484828561063f565b600082601f83011261069857610698600080fd5b81356106a884826020860161064b565b949350505050565b600067ffffffffffffffff8211156106ca576106ca6105b5565b5060209081020190565b60006106e2610659846106b0565b8381529050602080820190840283018581111561070157610701600080fd5b835b8181101561074257803567ffffffffffffffff81111561072557610725600080fd5b8086016107328982610684565b8552505060209283019201610703565b5050509392505050565b600082601f83011261076057610760600080fd5b81356106a88482602086016106d4565b60006001600160a01b038216610541565b600061054182610770565b61079581610781565b81146107a057600080fd5b50565b80356105418161078c565b801515610795565b8035610541816107ae565b600060c082840312156107d6576107d6600080fd5b6107e060c06105f8565b9050813567ffffffffffffffff8111156107fc576107fc600080fd5b61080884828501610684565b825250602082013567ffffffffffffffff81111561082857610828600080fd5b61083484828501610684565b602083015250604082013567ffffffffffffffff81111561085757610857600080fd5b61086384828501610684565b604083015250606082013567ffffffffffffffff81111561088657610886600080fd5b6108928482850161074c565b60608301525060806108a6848285016107a3565b60808301525060a06108ba848285016107b6565b60a08301525092915050565b6000602082840312156108db576108db600080fd5b813567ffffffffffffffff8111156108f5576108f5600080fd5b6106a8848285016107c1565b805b82525050565b602081016105418284610901565b80610795565b803561054181610917565b60006020828403121561093d5761093d600080fd5b60006106a8848461091d565b60006105416001600160a01b038316610960565b90565b6001600160a01b031690565b600061054182610949565b60006105418261096c565b61090381610977565b801515610903565b805160009060808401906109a78582610901565b5060208301516109ba6020860182610982565b5060408301516109cd604086018261098b565b50606083015184820360608601526109e5828261056b565b95945050505050565b602080825281016105ae8184610993565b6000610a09825190565b610a17818560208601610547565b9290920192915050565b6000610a2d82866109ff565b601760f91b81526001019150610a4382856109ff565b601760f91b815260010191506109e582846109ff565b634e487b7160e01b600052602260045260246000fd5b600281046001821680610a8357607f821691505b602082108103610a9557610a95610a59565b50919050565b600061054161095d8381565b610ab083610a9b565b815460001960089490940293841b1916921b91909117905550565b6000610ad8818484610aa7565b505050565b81811015610af857610af0600082610acb565b600101610add565b5050565b601f821115610ad8576000818152602090206020601f85010481016020851015610b235750805b610b356020601f860104830182610add565b5050505050565b815167ffffffffffffffff811115610b5657610b566105b5565b610b608254610a6f565b610b6b828285610afc565b6020601f831160018114610b9f5760008415610b875750858201515b600019600886021c1981166002860217865550610bf8565b600085815260208120601f198616915b82811015610bcf5788850151825560209485019460019092019101610baf565b86831015610beb5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60006105ae838361056b565b6000610c16825190565b80845260208401935083602082028501610c308560200190565b8060005b85811015610c655784840389528151610c4d8582610c00565b94506020830160209a909a0199925050600101610c34565b5091979650505050505050565b805160c080845260009190840190610c8a828261056b565b91505060208301518482036020860152610ca4828261056b565b91505060408301518482036040860152610cbe828261056b565b91505060608301518482036060860152610cd88282610c0c565b9150506080830151610ced6080860182610982565b5060a083015161042460a086018261098b565b60408082528101610d118185610c72565b90506105ae6020830184610901565b60006105418260601b90565b600061054182610d20565b610903610d4382610977565b610d2c565b60006105418260f81b90565b600061054182610d48565b610903811515610d54565b80610903565b6000610d7c82876109ff565b9150610d888286610d37565b601482019150610d988285610d5f565b600182019150610da88284610d6a565b5060200194935050505056fea26469706673582212206e6d0828107dd56a94117a2d07303be2f000c8ca7833af7b2c66ef5f2ea9cad364736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806361a4434c14610064578063a2ea7c6e14610084575b600080fd5b61004e6100a4565b60405161005b919061059d565b60405180910390f35b6100776100723660046108c6565b610147565b60405161005b9190610909565b610097610092366004610928565b61028d565b60405161005b91906109ee565b60606100cf7f0000000000000000000000000000000000000000000000000000000000000000610398565b6100f87f0000000000000000000000000000000000000000000000000000000000000000610398565b6101217f0000000000000000000000000000000000000000000000000000000000000000610398565b60405160200161013393929190610a21565b604051602081830303815290604052905090565b60408051608080820183526000808352908401516001600160a01b0316602083015260a084015115159282019290925282516060820152816101888261042c565b600081815260016020526040902054909150156101b85760405163119b4fd360e11b815260040160405180910390fd5b80825260008181526001602081815260409283902085518155908501519181018054938601511515600160a01b026001600160a81b03199094166001600160a01b03909316929092179290921790556060830151839190600282019061021e9082610b3c565b50506000548351604051636c42ce2560e01b81526001600160a01b039092169250636c42ce2591610253918891600401610d00565b600060405180830381600087803b15801561026d57600080fd5b505af1158015610281573d6000803e3d6000fd5b50929695505050505050565b6040805160808101825260008082526020820181905291810191909152606080820152600082815260016020818152604092839020835160808101855281548152928101546001600160a01b03811692840192909252600160a01b90910460ff1615159282019290925260028201805491929160608401919061030f90610a6f565b80601f016020809104026020016040519081016040528092919081815260200182805461033b90610a6f565b80156103885780601f1061035d57610100808354040283529160200191610388565b820191906000526020600020905b81548152906001019060200180831161036b57829003601f168201915b5050505050815250509050919050565b606060006103a58361046e565b600101905060008167ffffffffffffffff8111156103c5576103c56105b5565b6040519080825280601f01601f1916602001820160405280156103ef576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846103f9575b509392505050565b6000816060015182602001518360400151426040516020016104519493929190610d70565b604051602081830303815290604052805190602001209050919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106104ad5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106104d9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106104f757662386f26fc10000830492506010015b6305f5e100831061050f576305f5e100830492506008015b612710831061052357612710830492506004015b60648310610535576064830492506002015b600a8310610541576001015b92915050565b60005b8381101561056257818101518382015260200161054a565b50506000910152565b6000610575825190565b80845260208401935061058c818560208601610547565b601f01601f19169290920192915050565b602080825281016105ae818461056b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156105f1576105f16105b5565b6040525050565b600061060360405190565b905061060f82826105cb565b919050565b600067ffffffffffffffff82111561062e5761062e6105b5565b601f19601f83011660200192915050565b82818337506000910152565b600061065e61065984610614565b6105f8565b90508281526020810184848401111561067957610679600080fd5b61042484828561063f565b600082601f83011261069857610698600080fd5b81356106a884826020860161064b565b949350505050565b600067ffffffffffffffff8211156106ca576106ca6105b5565b5060209081020190565b60006106e2610659846106b0565b8381529050602080820190840283018581111561070157610701600080fd5b835b8181101561074257803567ffffffffffffffff81111561072557610725600080fd5b8086016107328982610684565b8552505060209283019201610703565b5050509392505050565b600082601f83011261076057610760600080fd5b81356106a88482602086016106d4565b60006001600160a01b038216610541565b600061054182610770565b61079581610781565b81146107a057600080fd5b50565b80356105418161078c565b801515610795565b8035610541816107ae565b600060c082840312156107d6576107d6600080fd5b6107e060c06105f8565b9050813567ffffffffffffffff8111156107fc576107fc600080fd5b61080884828501610684565b825250602082013567ffffffffffffffff81111561082857610828600080fd5b61083484828501610684565b602083015250604082013567ffffffffffffffff81111561085757610857600080fd5b61086384828501610684565b604083015250606082013567ffffffffffffffff81111561088657610886600080fd5b6108928482850161074c565b60608301525060806108a6848285016107a3565b60808301525060a06108ba848285016107b6565b60a08301525092915050565b6000602082840312156108db576108db600080fd5b813567ffffffffffffffff8111156108f5576108f5600080fd5b6106a8848285016107c1565b805b82525050565b602081016105418284610901565b80610795565b803561054181610917565b60006020828403121561093d5761093d600080fd5b60006106a8848461091d565b60006105416001600160a01b038316610960565b90565b6001600160a01b031690565b600061054182610949565b60006105418261096c565b61090381610977565b801515610903565b805160009060808401906109a78582610901565b5060208301516109ba6020860182610982565b5060408301516109cd604086018261098b565b50606083015184820360608601526109e5828261056b565b95945050505050565b602080825281016105ae8184610993565b6000610a09825190565b610a17818560208601610547565b9290920192915050565b6000610a2d82866109ff565b601760f91b81526001019150610a4382856109ff565b601760f91b815260010191506109e582846109ff565b634e487b7160e01b600052602260045260246000fd5b600281046001821680610a8357607f821691505b602082108103610a9557610a95610a59565b50919050565b600061054161095d8381565b610ab083610a9b565b815460001960089490940293841b1916921b91909117905550565b6000610ad8818484610aa7565b505050565b81811015610af857610af0600082610acb565b600101610add565b5050565b601f821115610ad8576000818152602090206020601f85010481016020851015610b235750805b610b356020601f860104830182610add565b5050505050565b815167ffffffffffffffff811115610b5657610b566105b5565b610b608254610a6f565b610b6b828285610afc565b6020601f831160018114610b9f5760008415610b875750858201515b600019600886021c1981166002860217865550610bf8565b600085815260208120601f198616915b82811015610bcf5788850151825560209485019460019092019101610baf565b86831015610beb5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60006105ae838361056b565b6000610c16825190565b80845260208401935083602082028501610c308560200190565b8060005b85811015610c655784840389528151610c4d8582610c00565b94506020830160209a909a0199925050600101610c34565b5091979650505050505050565b805160c080845260009190840190610c8a828261056b565b91505060208301518482036020860152610ca4828261056b565b91505060408301518482036040860152610cbe828261056b565b91505060608301518482036060860152610cd88282610c0c565b9150506080830151610ced6080860182610982565b5060a083015161042460a086018261098b565b60408082528101610d118185610c72565b90506105ae6020830184610901565b60006105418260601b90565b600061054182610d20565b610903610d4382610977565b610d2c565b60006105418260f81b90565b600061054182610d48565b610903811515610d54565b80610903565b6000610d7c82876109ff565b9150610d888286610d37565b601482019150610d988285610d5f565b600182019150610da88284610d6a565b5060200194935050505056fea26469706673582212206e6d0828107dd56a94117a2d07303be2f000c8ca7833af7b2c66ef5f2ea9cad364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Creates a new SchemaRegistry instance."
      },
      "getSchema(bytes32)": {
        "params": {
          "uid": "The UID of the schema to retrieve."
        },
        "returns": {
          "_0": "The schema data members."
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "title": "SchemaRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getSchema(bytes32)": {
        "notice": "Returns an existing schema by UID"
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "The global schema registry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5507,
        "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
        "label": "tableland",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISchemaTablelandIndexer)8608"
      },
      {
        "astId": 5514,
        "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
        "label": "_registry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(SchemaRecord)5212_storage)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISchemaResolver)8701": {
        "encoding": "inplace",
        "label": "contract ISchemaResolver",
        "numberOfBytes": "20"
      },
      "t_contract(ISchemaTablelandIndexer)8608": {
        "encoding": "inplace",
        "label": "contract ISchemaTablelandIndexer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(SchemaRecord)5212_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SchemaRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(SchemaRecord)5212_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SchemaRecord)5212_storage": {
        "encoding": "inplace",
        "label": "struct SchemaRecord",
        "members": [
          {
            "astId": 5204,
            "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
            "label": "uid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5207,
            "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
            "label": "resolver",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ISchemaResolver)8701"
          },
          {
            "astId": 5209,
            "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
            "label": "revocable",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 5211,
            "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
            "label": "schema",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}