{
  "address": "0x70977d11589e28E73dBa2Ea803b6d23e9E205057",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "contentCreators",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "creatorsShares",
          "type": "uint256[]"
        }
      ],
      "name": "SchemaAdminsInserted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "monthlySubscriptionPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "splitterContract",
          "type": "address"
        }
      ],
      "name": "SchemaInfoInserted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "SchemaPriceUpdated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        }
      ],
      "name": "SchemaRevenueRecordCreated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        }
      ],
      "name": "SchemaRevenueUpdated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionEndsAt",
          "type": "uint256"
        }
      ],
      "name": "SchemaSubscriptionCreated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaUID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionEndsAt",
          "type": "uint256"
        }
      ],
      "name": "SchemaSubscriptionUpdated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0x70977d11589e28E73dBa2Ea803b6d23e9E205057",
    "transactionIndex": 21,
    "gasUsed": "2702501",
    "logsBloom": "0x000000000000000000000004000000000000000000000000008000000001000040000000000400000000000000000000010080000000000000000000000000100000000000000000000100080000008000010000000000000001000000000040000000000200000000000000000008000000000000000000801080100005004080000000000000000000000004040000000000000000800000000000004000002000000020000000000008000008800000000000000000000000000000000040000001020000c0000001000001000000000000008000000000100040000020000000000000000000000000000000000000040000000002000000000000100000",
    "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2",
    "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 40577010,
        "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
        "address": "0x70977d11589e28E73dBa2Ea803b6d23e9E205057",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 40577010,
        "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070977d11589e28e73dba2ea803b6d23e9e205057",
          "0x0000000000000000000000000000000000000000000000000000000000001dda"
        ],
        "data": "0x",
        "logIndex": 125,
        "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 40577010,
        "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x00000000000000000000000070977d11589e28e73dba2ea803b6d23e9e2050570000000000000000000000000000000000000000000000000000000000001dda0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000006a435245415445205441424c452067726f75705f383030303128736368656d615549442074657874207072696d617279206b65792c206d6f6e74686c79537562736372697074696f6e507269636520746578742c2073706c6974746572436f6e747261637420746578742900000000000000000000000000000000000000000000",
        "logIndex": 126,
        "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 40577010,
        "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070977d11589e28e73dba2ea803b6d23e9e205057",
          "0x0000000000000000000000000000000000000000000000000000000000001ddb"
        ],
        "data": "0x",
        "logIndex": 127,
        "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 40577010,
        "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x00000000000000000000000070977d11589e28e73dba2ea803b6d23e9e2050570000000000000000000000000000000000000000000000000000000000001ddb00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000046435245415445205441424c452063726561746f725f383030303128736368656d6155494420746578742c20617474657374657220746578742c207368617265732074657874290000000000000000000000000000000000000000000000000000",
        "logIndex": 128,
        "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 40577010,
        "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070977d11589e28e73dba2ea803b6d23e9e205057",
          "0x0000000000000000000000000000000000000000000000000000000000001ddc"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 40577010,
        "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x00000000000000000000000070977d11589e28e73dba2ea803b6d23e9e2050570000000000000000000000000000000000000000000000000000000000001ddc00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000059435245415445205441424c4520737562736372697074696f6e5f383030303128736368656d6155494420746578742c207375627363726962657220746578742c20737562736372697074696f6e456e6473417420746578742900000000000000",
        "logIndex": 130,
        "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 40577010,
        "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070977d11589e28e73dba2ea803b6d23e9e205057",
          "0x0000000000000000000000000000000000000000000000000000000000001ddd"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 40577010,
        "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x00000000000000000000000070977d11589e28e73dba2ea803b6d23e9e2050570000000000000000000000000000000000000000000000000000000000001ddd00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000049435245415445205441424c4520726576656e75655f383030303128736368656d615549442074657874207072696d617279206b65792c20746f74616c436c61696d65642074657874290000000000000000000000000000000000000000000000",
        "logIndex": 132,
        "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 40577010,
        "transactionHash": "0x54140637e7580690b1fcce5ebec835f7023b64e05ffec130d487947b7a4b079d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000148bed972d640b0000000000000000000000000000000000000000000000000245ea5f13cc6cc200000000000000000000000000000000000000000000349860d2b2f4f3dbbf8a00000000000000000000000000000000000000000000000002315e717c9f08b700000000000000000000000000000000000000000000349860e73ee28b092395",
        "logIndex": 133,
        "blockHash": "0xbb54df9226d3b5bf6d8be33b42daf2aa6821ebbd02b8259d8e69223e8b2d03d2"
      }
    ],
    "blockNumber": 40577010,
    "cumulativeGasUsed": "5303726",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "271f055c327174593309aa6bb1046f87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"contentCreators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"creatorsShares\",\"type\":\"uint256[]\"}],\"name\":\"SchemaAdminsInserted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"monthlySubscriptionPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"splitterContract\",\"type\":\"address\"}],\"name\":\"SchemaInfoInserted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"SchemaPriceUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"name\":\"SchemaRevenueRecordCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"name\":\"SchemaRevenueUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionEndsAt\",\"type\":\"uint256\"}],\"name\":\"SchemaSubscriptionCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionEndsAt\",\"type\":\"uint256\"}],\"name\":\"SchemaSubscriptionUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TAS\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"The Tableland Attestation Service protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tablelandIndexers/TablelandSubscriptionsIndexer.sol\":\"TablelandSubscriptionsIndexer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Sepolia.\\n    address internal constant SEPOLIA =\\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Goerli.\\n    address internal constant ARBITRUM_GOERLI =\\n        0x033f69e8d119205089Ab15D340F5b797732f646b;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Calibration.\\n    address internal constant FILECOIN_CALIBRATION =\\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/local-tableland.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (ITablelandTables) {\\n        if (block.chainid == 1) {\\n            return ITablelandTables(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return ITablelandTables(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return ITablelandTables(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return ITablelandTables(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return ITablelandTables(MATIC);\\n        } else if (block.chainid == 314) {\\n            return ITablelandTables(FILECOIN);\\n        } else if (block.chainid == 11155111) {\\n            return ITablelandTables(SEPOLIA);\\n        } else if (block.chainid == 420) {\\n            return ITablelandTables(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421613) {\\n            return ITablelandTables(ARBITRUM_GOERLI);\\n        } else if (block.chainid == 80001) {\\n            return ITablelandTables(MATICMUM);\\n        } else if (block.chainid == 314159) {\\n            return ITablelandTables(FILECOIN_CALIBRATION);\\n        } else if (block.chainid == 31337) {\\n            return ITablelandTables(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29920684b8971cd38b81626677de7be59039437c81f48a9d633bbee028dbc1d4\",\"license\":\"MIT\"},\"contracts/tablelandIndexers/TablelandSubscriptionsIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {TablelandDeployments, ITablelandTables} from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport {SQLHelpers} from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\n/// @title TAS\\n/// @notice The Tableland Attestation Service protocol.\\ncontract TablelandSubscriptionsIndexer is IERC721Receiver, Ownable {\\n    ITablelandTables private tablelandContract;\\n\\n    string[] createTableStatements;\\n\\n    string[] public tables;\\n\\n    uint256[] tableIDs;\\n\\n    uint256 tablesUpdates;\\n\\n    uint256 private tablesRowsCounter;\\n\\n    string private constant GROUP_TABLE_PREFIX = \\\"group\\\";\\n\\n    string private constant GROUP_SCHEMA =\\n        \\\"schemaUID text primary key, monthlySubscriptionPrice text, splitterContract text\\\";\\n\\n    string private constant CREATOR_TABLE_PREFIX = \\\"creator\\\";\\n\\n    string private constant CREATOR_SCHEMA =\\n        \\\"schemaUID text, attester text, shares text\\\";\\n\\n    string private constant SUBSCRIPTION_TABLE_PREFIX = \\\"subscription\\\";\\n\\n    string private constant SUBSCRIPTION_SCHEMA =\\n        \\\"schemaUID text, subscriber text, subscriptionEndsAt text\\\";\\n\\n    string private constant GROUP_REVENUE_TABLE_PREFIX = \\\"revenue\\\";\\n\\n    string private constant GROUP_REVENUE_SCHEMA =\\n        \\\"schemaUID text primary key, totalClaimed text\\\";\\n\\n    constructor() {\\n        tablelandContract = TablelandDeployments.get();\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(GROUP_SCHEMA, GROUP_TABLE_PREFIX)\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(CREATOR_SCHEMA, CREATOR_TABLE_PREFIX)\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                SUBSCRIPTION_SCHEMA,\\n                SUBSCRIPTION_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                GROUP_REVENUE_SCHEMA,\\n                GROUP_REVENUE_TABLE_PREFIX\\n            )\\n        );\\n\\n        tableIDs = tablelandContract.create(\\n            address(this),\\n            createTableStatements\\n        );\\n\\n        tables.push(SQLHelpers.toNameFromId(GROUP_TABLE_PREFIX, tableIDs[0]));\\n        tables.push(SQLHelpers.toNameFromId(CREATOR_TABLE_PREFIX, tableIDs[1]));\\n        tables.push(\\n            SQLHelpers.toNameFromId(SUBSCRIPTION_TABLE_PREFIX, tableIDs[2])\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(GROUP_REVENUE_TABLE_PREFIX, tableIDs[3])\\n        );\\n    }\\n\\n    function SchemaInfoInserted(\\n        bytes32 schemaUID,\\n        uint256 monthlySubscriptionPrice,\\n        address splitterContract\\n    ) public onlyOwner {\\n        // Managing tableland rows limitation.\\n        if (tablesRowsCounter == 100000) {\\n            RenewTables();\\n        }\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toInsert(\\n                GROUP_TABLE_PREFIX,\\n                tableIDs[0],\\n                \\\"schemaUID, monthlySubscriptionPrice, splitterContract\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(\\n                        (Strings.toString(monthlySubscriptionPrice))\\n                    ),\\n                    \\\",\\\",\\n                    SQLHelpers.quote((Strings.toHexString(splitterContract)))\\n                )\\n            )\\n        );\\n        tablesRowsCounter++;\\n    }\\n\\n    function SchemaAdminsInserted(\\n        bytes32 schemaUID,\\n        address[] memory contentCreators,\\n        uint256[] memory creatorsShares\\n    ) public onlyOwner {\\n        for (uint i = 0; i < contentCreators.length; i++) {\\n            mutate(\\n                tableIDs[1],\\n                SQLHelpers.toInsert(\\n                    CREATOR_TABLE_PREFIX,\\n                    tableIDs[1],\\n                    \\\"schemaUID, attester, shares\\\",\\n                    string.concat(\\n                        SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                        \\\",\\\",\\n                        SQLHelpers.quote(\\n                            Strings.toHexString(contentCreators[i])\\n                        ),\\n                        \\\",\\\",\\n                        SQLHelpers.quote(Strings.toString(creatorsShares[i]))\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function SchemaSubscriptionCreated(\\n        bytes32 schemaUID,\\n        address subscriber,\\n        uint256 subscriptionEndsAt\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toInsert(\\n                SUBSCRIPTION_TABLE_PREFIX,\\n                tableIDs[2],\\n                \\\"schemaUID, subscriber, subscriptionEndsAt\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(subscriber)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(subscriptionEndsAt))\\n                )\\n            )\\n        );\\n    }\\n\\n    function SchemaPriceUpdated(\\n        bytes32 schemaUID,\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toUpdate(\\n                GROUP_TABLE_PREFIX,\\n                tableIDs[0],\\n                string.concat(\\n                    \\\"monthlySubscriptionPrice=\\\",\\n                    SQLHelpers.quote(Strings.toString(newPrice))\\n                ),\\n                string.concat(\\n                    \\\"schemaUID=\\\",\\n                    SQLHelpers.quote(bytes32ToString(schemaUID))\\n                )\\n            )\\n        );\\n    }\\n\\n    function SchemaSubscriptionUpdated(\\n        bytes32 schemaUID,\\n        address subscriber,\\n        uint256 subscriptionEndsAt\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toUpdate(\\n                SUBSCRIPTION_TABLE_PREFIX,\\n                tableIDs[2],\\n                string.concat(\\n                    \\\"subscriptionEndsAt=\\\",\\n                    SQLHelpers.quote(Strings.toString(subscriptionEndsAt))\\n                ),\\n                string.concat(\\n                    \\\"subscriber=\\\",\\n                    SQLHelpers.quote(Strings.toHexString(subscriber)),\\n                    \\\"and schemaUID=\\\",\\n                    SQLHelpers.quote(bytes32ToString(schemaUID))\\n                )\\n            )\\n        );\\n    }\\n\\n    function SchemaRevenueRecordCreated(bytes32 schemaUID) public onlyOwner {\\n        uint256 ZERO = 0;\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toInsert(\\n                GROUP_REVENUE_TABLE_PREFIX,\\n                tableIDs[3],\\n                \\\"schemaUID, totalClaimed\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(schemaUID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(ZERO))\\n                )\\n            )\\n        );\\n    }\\n\\n    function SchemaRevenueUpdated(\\n        bytes32 schemaUID,\\n        uint256 totalClaimed\\n    ) public onlyOwner {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toUpdate(\\n                GROUP_REVENUE_TABLE_PREFIX,\\n                tableIDs[3],\\n                string.concat(\\n                    \\\"totalClaimed=\\\",\\n                    SQLHelpers.quote(Strings.toString(totalClaimed))\\n                ),\\n                string.concat(\\n                    \\\"schemaUID=\\\",\\n                    SQLHelpers.quote(bytes32ToString(schemaUID))\\n                )\\n            )\\n        );\\n    }\\n\\n    function RenewTables() internal {\\n        tableIDs = tablelandContract.create(\\n            address(this),\\n            createTableStatements\\n        );\\n\\n        tables.push(SQLHelpers.toNameFromId(GROUP_TABLE_PREFIX, tableIDs[0]));\\n\\n        tables.push(SQLHelpers.toNameFromId(CREATOR_TABLE_PREFIX, tableIDs[1]));\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(SUBSCRIPTION_TABLE_PREFIX, tableIDs[2])\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(GROUP_REVENUE_TABLE_PREFIX, tableIDs[3])\\n        );\\n\\n        tablesRowsCounter = 0;\\n\\n        tablesUpdates++;\\n    }\\n\\n    function bytes32ToString(bytes32 data) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    /*\\n     * @dev Internal function to execute a mutation on a table.\\n     * @param {uint256} tableId - Table ID.\\n     * @param {string} statement - Mutation statement.\\n     */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        tablelandContract.mutate(address(this), tableId, statement);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8bfb62e88564fe495d9152c245481ae4fc91a97ad1a7ea8de8a137bffc5eff4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000422565b6200002762000472565b600160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060026200008f60405180608001604052806050815260200162002e2760509139604080518082019091526005815264067726f75760dc1b60208201526200063f565b81546001810183556000928352602090922090910190620000b190826200099e565b506002620000f66040518060600160405280602a815260200162002dfd602a913960408051808201909152600781526631b932b0ba37b960c91b60208201526200063f565b815460018101835560009283526020909220909101906200011890826200099e565b5060026200016260405180606001604052806038815260200162002e776038913960408051808201909152600c81526b39bab139b1b934b83a34b7b760a11b60208201526200063f565b815460018101835560009283526020909220909101906200018490826200099e565b506002620001c96040518060600160405280602d815260200162002eaf602d9139604080518082019091526007815266726576656e756560c81b60208201526200063f565b81546001810183556000928352602090922090910190620001eb90826200099e565b506001546040516361a23d0f60e01b81526001600160a01b03909116906361a23d0f906200022190309060029060040162000b97565b6000604051808303816000875af115801562000241573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200026b919081019062000cd1565b8051620002819160049160209091019062000829565b506003620002d460405180604001604052806005815260200164067726f75760dc1b8152506004600081548110620002bd57620002bd62000d11565b90600052602060002001546200067a60201b60201c565b81546001810183556000928352602090922090910190620002f690826200099e565b506003620003346040518060400160405280600781526020016631b932b0ba37b960c91b8152506004600181548110620002bd57620002bd62000d11565b815460018101835560009283526020909220909101906200035690826200099e565b506003620003996040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506004600281548110620002bd57620002bd62000d11565b81546001810183556000928352602090922090910190620003bb90826200099e565b506003620003f960405180604001604052806007815260200166726576656e756560c81b8152506004600381548110620002bd57620002bd62000d11565b815460018101835560009283526020909220909101906200041b90826200099e565b5062000e6c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60004660010362000496575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a03620004b8575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b103620004db5750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba03620004fe5750731a22854c5b1642760a827f20137a67930ae108d290565b46608903620005205750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a036200054357507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a70362000567575073c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a4036200058a575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed03620005ae575073033f69e8d119205089ab15d340f5b797732f646b90565b466201388103620005d25750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f03620005f6575073030bcf3d50cad04c2e57391b12740982a930862190565b46617a690362000619575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b4660405163264e42cf60e01b815260040162000636919062000d2e565b60405180910390fd5b6060816200064d46620006a7565b84604051602001620006629392919062000db8565b60405160208183030381529060405290505b92915050565b6060826200068846620006a7565b6200069384620006a7565b604051602001620006629392919062000e28565b60606000620006b68362000740565b60010190506000816001600160401b03811115620006d857620006d862000890565b6040519080825280601f01601f19166020018201604052801562000703576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200070d57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106200078a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310620007b7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310620007d657662386f26fc10000830492506010015b6305f5e1008310620007ef576305f5e100830492506008015b61271083106200080457612710830492506004015b6064831062000817576064830492506002015b600a8310620006745760010192915050565b82805482825590600052602060002090810192821562000867579160200282015b82811115620008675782518255916020019190600101906200084a565b506200087592915062000879565b5090565b5b808211156200087557600081556001016200087a565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b600281046001821680620008d157607f821691505b602082108103620008e657620008e6620008a6565b50919050565b600062000674620008fa8381565b90565b6200090883620008ec565b815460001960089490940293841b1916921b91909117905550565b600062000932818484620008fd565b505050565b8181101562000956576200094d60008262000923565b60010162000937565b5050565b601f82111562000932576000818152602090206020601f85010481016020851015620009835750805b620009976020601f86010483018262000937565b5050505050565b81516001600160401b03811115620009ba57620009ba62000890565b620009c68254620008bc565b620009d38282856200095a565b6020601f83116001811462000a0a5760008415620009f15750858201515b600019600886021c198116600286021786555062000a66565b600085815260208120601f198616915b8281101562000a3c578885015182556020948501946001909201910162000a1a565b8683101562000a595784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60006001600160a01b03821662000674565b62000a8b8162000a6e565b82525050565b6000815462000aa081620008bc565b80855260208501945060018216801562000ac3576001811462000ada5762000b0a565b60ff19831686526020821515028601935062000b0a565b60008581526020902060005b8381101562000b045781548882015260019091019060200162000ae6565b87019450505b50505092915050565b600062000b21838362000a91565b9392505050565b600062000b33825490565b8084526020840193508360208202850162000b548560009081526020902090565b8060005b8581101562000b8a5784840389528162000b73858262000b13565b60209a909a01999450506001918201910162000b58565b5091979650505050505050565b6040810162000ba7828562000a80565b818103602083015262000bbb818462000b28565b949350505050565b601f19601f83011681018181106001600160401b038211171562000beb5762000beb62000890565b6040525050565b600062000bfe60405190565b905062000c0c828262000bc3565b919050565b60006001600160401b0382111562000c2d5762000c2d62000890565b5060209081020190565b805162000674565b600062000c5662000c508462000c11565b62000bf2565b8381529050602080820190840283018581111562000c775762000c77600080fd5b835b8181101562000c9f578062000c8f888262000c37565b8452506020928301920162000c79565b5050509392505050565b600082601f83011262000cbf5762000cbf600080fd5b815162000bbb84826020860162000c3f565b60006020828403121562000ce85762000ce8600080fd5b81516001600160401b0381111562000d035762000d03600080fd5b62000bbb8482850162000ca9565b634e487b7160e01b600052603260045260246000fd5b8062000a8b565b6020810162000674828462000d27565b60005b8381101562000d5b57818101518382015260200162000d41565b50506000910152565b600062000d6f825190565b62000d7f81856020860162000d3e565b9290920192915050565b605f60f81b815260005b5060010190565b600560fb1b8152600062000d93565b602960f81b8152600062000d93565b6c021a922a0aa22902a20a126229609d1b8152600d01600062000ddc828662000d64565b915062000de98262000d89565b915062000df7828562000d64565b915062000e048262000d9a565b915062000e12828462000d64565b915062000e1f8262000da9565b95945050505050565b600062000e36828662000d64565b915062000e438262000d89565b915062000e51828562000d64565b915062000e5e8262000d89565b915062000e1f828462000d64565b611f818062000e7c6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637e6c78bd1161008c5780639201de55116100665780639201de55146101ab578063d2ea9ad0146101be578063f2fde38b146101d1578063f398db32146101e457600080fd5b80637e6c78bd1461016c5780638d879e6d1461017f5780638da5cb5b1461019257600080fd5b8063150b7a02146100d45780631aa7cbe6146101095780632e324b101461011e5780636e38551814610131578063715018a61461014457806371671bf21461014c575b600080fd5b6100f36100e2366004611282565b630a85bd0160e11b95945050505050565b6040516101009190611318565b60405180910390f35b61011c610117366004611326565b6101f7565b005b61011c61012c366004611363565b6102ca565b61011c61013f3660046113b3565b6103a3565b61011c610478565b61015f61015a3660046113f9565b61048c565b6040516101009190611478565b61011c61017a366004611605565b610538565b61011c61018d366004611326565b610654565b6000546001600160a01b0316604051610100919061168a565b61015f6101b93660046113f9565b6106dc565b61011c6101cc366004611363565b610895565b61011c6101df366004611698565b61095a565b61011c6101f23660046113f9565b61099d565b6101ff610a6a565b6102c66004600081548110610216576102166116b9565b90600052602060002001546102c160405180604001604052806005815260200164067726f75760dc1b8152506004600081548110610256576102566116b9565b906000526020600020015461027261026d87610a94565b610b27565b60405160200161028291906116f1565b60405160208183030381529060405261029d61026d896106dc565b6040516020016102ad9190611723565b604051602081830303815290604052610b50565b610bcb565b5050565b6102d2610a6a565b61039e60046002815481106102e9576102e96116b9565b90600052602060002001546102c16040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506004600281548110610330576103306116b9565b9060005260206000200154604051806060016040528060298152602001611eee6029913961036061026d8a6106dc565b61036c61026d8a610c35565b61037861026d8a610a94565b60405160200161038a93929190611742565b604051602081830303815290604052610c51565b505050565b6103ab610a6a565b600654620186a0036103bf576103bf610c90565b61045e60046000815481106103d6576103d66116b9565b90600052602060002001546102c160405180604001604052806005815260200164067726f75760dc1b8152506004600081548110610416576104166116b9565b9060005260206000200154604051806060016040528060358152602001611f176035913961044661026d8a6106dc565b61045261026d8a610a94565b61037861026d8a610c35565b6006805490600061046e83611799565b9190505550505050565b610480610a6a565b61048a6000610eb6565b565b6003818154811061049c57600080fd5b9060005260206000200160009150905080546104b7906117c9565b80601f01602080910402602001604051908101604052809291908181526020018280546104e3906117c9565b80156105305780601f1061050557610100808354040283529160200191610530565b820191906000526020600020905b81548152906001019060200180831161051357829003601f168201915b505050505081565b610540610a6a565b60005b825181101561064e5761063c6004600181548110610563576105636116b9565b90600052602060002001546102c16040518060400160405280600781526020016631b932b0ba37b960c91b81525060046001815481106105a5576105a56116b9565b90600052602060002001546040518060400160405280601b81526020017f736368656d615549442c2061747465737465722c2073686172657300000000008152506105f261026d8b6106dc565b61061761026d8b8a8151811061060a5761060a6116b9565b6020026020010151610c35565b61037861026d8b8b8151811061062f5761062f6116b9565b6020026020010151610a94565b8061064681611799565b915050610543565b50505050565b61065c610a6a565b6102c66004600381548110610673576106736116b9565b90600052602060002001546102c160405180604001604052806007815260200166726576656e756560c81b81525060046003815481106106b5576106b56116b9565b90600052602060002001546106cc61026d87610a94565b60405160200161028291906117f5565b606060006106ec60206002611817565b60ff1667ffffffffffffffff81111561070757610707611489565b6040519080825280601f01601f191660200182016040528015610731576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b602081101561086b5781825186836020811061077d5761077d6116b9565b6107899291901a611854565b81518110610799576107996116b9565b01602001516001600160f81b031916836107b4836002611868565b815181106107c4576107c46116b9565b60200101906001600160f81b031916908160001a9053508182518683602081106107f0576107f06116b9565b6107fc9291901a611880565b8151811061080c5761080c6116b9565b01602001516001600160f81b03191683610827836002611868565b610832906001611894565b81518110610842576108426116b9565b60200101906001600160f81b031916908160001a9053508061086381611799565b91505061075f565b508160405160200161087d91906118a7565b60405160208183030381529060405292505050919050565b61089d610a6a565b61039e60046002815481106108b4576108b46116b9565b90600052602060002001546102c16040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b81525060046002815481106108fb576108fb6116b9565b906000526020600020015461091261026d87610a94565b60405160200161092291906118c2565b60405160208183030381529060405261093d61026d89610c35565b61094961026d8b6106dc565b6040516020016102ad9291906118ea565b610962610a6a565b6001600160a01b0381166109915760405162461bcd60e51b81526004016109889061192d565b60405180910390fd5b61099a81610eb6565b50565b6109a5610a6a565b60006102c660046003815481106109be576109be6116b9565b90600052602060002001546102c160405180604001604052806007815260200166726576656e756560c81b8152506004600381548110610a0057610a006116b9565b90600052602060002001546040518060400160405280601781526020017f736368656d615549442c20746f74616c436c61696d6564000000000000000000815250610a4d61026d896106dc565b610a5961026d89610a94565b60405160200161038a929190611977565b6000546001600160a01b0316331461048a5760405162461bcd60e51b8152600401610988906119ce565b60606000610aa183610f06565b600101905060008167ffffffffffffffff811115610ac157610ac1611489565b6040519080825280601f01601f191660200182016040528015610aeb576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610af557509392505050565b606081604051602001610b3a91906119ec565b6040516020818303038152906040529050919050565b60606000610b5e8686610fde565b60408051602081019091526000815284519192509015610b9b5783604051602001610b899190611a25565b60405160208183030381529060405290505b818582604051602001610bb093929190611a44565b60405160208183030381529060405292505050949350505050565b600154604051631bbd786d60e11b81526001600160a01b039091169063377af0da90610bff90309086908690600401611a87565b600060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b505050505050565b6060610c4b6001600160a01b038316601461101c565b92915050565b60606000610c5f8686610fde565b9050808484604051602001610c7693929190611ad0565b604051602081830303815290604052915050949350505050565b6001546040516361a23d0f60e01b81526001600160a01b03909116906361a23d0f90610cc3903090600290600401611c1f565b6000604051808303816000875af1158015610ce2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0a9190810190611cbf565b8051610d1e9160049160209091019061118f565b506003610d6660405180604001604052806005815260200164067726f75760dc1b8152506004600081548110610d5657610d566116b9565b9060005260206000200154610fde565b81546001810183556000928352602090922090910190610d869082611d95565b506003610dc06040518060400160405280600781526020016631b932b0ba37b960c91b8152506004600181548110610d5657610d566116b9565b81546001810183556000928352602090922090910190610de09082611d95565b506003610e1f6040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506004600281548110610d5657610d566116b9565b81546001810183556000928352602090922090910190610e3f9082611d95565b506003610e7960405180604001604052806007815260200166726576656e756560c81b8152506004600381548110610d5657610d566116b9565b81546001810183556000928352602090922090910190610e999082611d95565b50600060068190556005805491610eaf83611799565b9190505550565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610f455772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610f71576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610f8f57662386f26fc10000830492506010015b6305f5e1008310610fa7576305f5e100830492506008015b6127108310610fbb57612710830492506004015b60648310610fcd576064830492506002015b600a8310610c4b5760010192915050565b606082610fea46610a94565b610ff384610a94565b60405160200161100593929190611e66565b604051602081830303815290604052905092915050565b6060600061102b836002611868565b611036906002611894565b67ffffffffffffffff81111561104e5761104e611489565b6040519080825280601f01601f191660200182016040528015611078576020820181803683370190505b509050600360fc1b81600081518110611093576110936116b9565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110c2576110c26116b9565b60200101906001600160f81b031916908160001a90535060006110e6846002611868565b6110f1906001611894565b90505b6001811115611169576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611125576111256116b9565b1a60f81b82828151811061113b5761113b6116b9565b60200101906001600160f81b031916908160001a90535060049490941c9361116281611e94565b90506110f4565b5083156111885760405162461bcd60e51b815260040161098890611edd565b9392505050565b8280548282559060005260206000209081019282156111ca579160200282015b828111156111ca5782518255916020019190600101906111af565b506111d69291506111da565b5090565b5b808211156111d657600081556001016111db565b60006001600160a01b038216610c4b565b611209816111ef565b811461099a57600080fd5b8035610c4b81611200565b80611209565b8035610c4b8161121f565b60008083601f84011261124557611245600080fd5b50813567ffffffffffffffff81111561126057611260600080fd5b60208301915083600182028301111561127b5761127b600080fd5b9250929050565b60008060008060006080868803121561129d5761129d600080fd5b60006112a98888611214565b95505060206112ba88828901611214565b94505060406112cb88828901611225565b935050606086013567ffffffffffffffff8111156112eb576112eb600080fd5b6112f788828901611230565b92509250509295509295909350565b6001600160e01b031981165b82525050565b60208101610c4b8284611306565b6000806040838503121561133c5761133c600080fd5b60006113488585611225565b925050602061135985828601611225565b9150509250929050565b60008060006060848603121561137b5761137b600080fd5b60006113878686611225565b935050602061139886828701611214565b92505060406113a986828701611225565b9150509250925092565b6000806000606084860312156113cb576113cb600080fd5b60006113d78686611225565b93505060206113e886828701611225565b92505060406113a986828701611214565b60006020828403121561140e5761140e600080fd5b600061141a8484611225565b949350505050565b60005b8381101561143d578181015183820152602001611425565b50506000910152565b6000611450825190565b808452602084019350611467818560208601611422565b601f01601f19169290920192915050565b602080825281016111888184611446565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156114c5576114c5611489565b6040525050565b60006114d760405190565b90506114e3828261149f565b919050565b600067ffffffffffffffff82111561150257611502611489565b5060209081020190565b600061151f61151a846114e8565b6114cc565b8381529050602080820190840283018581111561153e5761153e600080fd5b835b8181101561156257806115538882611214565b84525060209283019201611540565b5050509392505050565b600082601f83011261158057611580600080fd5b813561141a84826020860161150c565b600061159e61151a846114e8565b838152905060208082019084028301858111156115bd576115bd600080fd5b835b8181101561156257806115d28882611225565b845250602092830192016115bf565b600082601f8301126115f5576115f5600080fd5b813561141a848260208601611590565b60008060006060848603121561161d5761161d600080fd5b60006116298686611225565b935050602084013567ffffffffffffffff81111561164957611649600080fd5b6116558682870161156c565b925050604084013567ffffffffffffffff81111561167557611675600080fd5b6113a9868287016115e1565b611312816111ef565b60208101610c4b8284611681565b6000602082840312156116ad576116ad600080fd5b600061141a8484611214565b634e487b7160e01b600052603260045260246000fd5b60006116d9825190565b6116e7818560208601611422565b9290920192915050565b7f6d6f6e74686c79537562736372697074696f6e50726963653d000000000000008152601901600061118882846116cf565b69736368656d615549443d60b01b8152600a01600061118882846116cf565b600061174e82866116cf565b600b60fa1b8152600101915061176482856116cf565b600b60fa1b8152600101915061177a82846116cf565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982036117ac576117ac611783565b5060010190565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806117dd57607f821691505b6020821081036117ef576117ef6117b3565b50919050565b6c746f74616c436c61696d65643d60981b8152600d01600061118882846116cf565b60ff91821691908116908282029081169081811461183757611837611783565b5092915050565b634e487b7160e01b600052601260045260246000fd5b6000826118635761186361183e565b500490565b81810280821583820485141761183757611837611783565b60008261188f5761188f61183e565b500690565b80820180821115610c4b57610c4b611783565b61060f60f31b81526000600282015b915061118882846116cf565b72737562736372697074696f6e456e647341743d60681b8152601301600061118882846116cf565b6a737562736372696265723d60a81b8152600b01600061190a82856116cf565b6d616e6420736368656d615549443d60901b8152600e01915061141a82846116cf565b60208082528101610c4b81602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b600061198382856116cf565b600b60fa1b8152600101915061141a82846116cf565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b60208082528101610c4b81611999565b602760f81b815260006117ac565b60006119f7826119de565b9150611a0382846116cf565b9150611188826119de565b660102ba422a922960cd1b815260005b5060070190565b60006118b682611a0e565b6602aa82220aa22960cd1b81526000611a1e565b6000611a4f82611a30565b9150611a5b82866116cf565b6401029a2aa160dd1b81526005019150611a7582856116cf565b915061177a82846116cf565b80611312565b60608101611a958286611681565b611aa26020830185611a81565b818103604083015261177a8184611446565b600560fb1b815260006117ac565b602960f81b815260006117ac565b6b024a729a2a92a1024a72a27960a51b8152600c016000611af182866116cf565b9150611afc82611ab4565b9150611b0882856116cf565b67052ac8298aa8aa6560c31b81526008019150611b2582846116cf565b915061177a82611ac2565b60008154611b3d816117c9565b808552602085019450600182168015611b5d5760018114611b7357611ba1565b60ff198316865260208215150286019350611ba1565b60008581526020902060005b83811015611b9b57815488820152600190910190602001611b7f565b87019450505b50505092915050565b60006111888383611b30565b6000611bc0825490565b80845260208401935083602082028501611be08560009081526020902090565b8060005b85811015611c1257848403895281611bfc8582611baa565b60209a909a019994505060019182019101611be4565b5091979650505050505050565b60408101611c2d8285611681565b818103602083015261141a8184611bb6565b8051610c4b8161121f565b6000611c5861151a846114e8565b83815290506020808201908402830185811115611c7757611c77600080fd5b835b818110156115625780611c8c8882611c3f565b84525060209283019201611c79565b600082601f830112611caf57611caf600080fd5b815161141a848260208601611c4a565b600060208284031215611cd457611cd4600080fd5b815167ffffffffffffffff811115611cee57611cee600080fd5b61141a84828501611c9b565b6000610c4b611d068381565b90565b611d1283611cfa565b815460001960089490940293841b1916921b91909117905550565b600061039e818484611d09565b818110156102c657611d4d600082611d2d565b600101611d3a565b601f82111561039e576000818152602090206020601f85010481016020851015611d7c5750805b611d8e6020601f860104830182611d3a565b5050505050565b815167ffffffffffffffff811115611daf57611daf611489565b611db982546117c9565b611dc4828285611d55565b6020601f831160018114611df85760008415611de05750858201515b600019600886021c1981166002860217865550610c2d565b600085815260208120601f198616915b82811015611e285788850151825560209485019460019092019101611e08565b86831015611e445784890151600019601f89166008021c191682555b600160028802018855505050505050505050565b605f60f81b815260006117ac565b6000611e7282866116cf565b9150611e7d82611e58565b9150611e8982856116cf565b9150611a7582611e58565b600081611ea357611ea3611783565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260006119c7565b60208082528101610c4b81611eab56fe736368656d615549442c20737562736372696265722c20737562736372697074696f6e456e64734174736368656d615549442c206d6f6e74686c79537562736372697074696f6e50726963652c2073706c6974746572436f6e7472616374a2646970667358221220f9f6c5db29bf3f0d9e4a008c16b74f4873f3ac438e46919d0bb9eb9ac6ecb50864736f6c63430008130033736368656d6155494420746578742c20617474657374657220746578742c207368617265732074657874736368656d615549442074657874207072696d617279206b65792c206d6f6e74686c79537562736372697074696f6e507269636520746578742c2073706c6974746572436f6e74726163742074657874736368656d6155494420746578742c207375627363726962657220746578742c20737562736372697074696f6e456e647341742074657874736368656d615549442074657874207072696d617279206b65792c20746f74616c436c61696d65642074657874",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637e6c78bd1161008c5780639201de55116100665780639201de55146101ab578063d2ea9ad0146101be578063f2fde38b146101d1578063f398db32146101e457600080fd5b80637e6c78bd1461016c5780638d879e6d1461017f5780638da5cb5b1461019257600080fd5b8063150b7a02146100d45780631aa7cbe6146101095780632e324b101461011e5780636e38551814610131578063715018a61461014457806371671bf21461014c575b600080fd5b6100f36100e2366004611282565b630a85bd0160e11b95945050505050565b6040516101009190611318565b60405180910390f35b61011c610117366004611326565b6101f7565b005b61011c61012c366004611363565b6102ca565b61011c61013f3660046113b3565b6103a3565b61011c610478565b61015f61015a3660046113f9565b61048c565b6040516101009190611478565b61011c61017a366004611605565b610538565b61011c61018d366004611326565b610654565b6000546001600160a01b0316604051610100919061168a565b61015f6101b93660046113f9565b6106dc565b61011c6101cc366004611363565b610895565b61011c6101df366004611698565b61095a565b61011c6101f23660046113f9565b61099d565b6101ff610a6a565b6102c66004600081548110610216576102166116b9565b90600052602060002001546102c160405180604001604052806005815260200164067726f75760dc1b8152506004600081548110610256576102566116b9565b906000526020600020015461027261026d87610a94565b610b27565b60405160200161028291906116f1565b60405160208183030381529060405261029d61026d896106dc565b6040516020016102ad9190611723565b604051602081830303815290604052610b50565b610bcb565b5050565b6102d2610a6a565b61039e60046002815481106102e9576102e96116b9565b90600052602060002001546102c16040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506004600281548110610330576103306116b9565b9060005260206000200154604051806060016040528060298152602001611eee6029913961036061026d8a6106dc565b61036c61026d8a610c35565b61037861026d8a610a94565b60405160200161038a93929190611742565b604051602081830303815290604052610c51565b505050565b6103ab610a6a565b600654620186a0036103bf576103bf610c90565b61045e60046000815481106103d6576103d66116b9565b90600052602060002001546102c160405180604001604052806005815260200164067726f75760dc1b8152506004600081548110610416576104166116b9565b9060005260206000200154604051806060016040528060358152602001611f176035913961044661026d8a6106dc565b61045261026d8a610a94565b61037861026d8a610c35565b6006805490600061046e83611799565b9190505550505050565b610480610a6a565b61048a6000610eb6565b565b6003818154811061049c57600080fd5b9060005260206000200160009150905080546104b7906117c9565b80601f01602080910402602001604051908101604052809291908181526020018280546104e3906117c9565b80156105305780601f1061050557610100808354040283529160200191610530565b820191906000526020600020905b81548152906001019060200180831161051357829003601f168201915b505050505081565b610540610a6a565b60005b825181101561064e5761063c6004600181548110610563576105636116b9565b90600052602060002001546102c16040518060400160405280600781526020016631b932b0ba37b960c91b81525060046001815481106105a5576105a56116b9565b90600052602060002001546040518060400160405280601b81526020017f736368656d615549442c2061747465737465722c2073686172657300000000008152506105f261026d8b6106dc565b61061761026d8b8a8151811061060a5761060a6116b9565b6020026020010151610c35565b61037861026d8b8b8151811061062f5761062f6116b9565b6020026020010151610a94565b8061064681611799565b915050610543565b50505050565b61065c610a6a565b6102c66004600381548110610673576106736116b9565b90600052602060002001546102c160405180604001604052806007815260200166726576656e756560c81b81525060046003815481106106b5576106b56116b9565b90600052602060002001546106cc61026d87610a94565b60405160200161028291906117f5565b606060006106ec60206002611817565b60ff1667ffffffffffffffff81111561070757610707611489565b6040519080825280601f01601f191660200182016040528015610731576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b602081101561086b5781825186836020811061077d5761077d6116b9565b6107899291901a611854565b81518110610799576107996116b9565b01602001516001600160f81b031916836107b4836002611868565b815181106107c4576107c46116b9565b60200101906001600160f81b031916908160001a9053508182518683602081106107f0576107f06116b9565b6107fc9291901a611880565b8151811061080c5761080c6116b9565b01602001516001600160f81b03191683610827836002611868565b610832906001611894565b81518110610842576108426116b9565b60200101906001600160f81b031916908160001a9053508061086381611799565b91505061075f565b508160405160200161087d91906118a7565b60405160208183030381529060405292505050919050565b61089d610a6a565b61039e60046002815481106108b4576108b46116b9565b90600052602060002001546102c16040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b81525060046002815481106108fb576108fb6116b9565b906000526020600020015461091261026d87610a94565b60405160200161092291906118c2565b60405160208183030381529060405261093d61026d89610c35565b61094961026d8b6106dc565b6040516020016102ad9291906118ea565b610962610a6a565b6001600160a01b0381166109915760405162461bcd60e51b81526004016109889061192d565b60405180910390fd5b61099a81610eb6565b50565b6109a5610a6a565b60006102c660046003815481106109be576109be6116b9565b90600052602060002001546102c160405180604001604052806007815260200166726576656e756560c81b8152506004600381548110610a0057610a006116b9565b90600052602060002001546040518060400160405280601781526020017f736368656d615549442c20746f74616c436c61696d6564000000000000000000815250610a4d61026d896106dc565b610a5961026d89610a94565b60405160200161038a929190611977565b6000546001600160a01b0316331461048a5760405162461bcd60e51b8152600401610988906119ce565b60606000610aa183610f06565b600101905060008167ffffffffffffffff811115610ac157610ac1611489565b6040519080825280601f01601f191660200182016040528015610aeb576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610af557509392505050565b606081604051602001610b3a91906119ec565b6040516020818303038152906040529050919050565b60606000610b5e8686610fde565b60408051602081019091526000815284519192509015610b9b5783604051602001610b899190611a25565b60405160208183030381529060405290505b818582604051602001610bb093929190611a44565b60405160208183030381529060405292505050949350505050565b600154604051631bbd786d60e11b81526001600160a01b039091169063377af0da90610bff90309086908690600401611a87565b600060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b505050505050565b6060610c4b6001600160a01b038316601461101c565b92915050565b60606000610c5f8686610fde565b9050808484604051602001610c7693929190611ad0565b604051602081830303815290604052915050949350505050565b6001546040516361a23d0f60e01b81526001600160a01b03909116906361a23d0f90610cc3903090600290600401611c1f565b6000604051808303816000875af1158015610ce2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0a9190810190611cbf565b8051610d1e9160049160209091019061118f565b506003610d6660405180604001604052806005815260200164067726f75760dc1b8152506004600081548110610d5657610d566116b9565b9060005260206000200154610fde565b81546001810183556000928352602090922090910190610d869082611d95565b506003610dc06040518060400160405280600781526020016631b932b0ba37b960c91b8152506004600181548110610d5657610d566116b9565b81546001810183556000928352602090922090910190610de09082611d95565b506003610e1f6040518060400160405280600c81526020016b39bab139b1b934b83a34b7b760a11b8152506004600281548110610d5657610d566116b9565b81546001810183556000928352602090922090910190610e3f9082611d95565b506003610e7960405180604001604052806007815260200166726576656e756560c81b8152506004600381548110610d5657610d566116b9565b81546001810183556000928352602090922090910190610e999082611d95565b50600060068190556005805491610eaf83611799565b9190505550565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610f455772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610f71576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610f8f57662386f26fc10000830492506010015b6305f5e1008310610fa7576305f5e100830492506008015b6127108310610fbb57612710830492506004015b60648310610fcd576064830492506002015b600a8310610c4b5760010192915050565b606082610fea46610a94565b610ff384610a94565b60405160200161100593929190611e66565b604051602081830303815290604052905092915050565b6060600061102b836002611868565b611036906002611894565b67ffffffffffffffff81111561104e5761104e611489565b6040519080825280601f01601f191660200182016040528015611078576020820181803683370190505b509050600360fc1b81600081518110611093576110936116b9565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110c2576110c26116b9565b60200101906001600160f81b031916908160001a90535060006110e6846002611868565b6110f1906001611894565b90505b6001811115611169576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611125576111256116b9565b1a60f81b82828151811061113b5761113b6116b9565b60200101906001600160f81b031916908160001a90535060049490941c9361116281611e94565b90506110f4565b5083156111885760405162461bcd60e51b815260040161098890611edd565b9392505050565b8280548282559060005260206000209081019282156111ca579160200282015b828111156111ca5782518255916020019190600101906111af565b506111d69291506111da565b5090565b5b808211156111d657600081556001016111db565b60006001600160a01b038216610c4b565b611209816111ef565b811461099a57600080fd5b8035610c4b81611200565b80611209565b8035610c4b8161121f565b60008083601f84011261124557611245600080fd5b50813567ffffffffffffffff81111561126057611260600080fd5b60208301915083600182028301111561127b5761127b600080fd5b9250929050565b60008060008060006080868803121561129d5761129d600080fd5b60006112a98888611214565b95505060206112ba88828901611214565b94505060406112cb88828901611225565b935050606086013567ffffffffffffffff8111156112eb576112eb600080fd5b6112f788828901611230565b92509250509295509295909350565b6001600160e01b031981165b82525050565b60208101610c4b8284611306565b6000806040838503121561133c5761133c600080fd5b60006113488585611225565b925050602061135985828601611225565b9150509250929050565b60008060006060848603121561137b5761137b600080fd5b60006113878686611225565b935050602061139886828701611214565b92505060406113a986828701611225565b9150509250925092565b6000806000606084860312156113cb576113cb600080fd5b60006113d78686611225565b93505060206113e886828701611225565b92505060406113a986828701611214565b60006020828403121561140e5761140e600080fd5b600061141a8484611225565b949350505050565b60005b8381101561143d578181015183820152602001611425565b50506000910152565b6000611450825190565b808452602084019350611467818560208601611422565b601f01601f19169290920192915050565b602080825281016111888184611446565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156114c5576114c5611489565b6040525050565b60006114d760405190565b90506114e3828261149f565b919050565b600067ffffffffffffffff82111561150257611502611489565b5060209081020190565b600061151f61151a846114e8565b6114cc565b8381529050602080820190840283018581111561153e5761153e600080fd5b835b8181101561156257806115538882611214565b84525060209283019201611540565b5050509392505050565b600082601f83011261158057611580600080fd5b813561141a84826020860161150c565b600061159e61151a846114e8565b838152905060208082019084028301858111156115bd576115bd600080fd5b835b8181101561156257806115d28882611225565b845250602092830192016115bf565b600082601f8301126115f5576115f5600080fd5b813561141a848260208601611590565b60008060006060848603121561161d5761161d600080fd5b60006116298686611225565b935050602084013567ffffffffffffffff81111561164957611649600080fd5b6116558682870161156c565b925050604084013567ffffffffffffffff81111561167557611675600080fd5b6113a9868287016115e1565b611312816111ef565b60208101610c4b8284611681565b6000602082840312156116ad576116ad600080fd5b600061141a8484611214565b634e487b7160e01b600052603260045260246000fd5b60006116d9825190565b6116e7818560208601611422565b9290920192915050565b7f6d6f6e74686c79537562736372697074696f6e50726963653d000000000000008152601901600061118882846116cf565b69736368656d615549443d60b01b8152600a01600061118882846116cf565b600061174e82866116cf565b600b60fa1b8152600101915061176482856116cf565b600b60fa1b8152600101915061177a82846116cf565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982036117ac576117ac611783565b5060010190565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806117dd57607f821691505b6020821081036117ef576117ef6117b3565b50919050565b6c746f74616c436c61696d65643d60981b8152600d01600061118882846116cf565b60ff91821691908116908282029081169081811461183757611837611783565b5092915050565b634e487b7160e01b600052601260045260246000fd5b6000826118635761186361183e565b500490565b81810280821583820485141761183757611837611783565b60008261188f5761188f61183e565b500690565b80820180821115610c4b57610c4b611783565b61060f60f31b81526000600282015b915061118882846116cf565b72737562736372697074696f6e456e647341743d60681b8152601301600061118882846116cf565b6a737562736372696265723d60a81b8152600b01600061190a82856116cf565b6d616e6420736368656d615549443d60901b8152600e01915061141a82846116cf565b60208082528101610c4b81602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b600061198382856116cf565b600b60fa1b8152600101915061141a82846116cf565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b60208082528101610c4b81611999565b602760f81b815260006117ac565b60006119f7826119de565b9150611a0382846116cf565b9150611188826119de565b660102ba422a922960cd1b815260005b5060070190565b60006118b682611a0e565b6602aa82220aa22960cd1b81526000611a1e565b6000611a4f82611a30565b9150611a5b82866116cf565b6401029a2aa160dd1b81526005019150611a7582856116cf565b915061177a82846116cf565b80611312565b60608101611a958286611681565b611aa26020830185611a81565b818103604083015261177a8184611446565b600560fb1b815260006117ac565b602960f81b815260006117ac565b6b024a729a2a92a1024a72a27960a51b8152600c016000611af182866116cf565b9150611afc82611ab4565b9150611b0882856116cf565b67052ac8298aa8aa6560c31b81526008019150611b2582846116cf565b915061177a82611ac2565b60008154611b3d816117c9565b808552602085019450600182168015611b5d5760018114611b7357611ba1565b60ff198316865260208215150286019350611ba1565b60008581526020902060005b83811015611b9b57815488820152600190910190602001611b7f565b87019450505b50505092915050565b60006111888383611b30565b6000611bc0825490565b80845260208401935083602082028501611be08560009081526020902090565b8060005b85811015611c1257848403895281611bfc8582611baa565b60209a909a019994505060019182019101611be4565b5091979650505050505050565b60408101611c2d8285611681565b818103602083015261141a8184611bb6565b8051610c4b8161121f565b6000611c5861151a846114e8565b83815290506020808201908402830185811115611c7757611c77600080fd5b835b818110156115625780611c8c8882611c3f565b84525060209283019201611c79565b600082601f830112611caf57611caf600080fd5b815161141a848260208601611c4a565b600060208284031215611cd457611cd4600080fd5b815167ffffffffffffffff811115611cee57611cee600080fd5b61141a84828501611c9b565b6000610c4b611d068381565b90565b611d1283611cfa565b815460001960089490940293841b1916921b91909117905550565b600061039e818484611d09565b818110156102c657611d4d600082611d2d565b600101611d3a565b601f82111561039e576000818152602090206020601f85010481016020851015611d7c5750805b611d8e6020601f860104830182611d3a565b5050505050565b815167ffffffffffffffff811115611daf57611daf611489565b611db982546117c9565b611dc4828285611d55565b6020601f831160018114611df85760008415611de05750858201515b600019600886021c1981166002860217865550610c2d565b600085815260208120601f198616915b82811015611e285788850151825560209485019460019092019101611e08565b86831015611e445784890151600019601f89166008021c191682555b600160028802018855505050505050505050565b605f60f81b815260006117ac565b6000611e7282866116cf565b9150611e7d82611e58565b9150611e8982856116cf565b9150611a7582611e58565b600081611ea357611ea3611783565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260006119c7565b60208082528101610c4b81611eab56fe736368656d615549442c20737562736372696265722c20737562736372697074696f6e456e64734174736368656d615549442c206d6f6e74686c79537562736372697074696f6e50726963652c2073706c6974746572436f6e7472616374a2646970667358221220f9f6c5db29bf3f0d9e4a008c16b74f4873f3ac438e46919d0bb9eb9ac6ecb50864736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "TAS",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "notice": "The Tableland Attestation Service protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/tablelandIndexers/TablelandSubscriptionsIndexer.sol:TablelandSubscriptionsIndexer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12025,
        "contract": "contracts/tablelandIndexers/TablelandSubscriptionsIndexer.sol:TablelandSubscriptionsIndexer",
        "label": "tablelandContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITablelandTables)4651"
      },
      {
        "astId": 12028,
        "contract": "contracts/tablelandIndexers/TablelandSubscriptionsIndexer.sol:TablelandSubscriptionsIndexer",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 12031,
        "contract": "contracts/tablelandIndexers/TablelandSubscriptionsIndexer.sol:TablelandSubscriptionsIndexer",
        "label": "tables",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 12034,
        "contract": "contracts/tablelandIndexers/TablelandSubscriptionsIndexer.sol:TablelandSubscriptionsIndexer",
        "label": "tableIDs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12036,
        "contract": "contracts/tablelandIndexers/TablelandSubscriptionsIndexer.sol:TablelandSubscriptionsIndexer",
        "label": "tablesUpdates",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12038,
        "contract": "contracts/tablelandIndexers/TablelandSubscriptionsIndexer.sol:TablelandSubscriptionsIndexer",
        "label": "tablesRowsCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ITablelandTables)4651": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}